/* tslint:disable */
/* eslint-disable */
/**
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify\'s Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddTracksToPlaylistRequest
 */
export interface AddTracksToPlaylistRequest {
    [key: string]: any;

    /**
     * The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}` 
     * @type {number}
     * @memberof AddTracksToPlaylistRequest
     */
    'position'?: number;
    /**
     * A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof AddTracksToPlaylistRequest
     */
    'uris'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AlbumBase
 */
export interface AlbumBase {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'album_type': AlbumBaseAlbumTypeEnum;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof AlbumBase
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {AlbumBaseExternalUrls}
     * @memberof AlbumBase
     */
    'external_urls': AlbumBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AlbumBase
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof AlbumBase
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof AlbumBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof AlbumBase
     */
    'release_date_precision': AlbumBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumBaseRestrictions}
     * @memberof AlbumBase
     */
    'restrictions'?: AlbumBaseRestrictions;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof AlbumBase
     */
    'total_tracks': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof AlbumBase
     */
    'type': AlbumBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'uri': string;
}

export const AlbumBaseAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type AlbumBaseAlbumTypeEnum = typeof AlbumBaseAlbumTypeEnum[keyof typeof AlbumBaseAlbumTypeEnum];
export const AlbumBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type AlbumBaseReleaseDatePrecisionEnum = typeof AlbumBaseReleaseDatePrecisionEnum[keyof typeof AlbumBaseReleaseDatePrecisionEnum];
export const AlbumBaseTypeEnum = {
    Album: 'album'
} as const;

export type AlbumBaseTypeEnum = typeof AlbumBaseTypeEnum[keyof typeof AlbumBaseTypeEnum];

/**
 * Known external URLs for this album. 
 * @export
 * @interface AlbumBaseExternalUrls
 */
export interface AlbumBaseExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof AlbumBaseExternalUrls
     */
    'spotify'?: string;
}
/**
 * Included in the response when a content restriction is applied. 
 * @export
 * @interface AlbumBaseRestrictions
 */
export interface AlbumBaseRestrictions {
    /**
     * The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user\'s subscription type, or when the user\'s account is set to not play explicit content. Additional reasons may be added in the future. 
     * @type {string}
     * @memberof AlbumBaseRestrictions
     */
    'reason'?: AlbumBaseRestrictionsReasonEnum;
}

export const AlbumBaseRestrictionsReasonEnum = {
    Market: 'market',
    Product: 'product',
    Explicit: 'explicit'
} as const;

export type AlbumBaseRestrictionsReasonEnum = typeof AlbumBaseRestrictionsReasonEnum[keyof typeof AlbumBaseRestrictionsReasonEnum];

/**
 * 
 * @export
 * @interface AlbumObject
 */
export interface AlbumObject {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'album_type': AlbumObjectAlbumTypeEnum;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof AlbumObject
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {AlbumBaseExternalUrls}
     * @memberof AlbumObject
     */
    'external_urls': AlbumBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AlbumObject
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof AlbumObject
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof AlbumObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof AlbumObject
     */
    'release_date_precision': AlbumObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumBaseRestrictions}
     * @memberof AlbumObject
     */
    'restrictions'?: AlbumBaseRestrictions;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof AlbumObject
     */
    'total_tracks': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof AlbumObject
     */
    'type': AlbumObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'uri': string;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof AlbumObject
     */
    'artists'?: Array<SimplifiedArtistObject>;
    /**
     * The copyright statements of the album.
     * @type {Array<CopyrightObject>}
     * @memberof AlbumObject
     */
    'copyrights'?: Array<CopyrightObject>;
    /**
     * 
     * @type {AlbumObjectAllOfExternalIds}
     * @memberof AlbumObject
     */
    'external_ids'?: AlbumObjectAllOfExternalIds;
    /**
     * A list of the genres used to classify the album. (If not yet classified, the array is empty.)
     * @type {Array<string>}
     * @memberof AlbumObject
     */
    'genres'?: Array<string>;
    /**
     * The label for the album.
     * @type {string}
     * @memberof AlbumObject
     */
    'label'?: string;
    /**
     * The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album\'s individual tracks.
     * @type {number}
     * @memberof AlbumObject
     */
    'popularity'?: number;
    /**
     * 
     * @type {AlbumObjectAllOfTracks}
     * @memberof AlbumObject
     */
    'tracks'?: AlbumObjectAllOfTracks;
}

export const AlbumObjectAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type AlbumObjectAlbumTypeEnum = typeof AlbumObjectAlbumTypeEnum[keyof typeof AlbumObjectAlbumTypeEnum];
export const AlbumObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type AlbumObjectReleaseDatePrecisionEnum = typeof AlbumObjectReleaseDatePrecisionEnum[keyof typeof AlbumObjectReleaseDatePrecisionEnum];
export const AlbumObjectTypeEnum = {
    Album: 'album'
} as const;

export type AlbumObjectTypeEnum = typeof AlbumObjectTypeEnum[keyof typeof AlbumObjectTypeEnum];

/**
 * 
 * @export
 * @interface AlbumObjectAllOf
 */
export interface AlbumObjectAllOf {
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof AlbumObjectAllOf
     */
    'artists'?: Array<SimplifiedArtistObject>;
    /**
     * The copyright statements of the album.
     * @type {Array<CopyrightObject>}
     * @memberof AlbumObjectAllOf
     */
    'copyrights'?: Array<CopyrightObject>;
    /**
     * 
     * @type {AlbumObjectAllOfExternalIds}
     * @memberof AlbumObjectAllOf
     */
    'external_ids'?: AlbumObjectAllOfExternalIds;
    /**
     * A list of the genres used to classify the album. (If not yet classified, the array is empty.)
     * @type {Array<string>}
     * @memberof AlbumObjectAllOf
     */
    'genres'?: Array<string>;
    /**
     * The label for the album.
     * @type {string}
     * @memberof AlbumObjectAllOf
     */
    'label'?: string;
    /**
     * The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album\'s individual tracks.
     * @type {number}
     * @memberof AlbumObjectAllOf
     */
    'popularity'?: number;
    /**
     * 
     * @type {AlbumObjectAllOfTracks}
     * @memberof AlbumObjectAllOf
     */
    'tracks'?: AlbumObjectAllOfTracks;
}
/**
 * Known external IDs for the album. 
 * @export
 * @interface AlbumObjectAllOfExternalIds
 */
export interface AlbumObjectAllOfExternalIds {
    /**
     * [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'ean'?: string;
    /**
     * [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'isrc'?: string;
    /**
     * [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'upc'?: string;
}
/**
 * The tracks of the album. 
 * @export
 * @interface AlbumObjectAllOfTracks
 */
export interface AlbumObjectAllOfTracks {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedTrackObject>}
     * @memberof AlbumObjectAllOfTracks
     */
    'items': Array<SimplifiedTrackObject>;
}
/**
 * 
 * @export
 * @interface AlbumRestrictionObject
 */
export interface AlbumRestrictionObject {
    /**
     * The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user\'s subscription type, or when the user\'s account is set to not play explicit content. Additional reasons may be added in the future. 
     * @type {string}
     * @memberof AlbumRestrictionObject
     */
    'reason'?: AlbumRestrictionObjectReasonEnum;
}

export const AlbumRestrictionObjectReasonEnum = {
    Market: 'market',
    Product: 'product',
    Explicit: 'explicit'
} as const;

export type AlbumRestrictionObjectReasonEnum = typeof AlbumRestrictionObjectReasonEnum[keyof typeof AlbumRestrictionObjectReasonEnum];

/**
 * 
 * @export
 * @interface ArtistObject
 */
export interface ArtistObject {
    /**
     * 
     * @type {ArtistObjectExternalUrls}
     * @memberof ArtistObject
     */
    'external_urls'?: ArtistObjectExternalUrls;
    /**
     * 
     * @type {ArtistObjectFollowers}
     * @memberof ArtistObject
     */
    'followers'?: ArtistObjectFollowers;
    /**
     * A list of the genres the artist is associated with. If not yet classified, the array is empty. 
     * @type {Array<string>}
     * @memberof ArtistObject
     */
    'genres'?: Array<string>;
    /**
     * A link to the Web API endpoint providing full details of the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'id'?: string;
    /**
     * Images of the artist in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ArtistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'name'?: string;
    /**
     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist\'s popularity is calculated from the popularity of all the artist\'s tracks. 
     * @type {number}
     * @memberof ArtistObject
     */
    'popularity'?: number;
    /**
     * The object type. 
     * @type {string}
     * @memberof ArtistObject
     */
    'type'?: ArtistObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'uri'?: string;
}

export const ArtistObjectTypeEnum = {
    Artist: 'artist'
} as const;

export type ArtistObjectTypeEnum = typeof ArtistObjectTypeEnum[keyof typeof ArtistObjectTypeEnum];

/**
 * Known external URLs for this artist. 
 * @export
 * @interface ArtistObjectExternalUrls
 */
export interface ArtistObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ArtistObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * Information about the followers of the artist. 
 * @export
 * @interface ArtistObjectFollowers
 */
export interface ArtistObjectFollowers {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof ArtistObjectFollowers
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof ArtistObjectFollowers
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface AudioAnalysisObject
 */
export interface AudioAnalysisObject {
    /**
     * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'bars'?: Array<TimeIntervalObject>;
    /**
     * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'beats'?: Array<TimeIntervalObject>;
    /**
     * 
     * @type {AudioAnalysisObjectMeta}
     * @memberof AudioAnalysisObject
     */
    'meta'?: AudioAnalysisObjectMeta;
    /**
     * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
     * @type {Array<SectionObject>}
     * @memberof AudioAnalysisObject
     */
    'sections'?: Array<SectionObject>;
    /**
     * Each segment contains a roughly conisistent sound throughout its duration.
     * @type {Array<SegmentObject>}
     * @memberof AudioAnalysisObject
     */
    'segments'?: Array<SegmentObject>;
    /**
     * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'tatums'?: Array<TimeIntervalObject>;
    /**
     * 
     * @type {AudioAnalysisObjectTrack}
     * @memberof AudioAnalysisObject
     */
    'track'?: AudioAnalysisObjectTrack;
}
/**
 * 
 * @export
 * @interface AudioAnalysisObjectMeta
 */
export interface AudioAnalysisObjectMeta {
    /**
     * The amount of time taken to analyze this track.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'analysis_time'?: number;
    /**
     * The version of the Analyzer used to analyze this track.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'analyzer_version'?: string;
    /**
     * A detailed status code for this track. If analysis data is missing, this code may explain why.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'detailed_status'?: string;
    /**
     * The method used to read the track\'s audio data.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'input_process'?: string;
    /**
     * The platform used to read the track\'s audio data.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'platform'?: string;
    /**
     * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'status_code'?: number;
    /**
     * The Unix timestamp (in seconds) at which this track was analyzed.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface AudioAnalysisObjectTrack
 */
export interface AudioAnalysisObjectTrack {
    /**
     * The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'analysis_channels'?: number;
    /**
     * The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'analysis_sample_rate'?: number;
    /**
     * A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'code_version'?: number;
    /**
     * An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'codestring'?: string;
    /**
     * Length of the track in seconds.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'duration'?: number;
    /**
     * A version number for the EchoPrint format used in the echoprintstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'echoprint_version'?: number;
    /**
     * An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'echoprintstring'?: string;
    /**
     * The time, in seconds, at which the track\'s fade-in period ends. If the track has no fade-in, this will be 0.0.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'end_of_fade_in'?: number;
    /**
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'key'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `key`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'key_confidence'?: number;
    /**
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'loudness'?: number;
    /**
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'mode'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'mode_confidence'?: number;
    /**
     * The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'num_samples'?: number;
    /**
     * An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'offset_seconds'?: number;
    /**
     * A version number for the Rhythmstring used in the rhythmstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'rhythm_version'?: number;
    /**
     * A Rhythmstring for this track. The format of this string is similar to the Synchstring.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'rhythmstring'?: string;
    /**
     * This field will always contain the empty string.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'sample_md5'?: string;
    /**
     * The time, in seconds, at which the track\'s fade-out period starts. If the track has no fade-out, this should match the track\'s length.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'start_of_fade_out'?: number;
    /**
     * A version number for the Synchstring used in the synchstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'synch_version'?: number;
    /**
     * A [Synchstring](https://github.com/echonest/synchdata) for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'synchstring'?: string;
    /**
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'tempo'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'tempo_confidence'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'time_signature'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'time_signature_confidence'?: number;
    /**
     * The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'window_seconds'?: number;
}
/**
 * 
 * @export
 * @interface AudioFeaturesObject
 */
export interface AudioFeaturesObject {
    /**
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'acousticness'?: number;
    /**
     * A URL to access the full audio analysis of this track. An access token is required to access this data. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'analysis_url'?: string;
    /**
     * Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'danceability'?: number;
    /**
     * The duration of the track in milliseconds. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'duration_ms'?: number;
    /**
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'energy'?: number;
    /**
     * The Spotify ID for the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'id'?: string;
    /**
     * Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'instrumentalness'?: number;
    /**
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'key'?: number;
    /**
     * Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'liveness'?: number;
    /**
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'loudness'?: number;
    /**
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'mode'?: number;
    /**
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'speechiness'?: number;
    /**
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'tempo'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'time_signature'?: number;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'track_href'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'type'?: AudioFeaturesObjectTypeEnum;
    /**
     * The Spotify URI for the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'uri'?: string;
    /**
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'valence'?: number;
}

export const AudioFeaturesObjectTypeEnum = {
    AudioFeatures: 'audio_features'
} as const;

export type AudioFeaturesObjectTypeEnum = typeof AudioFeaturesObjectTypeEnum[keyof typeof AudioFeaturesObjectTypeEnum];

/**
 * 
 * @export
 * @interface AudiobookBase
 */
export interface AudiobookBase {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof AudiobookBase
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof AudiobookBase
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof AudiobookBase
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof AudiobookBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {AudiobookBaseExternalUrls}
     * @memberof AudiobookBase
     */
    'external_urls': AudiobookBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'href': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AudiobookBase
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof AudiobookBase
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof AudiobookBase
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'publisher': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof AudiobookBase
     */
    'total_chapters': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'type': AudiobookBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'uri': string;
}

export const AudiobookBaseTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type AudiobookBaseTypeEnum = typeof AudiobookBaseTypeEnum[keyof typeof AudiobookBaseTypeEnum];

/**
 * External URLs for this audiobook. 
 * @export
 * @interface AudiobookBaseExternalUrls
 */
export interface AudiobookBaseExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof AudiobookBaseExternalUrls
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface AudiobookObject
 */
export interface AudiobookObject {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof AudiobookObject
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof AudiobookObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof AudiobookObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof AudiobookObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {AudiobookBaseExternalUrls}
     * @memberof AudiobookObject
     */
    'external_urls': AudiobookBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'href': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AudiobookObject
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof AudiobookObject
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof AudiobookObject
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'publisher': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof AudiobookObject
     */
    'total_chapters': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'type': AudiobookObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'uri': string;
    /**
     * 
     * @type {AudiobookObjectAllOfChapters}
     * @memberof AudiobookObject
     */
    'chapters': AudiobookObjectAllOfChapters;
}

export const AudiobookObjectTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type AudiobookObjectTypeEnum = typeof AudiobookObjectTypeEnum[keyof typeof AudiobookObjectTypeEnum];

/**
 * 
 * @export
 * @interface AudiobookObjectAllOf
 */
export interface AudiobookObjectAllOf {
    /**
     * 
     * @type {AudiobookObjectAllOfChapters}
     * @memberof AudiobookObjectAllOf
     */
    'chapters': AudiobookObjectAllOfChapters;
}
/**
 * The chapters of the audiobook. 
 * @export
 * @interface AudiobookObjectAllOfChapters
 */
export interface AudiobookObjectAllOfChapters {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedChapterObject>}
     * @memberof AudiobookObjectAllOfChapters
     */
    'items': Array<SimplifiedChapterObject>;
}
/**
 * 
 * @export
 * @interface AuthorObject
 */
export interface AuthorObject {
    /**
     * The name of the author. 
     * @type {string}
     * @memberof AuthorObject
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CategoryObject
 */
export interface CategoryObject {
    /**
     * A link to the Web API endpoint returning full details of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'href': string;
    /**
     * The category icon, in various sizes. 
     * @type {Array<ImageObject>}
     * @memberof CategoryObject
     */
    'icons': Array<ImageObject>;
    /**
     * The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'id': string;
    /**
     * The name of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ChangePlaylistDetailsRequest
 */
export interface ChangePlaylistDetailsRequest {
    [key: string]: any;

    /**
     * If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/> _**Note**: You can only set `collaborative` to `true` on non-public playlists._ 
     * @type {boolean}
     * @memberof ChangePlaylistDetailsRequest
     */
    'collaborative'?: boolean;
    /**
     * Value for playlist description as displayed in Spotify Clients and in the Web API. 
     * @type {string}
     * @memberof ChangePlaylistDetailsRequest
     */
    'description'?: string;
    /**
     * The new name for the playlist, for example `\"My New Playlist Title\"` 
     * @type {string}
     * @memberof ChangePlaylistDetailsRequest
     */
    'name'?: string;
    /**
     * If `true` the playlist will be public, if `false` it will be private. 
     * @type {boolean}
     * @memberof ChangePlaylistDetailsRequest
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface ChapterBase
 */
export interface ChapterBase {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof ChapterBase
     */
    'audio_preview_url': string;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterBase
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof ChapterBase
     */
    'chapter_number': number;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterBase
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof ChapterBase
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof ChapterBase
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof ChapterBase
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterBase
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof ChapterBase
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterBase
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof ChapterBase
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterBase
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ChapterBase
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof ChapterBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof ChapterBase
     */
    'release_date_precision': ChapterBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ChapterBaseRestrictions}
     * @memberof ChapterBase
     */
    'restrictions'?: ChapterBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof ChapterBase
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterBase
     */
    'type': ChapterBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof ChapterBase
     */
    'uri': string;
}

export const ChapterBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type ChapterBaseReleaseDatePrecisionEnum = typeof ChapterBaseReleaseDatePrecisionEnum[keyof typeof ChapterBaseReleaseDatePrecisionEnum];
export const ChapterBaseTypeEnum = {
    Episode: 'episode'
} as const;

export type ChapterBaseTypeEnum = typeof ChapterBaseTypeEnum[keyof typeof ChapterBaseTypeEnum];

/**
 * External URLs for this episode. 
 * @export
 * @interface ChapterBaseExternalUrls
 */
export interface ChapterBaseExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ChapterBaseExternalUrls
     */
    'spotify'?: string;
}
/**
 * Included in the response when a content restriction is applied. 
 * @export
 * @interface ChapterBaseRestrictions
 */
export interface ChapterBaseRestrictions {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content. - `payment_required` - Payment is required to play the content item.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof ChapterBaseRestrictions
     */
    'reason'?: string;
}
/**
 * The user\'s most recent position in the episode. Set if the supplied access token is a user token and has the scope \'user-read-playback-position\'. 
 * @export
 * @interface ChapterBaseResumePoint
 */
export interface ChapterBaseResumePoint {
    /**
     * Whether or not the episode has been fully played by the user. 
     * @type {boolean}
     * @memberof ChapterBaseResumePoint
     */
    'fully_played'?: boolean;
    /**
     * The user\'s most recent position in the episode in milliseconds. 
     * @type {number}
     * @memberof ChapterBaseResumePoint
     */
    'resume_position_ms'?: number;
}
/**
 * 
 * @export
 * @interface ChapterObject
 */
export interface ChapterObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof ChapterObject
     */
    'audio_preview_url': string;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterObject
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof ChapterObject
     */
    'chapter_number': number;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterObject
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof ChapterObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof ChapterObject
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof ChapterObject
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof ChapterObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof ChapterObject
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ChapterObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof ChapterObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof ChapterObject
     */
    'release_date_precision': ChapterObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ChapterBaseRestrictions}
     * @memberof ChapterObject
     */
    'restrictions'?: ChapterBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof ChapterObject
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterObject
     */
    'type': ChapterObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof ChapterObject
     */
    'uri': string;
    /**
     * 
     * @type {ChapterObjectAllOfAudiobook}
     * @memberof ChapterObject
     */
    'audiobook': ChapterObjectAllOfAudiobook;
}

export const ChapterObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type ChapterObjectReleaseDatePrecisionEnum = typeof ChapterObjectReleaseDatePrecisionEnum[keyof typeof ChapterObjectReleaseDatePrecisionEnum];
export const ChapterObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type ChapterObjectTypeEnum = typeof ChapterObjectTypeEnum[keyof typeof ChapterObjectTypeEnum];

/**
 * 
 * @export
 * @interface ChapterObjectAllOf
 */
export interface ChapterObjectAllOf {
    /**
     * 
     * @type {ChapterObjectAllOfAudiobook}
     * @memberof ChapterObjectAllOf
     */
    'audiobook': ChapterObjectAllOfAudiobook;
}
/**
 * The audiobook for which the chapter belongs. 
 * @export
 * @interface ChapterObjectAllOfAudiobook
 */
export interface ChapterObjectAllOfAudiobook {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'explicit': boolean;
    /**
     * 
     * @type {AudiobookBaseExternalUrls}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'external_urls': AudiobookBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'href': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'publisher': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'total_chapters': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'type': ChapterObjectAllOfAudiobookTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'uri': string;
}

export const ChapterObjectAllOfAudiobookTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type ChapterObjectAllOfAudiobookTypeEnum = typeof ChapterObjectAllOfAudiobookTypeEnum[keyof typeof ChapterObjectAllOfAudiobookTypeEnum];

/**
 * 
 * @export
 * @interface ChapterRestrictionObject
 */
export interface ChapterRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content. - `payment_required` - Payment is required to play the content item.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof ChapterRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ContextObject
 */
export interface ContextObject {
    /**
     * 
     * @type {ContextObjectExternalUrls}
     * @memberof ContextObject
     */
    'external_urls'?: ContextObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof ContextObject
     */
    'href'?: string;
    /**
     * The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\". 
     * @type {string}
     * @memberof ContextObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context. 
     * @type {string}
     * @memberof ContextObject
     */
    'uri'?: string;
}
/**
 * External URLs for this context.
 * @export
 * @interface ContextObjectExternalUrls
 */
export interface ContextObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ContextObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface CopyrightObject
 */
export interface CopyrightObject {
    /**
     * The copyright text for this content. 
     * @type {string}
     * @memberof CopyrightObject
     */
    'text'?: string;
    /**
     * The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright. 
     * @type {string}
     * @memberof CopyrightObject
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CreatePlaylistRequest
 */
export interface CreatePlaylistRequest {
    [key: string]: any;

    /**
     * Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._ 
     * @type {boolean}
     * @memberof CreatePlaylistRequest
     */
    'collaborative'?: boolean;
    /**
     * value for playlist description as displayed in Spotify Clients and in the Web API. 
     * @type {string}
     * @memberof CreatePlaylistRequest
     */
    'description'?: string;
    /**
     * The name for the new playlist, for example `\"Your Coolest Playlist\"`. This name does not need to be unique; a user may have several playlists with the same name. 
     * @type {string}
     * @memberof CreatePlaylistRequest
     */
    'name': string;
    /**
     * Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes) 
     * @type {boolean}
     * @memberof CreatePlaylistRequest
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface CurrentlyPlayingContextObject
 */
export interface CurrentlyPlayingContextObject {
    /**
     * 
     * @type {CurrentlyPlayingContextObjectActions}
     * @memberof CurrentlyPlayingContextObject
     */
    'actions'?: CurrentlyPlayingContextObjectActions;
    /**
     * 
     * @type {CurrentlyPlayingContextObjectContext}
     * @memberof CurrentlyPlayingContextObject
     */
    'context'?: CurrentlyPlayingContextObjectContext;
    /**
     * The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 
     * @type {string}
     * @memberof CurrentlyPlayingContextObject
     */
    'currently_playing_type'?: string;
    /**
     * 
     * @type {CurrentlyPlayingContextObjectDevice}
     * @memberof CurrentlyPlayingContextObject
     */
    'device'?: CurrentlyPlayingContextObjectDevice;
    /**
     * If something is currently playing, return `true`.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObject
     */
    'is_playing'?: boolean;
    /**
     * 
     * @type {CurrentlyPlayingContextObjectItem}
     * @memberof CurrentlyPlayingContextObject
     */
    'item'?: CurrentlyPlayingContextObjectItem;
    /**
     * Progress into the currently playing track or episode. Can be `null`.
     * @type {number}
     * @memberof CurrentlyPlayingContextObject
     */
    'progress_ms'?: number;
    /**
     * off, track, context
     * @type {string}
     * @memberof CurrentlyPlayingContextObject
     */
    'repeat_state'?: string;
    /**
     * If shuffle is on or off.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObject
     */
    'shuffle_state'?: boolean;
    /**
     * Unix Millisecond Timestamp when data was fetched.
     * @type {number}
     * @memberof CurrentlyPlayingContextObject
     */
    'timestamp'?: number;
}
/**
 * Allows to update the user interface based on which playback actions are available within the current context. 
 * @export
 * @interface CurrentlyPlayingContextObjectActions
 */
export interface CurrentlyPlayingContextObjectActions {
    /**
     * Interrupting playback. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'interrupting_playback'?: boolean;
    /**
     * Pausing. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'pausing'?: boolean;
    /**
     * Resuming. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'resuming'?: boolean;
    /**
     * Seeking playback location. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'seeking'?: boolean;
    /**
     * Skipping to the next context. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'skipping_next'?: boolean;
    /**
     * Skipping to the previous context. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'skipping_prev'?: boolean;
    /**
     * Toggling repeat context flag. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'toggling_repeat_context'?: boolean;
    /**
     * Toggling repeat track flag. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'toggling_repeat_track'?: boolean;
    /**
     * Toggling shuffle flag. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'toggling_shuffle'?: boolean;
    /**
     * Transfering playback between devices. Optional field.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectActions
     */
    'transferring_playback'?: boolean;
}
/**
 * A Context Object. Can be `null`.
 * @export
 * @interface CurrentlyPlayingContextObjectContext
 */
export interface CurrentlyPlayingContextObjectContext {
    /**
     * 
     * @type {ContextObjectExternalUrls}
     * @memberof CurrentlyPlayingContextObjectContext
     */
    'external_urls'?: ContextObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectContext
     */
    'href'?: string;
    /**
     * The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\". 
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectContext
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context. 
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectContext
     */
    'uri'?: string;
}
/**
 * The device that is currently active. 
 * @export
 * @interface CurrentlyPlayingContextObjectDevice
 */
export interface CurrentlyPlayingContextObjectDevice {
    /**
     * The device ID.
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'id'?: string | null;
    /**
     * If this device is the currently active device.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'is_active'?: boolean;
    /**
     * If this device is currently in a private session.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'is_private_session'?: boolean;
    /**
     * Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'is_restricted'?: boolean;
    /**
     * A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'name'?: string;
    /**
     * Device type, such as \"computer\", \"smartphone\" or \"speaker\".
     * @type {string}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'type'?: string;
    /**
     * The current volume in percent.
     * @type {number}
     * @memberof CurrentlyPlayingContextObjectDevice
     */
    'volume_percent'?: number | null;
}
/**
 * @type CurrentlyPlayingContextObjectItem
 * The currently playing track or episode. Can be `null`.
 * @export
 */
export type CurrentlyPlayingContextObjectItem = EpisodeObject | TrackObject;

/**
 * 
 * @export
 * @interface CurrentlyPlayingObject
 */
export interface CurrentlyPlayingObject {
    /**
     * 
     * @type {CurrentlyPlayingContextObjectContext}
     * @memberof CurrentlyPlayingObject
     */
    'context'?: CurrentlyPlayingContextObjectContext;
    /**
     * The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 
     * @type {string}
     * @memberof CurrentlyPlayingObject
     */
    'currently_playing_type'?: string;
    /**
     * If something is currently playing, return `true`.
     * @type {boolean}
     * @memberof CurrentlyPlayingObject
     */
    'is_playing'?: boolean;
    /**
     * 
     * @type {CurrentlyPlayingContextObjectItem}
     * @memberof CurrentlyPlayingObject
     */
    'item'?: CurrentlyPlayingContextObjectItem;
    /**
     * Progress into the currently playing track or episode. Can be `null`.
     * @type {number}
     * @memberof CurrentlyPlayingObject
     */
    'progress_ms'?: number;
    /**
     * Unix Millisecond Timestamp when data was fetched
     * @type {number}
     * @memberof CurrentlyPlayingObject
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface CursorObject
 */
export interface CursorObject {
    /**
     * The cursor to use as key to find the next page of items.
     * @type {string}
     * @memberof CursorObject
     */
    'after'?: string;
    /**
     * The cursor to use as key to find the previous page of items.
     * @type {string}
     * @memberof CursorObject
     */
    'before'?: string;
}
/**
 * 
 * @export
 * @interface CursorPagingObject
 */
export interface CursorPagingObject {
    /**
     * 
     * @type {CursorPagingObjectCursors}
     * @memberof CursorPagingObject
     */
    'cursors'?: CursorPagingObjectCursors;
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingObject
     */
    'next'?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingObject
     */
    'total'?: number;
}
/**
 * The cursors used to find the next set of items.
 * @export
 * @interface CursorPagingObjectCursors
 */
export interface CursorPagingObjectCursors {
    /**
     * The cursor to use as key to find the next page of items.
     * @type {string}
     * @memberof CursorPagingObjectCursors
     */
    'after'?: string;
    /**
     * The cursor to use as key to find the previous page of items.
     * @type {string}
     * @memberof CursorPagingObjectCursors
     */
    'before'?: string;
}
/**
 * 
 * @export
 * @interface CursorPagingPlayHistoryObject
 */
export interface CursorPagingPlayHistoryObject {
    /**
     * 
     * @type {CursorPagingObjectCursors}
     * @memberof CursorPagingPlayHistoryObject
     */
    'cursors'?: CursorPagingObjectCursors;
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingPlayHistoryObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingPlayHistoryObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingPlayHistoryObject
     */
    'next'?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingPlayHistoryObject
     */
    'total'?: number;
    /**
     * 
     * @type {Array<PlayHistoryObject>}
     * @memberof CursorPagingPlayHistoryObject
     */
    'items'?: Array<PlayHistoryObject>;
}
/**
 * 
 * @export
 * @interface CursorPagingPlayHistoryObjectAllOf
 */
export interface CursorPagingPlayHistoryObjectAllOf {
    /**
     * 
     * @type {Array<PlayHistoryObject>}
     * @memberof CursorPagingPlayHistoryObjectAllOf
     */
    'items'?: Array<PlayHistoryObject>;
}
/**
 * 
 * @export
 * @interface CursorPagingSimplifiedArtistObject
 */
export interface CursorPagingSimplifiedArtistObject {
    /**
     * 
     * @type {CursorPagingObjectCursors}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'cursors'?: CursorPagingObjectCursors;
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'next'?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'items'?: Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface CursorPagingSimplifiedArtistObjectAllOf
 */
export interface CursorPagingSimplifiedArtistObjectAllOf {
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof CursorPagingSimplifiedArtistObjectAllOf
     */
    'items'?: Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface DeviceObject
 */
export interface DeviceObject {
    /**
     * The device ID.
     * @type {string}
     * @memberof DeviceObject
     */
    'id'?: string | null;
    /**
     * If this device is the currently active device.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_active'?: boolean;
    /**
     * If this device is currently in a private session.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_private_session'?: boolean;
    /**
     * Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_restricted'?: boolean;
    /**
     * A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.
     * @type {string}
     * @memberof DeviceObject
     */
    'name'?: string;
    /**
     * Device type, such as \"computer\", \"smartphone\" or \"speaker\".
     * @type {string}
     * @memberof DeviceObject
     */
    'type'?: string;
    /**
     * The current volume in percent.
     * @type {number}
     * @memberof DeviceObject
     */
    'volume_percent'?: number | null;
}
/**
 * 
 * @export
 * @interface DevicesObject
 */
export interface DevicesObject {
    /**
     * A list of 0..n Device objects
     * @type {Array<DeviceObject>}
     * @memberof DevicesObject
     */
    'devices'?: Array<DeviceObject>;
}
/**
 * 
 * @export
 * @interface DisallowsObject
 */
export interface DisallowsObject {
    /**
     * Interrupting playback. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'interrupting_playback'?: boolean;
    /**
     * Pausing. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'pausing'?: boolean;
    /**
     * Resuming. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'resuming'?: boolean;
    /**
     * Seeking playback location. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'seeking'?: boolean;
    /**
     * Skipping to the next context. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'skipping_next'?: boolean;
    /**
     * Skipping to the previous context. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'skipping_prev'?: boolean;
    /**
     * Toggling repeat context flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_repeat_context'?: boolean;
    /**
     * Toggling repeat track flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_repeat_track'?: boolean;
    /**
     * Toggling shuffle flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_shuffle'?: boolean;
    /**
     * Transfering playback between devices. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'transferring_playback'?: boolean;
}
/**
 * 
 * @export
 * @interface EpisodeBase
 */
export interface EpisodeBase {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'audio_preview_url': string;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof EpisodeBase
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof EpisodeBase
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeBase
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof EpisodeBase
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeBase
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'release_date_precision': EpisodeBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {EpisodeBaseRestrictions}
     * @memberof EpisodeBase
     */
    'restrictions'?: EpisodeBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof EpisodeBase
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'type': EpisodeBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'uri': string;
}

export const EpisodeBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type EpisodeBaseReleaseDatePrecisionEnum = typeof EpisodeBaseReleaseDatePrecisionEnum[keyof typeof EpisodeBaseReleaseDatePrecisionEnum];
export const EpisodeBaseTypeEnum = {
    Episode: 'episode'
} as const;

export type EpisodeBaseTypeEnum = typeof EpisodeBaseTypeEnum[keyof typeof EpisodeBaseTypeEnum];

/**
 * Included in the response when a content restriction is applied. 
 * @export
 * @interface EpisodeBaseRestrictions
 */
export interface EpisodeBaseRestrictions {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof EpisodeBaseRestrictions
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface EpisodeObject
 */
export interface EpisodeObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'audio_preview_url': string;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof EpisodeObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof EpisodeObject
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof EpisodeObject
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'release_date_precision': EpisodeObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {EpisodeBaseRestrictions}
     * @memberof EpisodeObject
     */
    'restrictions'?: EpisodeBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof EpisodeObject
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'type': EpisodeObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'uri': string;
    /**
     * 
     * @type {EpisodeObjectAllOfShow}
     * @memberof EpisodeObject
     */
    'show': EpisodeObjectAllOfShow;
}

export const EpisodeObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type EpisodeObjectReleaseDatePrecisionEnum = typeof EpisodeObjectReleaseDatePrecisionEnum[keyof typeof EpisodeObjectReleaseDatePrecisionEnum];
export const EpisodeObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type EpisodeObjectTypeEnum = typeof EpisodeObjectTypeEnum[keyof typeof EpisodeObjectTypeEnum];

/**
 * 
 * @export
 * @interface EpisodeObjectAllOf
 */
export interface EpisodeObjectAllOf {
    /**
     * 
     * @type {EpisodeObjectAllOfShow}
     * @memberof EpisodeObjectAllOf
     */
    'show': EpisodeObjectAllOfShow;
}
/**
 * The show on which the episode belongs. 
 * @export
 * @interface EpisodeObjectAllOfShow
 */
export interface EpisodeObjectAllOfShow {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof EpisodeObjectAllOfShow
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof EpisodeObjectAllOfShow
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeObjectAllOfShow
     */
    'explicit': boolean;
    /**
     * 
     * @type {ShowBaseExternalUrls}
     * @memberof EpisodeObjectAllOfShow
     */
    'external_urls': ShowBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'href': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeObjectAllOfShow
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof EpisodeObjectAllOfShow
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeObjectAllOfShow
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'publisher': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof EpisodeObjectAllOfShow
     */
    'total_episodes': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'type': EpisodeObjectAllOfShowTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'uri': string;
}

export const EpisodeObjectAllOfShowTypeEnum = {
    Show: 'show'
} as const;

export type EpisodeObjectAllOfShowTypeEnum = typeof EpisodeObjectAllOfShowTypeEnum[keyof typeof EpisodeObjectAllOfShowTypeEnum];

/**
 * 
 * @export
 * @interface EpisodeRestrictionObject
 */
export interface EpisodeRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof EpisodeRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ErrorObject
 */
export interface ErrorObject {
    /**
     * A short description of the cause of the error. 
     * @type {string}
     * @memberof ErrorObject
     */
    'message': string;
    /**
     * The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information). 
     * @type {number}
     * @memberof ErrorObject
     */
    'status': number;
}
/**
 * 
 * @export
 * @interface ExplicitContentSettingsObject
 */
export interface ExplicitContentSettingsObject {
    /**
     * When `true`, indicates that explicit content should not be played. 
     * @type {boolean}
     * @memberof ExplicitContentSettingsObject
     */
    'filter_enabled'?: boolean;
    /**
     * When `true`, indicates that the explicit content setting is locked and can\'t be changed by the user. 
     * @type {boolean}
     * @memberof ExplicitContentSettingsObject
     */
    'filter_locked'?: boolean;
}
/**
 * 
 * @export
 * @interface ExternalIdObject
 */
export interface ExternalIdObject {
    /**
     * [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'ean'?: string;
    /**
     * [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'isrc'?: string;
    /**
     * [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'upc'?: string;
}
/**
 * 
 * @export
 * @interface ExternalUrlObject
 */
export interface ExternalUrlObject {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ExternalUrlObject
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface FollowArtistsUsersRequest
 */
export interface FollowArtistsUsersRequest {
    [key: string]: any;

    /**
     * A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof FollowArtistsUsersRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface FollowPlaylistRequest
 */
export interface FollowPlaylistRequest {
    [key: string]: any;

    /**
     * Defaults to `true`. If `true` the playlist will be included in user\'s public playlists, if `false` it will remain private. 
     * @type {boolean}
     * @memberof FollowPlaylistRequest
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface FollowersObject
 */
export interface FollowersObject {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof FollowersObject
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof FollowersObject
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface GetAnArtistsTopTracks200Response
 */
export interface GetAnArtistsTopTracks200Response {
    /**
     * 
     * @type {Array<TrackObject>}
     * @memberof GetAnArtistsTopTracks200Response
     */
    'tracks': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface GetAvailableMarkets200Response
 */
export interface GetAvailableMarkets200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAvailableMarkets200Response
     */
    'markets'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetCategories200Response
 */
export interface GetCategories200Response {
    /**
     * 
     * @type {GetCategories200ResponseCategories}
     * @memberof GetCategories200Response
     */
    'categories': GetCategories200ResponseCategories;
}
/**
 * 
 * @export
 * @interface GetCategories200ResponseCategories
 */
export interface GetCategories200ResponseCategories {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'total': number;
    /**
     * 
     * @type {Array<CategoryObject>}
     * @memberof GetCategories200ResponseCategories
     */
    'items': Array<CategoryObject>;
}
/**
 * 
 * @export
 * @interface GetCategories200ResponseCategoriesAllOf
 */
export interface GetCategories200ResponseCategoriesAllOf {
    /**
     * 
     * @type {Array<CategoryObject>}
     * @memberof GetCategories200ResponseCategoriesAllOf
     */
    'items'?: Array<CategoryObject>;
}
/**
 * 
 * @export
 * @interface GetFollowed200Response
 */
export interface GetFollowed200Response {
    /**
     * 
     * @type {CursorPagingSimplifiedArtistObject}
     * @memberof GetFollowed200Response
     */
    'artists': CursorPagingSimplifiedArtistObject;
}
/**
 * 
 * @export
 * @interface GetMultipleAlbums200Response
 */
export interface GetMultipleAlbums200Response {
    /**
     * 
     * @type {Array<AlbumObject>}
     * @memberof GetMultipleAlbums200Response
     */
    'albums': Array<AlbumObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleAlbums401Response
 */
export interface GetMultipleAlbums401Response {
    /**
     * 
     * @type {ErrorObject}
     * @memberof GetMultipleAlbums401Response
     */
    'error': ErrorObject;
}
/**
 * 
 * @export
 * @interface GetMultipleArtists200Response
 */
export interface GetMultipleArtists200Response {
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof GetMultipleArtists200Response
     */
    'artists': Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleAudiobooks200Response
 */
export interface GetMultipleAudiobooks200Response {
    /**
     * 
     * @type {Array<AudiobookObject>}
     * @memberof GetMultipleAudiobooks200Response
     */
    'audiobooks': Array<AudiobookObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleEpisodes200Response
 */
export interface GetMultipleEpisodes200Response {
    /**
     * 
     * @type {Array<EpisodeObject>}
     * @memberof GetMultipleEpisodes200Response
     */
    'episodes': Array<EpisodeObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleShows200Response
 */
export interface GetMultipleShows200Response {
    /**
     * 
     * @type {Array<SimplifiedShowObject>}
     * @memberof GetMultipleShows200Response
     */
    'shows': Array<SimplifiedShowObject>;
}
/**
 * 
 * @export
 * @interface GetNewReleases200Response
 */
export interface GetNewReleases200Response {
    /**
     * 
     * @type {PagingSimplifiedAlbumObject}
     * @memberof GetNewReleases200Response
     */
    'albums': PagingSimplifiedAlbumObject;
}
/**
 * 
 * @export
 * @interface GetRecommendationGenres200Response
 */
export interface GetRecommendationGenres200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRecommendationGenres200Response
     */
    'genres': Array<string>;
}
/**
 * 
 * @export
 * @interface GetSeveralAudioFeatures200Response
 */
export interface GetSeveralAudioFeatures200Response {
    /**
     * 
     * @type {Array<AudioFeaturesObject>}
     * @memberof GetSeveralAudioFeatures200Response
     */
    'audio_features': Array<AudioFeaturesObject>;
}
/**
 * 
 * @export
 * @interface GetSeveralChapters200Response
 */
export interface GetSeveralChapters200Response {
    /**
     * 
     * @type {Array<ChapterObject>}
     * @memberof GetSeveralChapters200Response
     */
    'chapters': Array<ChapterObject>;
}
/**
 * 
 * @export
 * @interface ImageObject
 */
export interface ImageObject {
    /**
     * The image height in pixels. 
     * @type {number}
     * @memberof ImageObject
     */
    'height': number | null;
    /**
     * The source URL of the image. 
     * @type {string}
     * @memberof ImageObject
     */
    'url': string;
    /**
     * The image width in pixels. 
     * @type {number}
     * @memberof ImageObject
     */
    'width': number | null;
}
/**
 * 
 * @export
 * @interface LinkedTrackObject
 */
export interface LinkedTrackObject {
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof LinkedTrackObject
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'id'?: string;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'uri'?: string;
}
/**
 * Known external URLs for this track. 
 * @export
 * @interface LinkedTrackObjectExternalUrls
 */
export interface LinkedTrackObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof LinkedTrackObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface NarratorObject
 */
export interface NarratorObject {
    /**
     * The name of the Narrator. 
     * @type {string}
     * @memberof NarratorObject
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PagingArtistObject
 */
export interface PagingArtistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'total': number;
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof PagingArtistObject
     */
    'items': Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface PagingFeaturedPlaylistObject
 */
export interface PagingFeaturedPlaylistObject {
    /**
     * 
     * @type {string}
     * @memberof PagingFeaturedPlaylistObject
     */
    'message'?: string;
    /**
     * 
     * @type {PagingPlaylistObject}
     * @memberof PagingFeaturedPlaylistObject
     */
    'playlists'?: PagingPlaylistObject;
}
/**
 * 
 * @export
 * @interface PagingObject
 */
export interface PagingObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingObject
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface PagingPlaylistObject
 */
export interface PagingPlaylistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedPlaylistObject>}
     * @memberof PagingPlaylistObject
     */
    'items': Array<SimplifiedPlaylistObject>;
}
/**
 * 
 * @export
 * @interface PagingPlaylistObjectAllOf
 */
export interface PagingPlaylistObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedPlaylistObject>}
     * @memberof PagingPlaylistObjectAllOf
     */
    'items'?: Array<SimplifiedPlaylistObject>;
}
/**
 * 
 * @export
 * @interface PagingPlaylistTrackObject
 */
export interface PagingPlaylistTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<PlaylistTrackObject>}
     * @memberof PagingPlaylistTrackObject
     */
    'items': Array<PlaylistTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingPlaylistTrackObjectAllOf
 */
export interface PagingPlaylistTrackObjectAllOf {
    /**
     * 
     * @type {Array<PlaylistTrackObject>}
     * @memberof PagingPlaylistTrackObjectAllOf
     */
    'items'?: Array<PlaylistTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedAlbumObject
 */
export interface PagingSavedAlbumObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedAlbumObject>}
     * @memberof PagingSavedAlbumObject
     */
    'items': Array<SavedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedAlbumObjectAllOf
 */
export interface PagingSavedAlbumObjectAllOf {
    /**
     * 
     * @type {Array<SavedAlbumObject>}
     * @memberof PagingSavedAlbumObjectAllOf
     */
    'items'?: Array<SavedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedAudiobookObject
 */
export interface PagingSavedAudiobookObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedAudiobookObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedAudiobookObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAudiobookObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedAudiobookObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAudiobookObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedAudiobookObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedAudiobookObject>}
     * @memberof PagingSavedAudiobookObject
     */
    'items': Array<SavedAudiobookObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedAudiobookObjectAllOf
 */
export interface PagingSavedAudiobookObjectAllOf {
    /**
     * 
     * @type {Array<SavedAudiobookObject>}
     * @memberof PagingSavedAudiobookObjectAllOf
     */
    'items'?: Array<SavedAudiobookObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedEpisodeObject
 */
export interface PagingSavedEpisodeObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedEpisodeObject>}
     * @memberof PagingSavedEpisodeObject
     */
    'items': Array<SavedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedEpisodeObjectAllOf
 */
export interface PagingSavedEpisodeObjectAllOf {
    /**
     * 
     * @type {Array<SavedEpisodeObject>}
     * @memberof PagingSavedEpisodeObjectAllOf
     */
    'items'?: Array<SavedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedShowObject
 */
export interface PagingSavedShowObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedShowObject>}
     * @memberof PagingSavedShowObject
     */
    'items': Array<SavedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedShowObjectAllOf
 */
export interface PagingSavedShowObjectAllOf {
    /**
     * 
     * @type {Array<SavedShowObject>}
     * @memberof PagingSavedShowObjectAllOf
     */
    'items'?: Array<SavedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedTrackObject
 */
export interface PagingSavedTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedTrackObject>}
     * @memberof PagingSavedTrackObject
     */
    'items': Array<SavedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedTrackObjectAllOf
 */
export interface PagingSavedTrackObjectAllOf {
    /**
     * 
     * @type {Array<SavedTrackObject>}
     * @memberof PagingSavedTrackObjectAllOf
     */
    'items'?: Array<SavedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAlbumObject
 */
export interface PagingSimplifiedAlbumObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedAlbumObject>}
     * @memberof PagingSimplifiedAlbumObject
     */
    'items': Array<SimplifiedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAlbumObjectAllOf
 */
export interface PagingSimplifiedAlbumObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedAlbumObject>}
     * @memberof PagingSimplifiedAlbumObjectAllOf
     */
    'items'?: Array<SimplifiedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedArtistObject
 */
export interface PagingSimplifiedArtistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedArtistObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedArtistObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedArtistObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedArtistObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedArtistObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedArtistObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof PagingSimplifiedArtistObject
     */
    'items': Array<SimplifiedArtistObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedArtistObjectAllOf
 */
export interface PagingSimplifiedArtistObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof PagingSimplifiedArtistObjectAllOf
     */
    'items'?: Array<SimplifiedArtistObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAudiobookObject
 */
export interface PagingSimplifiedAudiobookObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedAudiobookObject>}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'items': Array<SimplifiedAudiobookObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAudiobookObjectAllOf
 */
export interface PagingSimplifiedAudiobookObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedAudiobookObject>}
     * @memberof PagingSimplifiedAudiobookObjectAllOf
     */
    'items'?: Array<SimplifiedAudiobookObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedChapterObject
 */
export interface PagingSimplifiedChapterObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedChapterObject>}
     * @memberof PagingSimplifiedChapterObject
     */
    'items': Array<SimplifiedChapterObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedChapterObjectAllOf
 */
export interface PagingSimplifiedChapterObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedChapterObject>}
     * @memberof PagingSimplifiedChapterObjectAllOf
     */
    'items'?: Array<SimplifiedChapterObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedEpisodeObject
 */
export interface PagingSimplifiedEpisodeObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedEpisodeObject>}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'items': Array<SimplifiedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedEpisodeObjectAllOf
 */
export interface PagingSimplifiedEpisodeObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedEpisodeObject>}
     * @memberof PagingSimplifiedEpisodeObjectAllOf
     */
    'items'?: Array<SimplifiedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedShowObject
 */
export interface PagingSimplifiedShowObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedShowObject>}
     * @memberof PagingSimplifiedShowObject
     */
    'items': Array<SimplifiedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedShowObjectAllOf
 */
export interface PagingSimplifiedShowObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedShowObject>}
     * @memberof PagingSimplifiedShowObjectAllOf
     */
    'items'?: Array<SimplifiedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedTrackObject
 */
export interface PagingSimplifiedTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedTrackObject>}
     * @memberof PagingSimplifiedTrackObject
     */
    'items': Array<SimplifiedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedTrackObjectAllOf
 */
export interface PagingSimplifiedTrackObjectAllOf {
    /**
     * 
     * @type {Array<SimplifiedTrackObject>}
     * @memberof PagingSimplifiedTrackObjectAllOf
     */
    'items'?: Array<SimplifiedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingTrackObject
 */
export interface PagingTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<TrackObject>}
     * @memberof PagingTrackObject
     */
    'items': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface PagingTrackObjectAllOf
 */
export interface PagingTrackObjectAllOf {
    /**
     * 
     * @type {Array<TrackObject>}
     * @memberof PagingTrackObjectAllOf
     */
    'items'?: Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface PlayHistoryObject
 */
export interface PlayHistoryObject {
    /**
     * 
     * @type {PlayHistoryObjectContext}
     * @memberof PlayHistoryObject
     */
    'context'?: PlayHistoryObjectContext;
    /**
     * The date and time the track was played.
     * @type {string}
     * @memberof PlayHistoryObject
     */
    'played_at'?: string;
    /**
     * 
     * @type {PlayHistoryObjectTrack}
     * @memberof PlayHistoryObject
     */
    'track'?: PlayHistoryObjectTrack;
}
/**
 * The context the track was played from.
 * @export
 * @interface PlayHistoryObjectContext
 */
export interface PlayHistoryObjectContext {
    /**
     * 
     * @type {ContextObjectExternalUrls}
     * @memberof PlayHistoryObjectContext
     */
    'external_urls'?: ContextObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof PlayHistoryObjectContext
     */
    'href'?: string;
    /**
     * The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\". 
     * @type {string}
     * @memberof PlayHistoryObjectContext
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context. 
     * @type {string}
     * @memberof PlayHistoryObjectContext
     */
    'uri'?: string;
}
/**
 * The track the user listened to.
 * @export
 * @interface PlayHistoryObjectTrack
 */
export interface PlayHistoryObjectTrack {
    /**
     * 
     * @type {TrackObjectAlbum}
     * @memberof PlayHistoryObjectTrack
     */
    'album'?: TrackObjectAlbum;
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<ArtistObject>}
     * @memberof PlayHistoryObjectTrack
     */
    'artists'?: Array<ArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof PlayHistoryObjectTrack
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc). 
     * @type {number}
     * @memberof PlayHistoryObjectTrack
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds. 
     * @type {number}
     * @memberof PlayHistoryObjectTrack
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). 
     * @type {boolean}
     * @memberof PlayHistoryObjectTrack
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {TrackObjectExternalIds}
     * @memberof PlayHistoryObjectTrack
     */
    'external_ids'?: TrackObjectExternalIds;
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof PlayHistoryObjectTrack
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'id'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof PlayHistoryObjectTrack
     */
    'is_local'?: boolean;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof PlayHistoryObjectTrack
     */
    'is_playable'?: boolean;
    /**
     * 
     * @type {TrackObjectLinkedFrom}
     * @memberof PlayHistoryObjectTrack
     */
    'linked_from'?: TrackObjectLinkedFrom;
    /**
     * The name of the track. 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'name'?: string;
    /**
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
     * @type {number}
     * @memberof PlayHistoryObjectTrack
     */
    'popularity'?: number;
    /**
     * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'preview_url'?: string;
    /**
     * 
     * @type {SimplifiedTrackObjectRestrictions}
     * @memberof PlayHistoryObjectTrack
     */
    'restrictions'?: SimplifiedTrackObjectRestrictions;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof PlayHistoryObjectTrack
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'type'?: PlayHistoryObjectTrackTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof PlayHistoryObjectTrack
     */
    'uri'?: string;
}

export const PlayHistoryObjectTrackTypeEnum = {
    Track: 'track'
} as const;

export type PlayHistoryObjectTrackTypeEnum = typeof PlayHistoryObjectTrackTypeEnum[keyof typeof PlayHistoryObjectTrackTypeEnum];

/**
 * 
 * @export
 * @interface PlayerErrorObject
 */
export interface PlayerErrorObject {
    /**
     * A short description of the cause of the error. 
     * @type {string}
     * @memberof PlayerErrorObject
     */
    'message'?: string;
    /**
     * 
     * @type {PlayerErrorReasons}
     * @memberof PlayerErrorObject
     */
    'reason'?: PlayerErrorReasons;
    /**
     * The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header. 
     * @type {number}
     * @memberof PlayerErrorObject
     */
    'status'?: number;
}


/**
 * * `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context. * `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context. * `NO_SPECIFIC_TRACK` - The requested track does not exist. * `ALREADY_PAUSED` - The command requires playback to not be paused. * `NOT_PAUSED` - The command requires playback to be paused. * `NOT_PLAYING_LOCALLY` - The command requires playback on the local device. * `NOT_PLAYING_TRACK` - The command requires that a track is currently playing. * `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing. * `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context. * `CONTEXT_DISALLOW` - The command could not be performed on the context. * `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point. * `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming. * `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled. * `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device. * `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device\'s volume. * `NO_ACTIVE_DEVICE` - Requires an active device and the user has none. * `PREMIUM_REQUIRED` - The request is prohibited for non-premium users. * `UNKNOWN` - Certain actions are restricted because of unknown reasons. 
 * @export
 * @enum {string}
 */

export const PlayerErrorReasons = {
    NoPrevTrack: 'NO_PREV_TRACK',
    NoNextTrack: 'NO_NEXT_TRACK',
    NoSpecificTrack: 'NO_SPECIFIC_TRACK',
    AlreadyPaused: 'ALREADY_PAUSED',
    NotPaused: 'NOT_PAUSED',
    NotPlayingLocally: 'NOT_PLAYING_LOCALLY',
    NotPlayingTrack: 'NOT_PLAYING_TRACK',
    NotPlayingContext: 'NOT_PLAYING_CONTEXT',
    EndlessContext: 'ENDLESS_CONTEXT',
    ContextDisallow: 'CONTEXT_DISALLOW',
    AlreadyPlaying: 'ALREADY_PLAYING',
    RateLimited: 'RATE_LIMITED',
    RemoteControlDisallow: 'REMOTE_CONTROL_DISALLOW',
    DeviceNotControllable: 'DEVICE_NOT_CONTROLLABLE',
    VolumeControlDisallow: 'VOLUME_CONTROL_DISALLOW',
    NoActiveDevice: 'NO_ACTIVE_DEVICE',
    PremiumRequired: 'PREMIUM_REQUIRED',
    Unknown: 'UNKNOWN'
} as const;

export type PlayerErrorReasons = typeof PlayerErrorReasons[keyof typeof PlayerErrorReasons];


/**
 * 
 * @export
 * @interface PlaylistObject
 */
export interface PlaylistObject {
    /**
     * `true` if the owner allows other users to modify the playlist. 
     * @type {boolean}
     * @memberof PlaylistObject
     */
    'collaborative'?: boolean;
    /**
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {PlaylistObjectExternalUrls}
     * @memberof PlaylistObject
     */
    'external_urls'?: PlaylistObjectExternalUrls;
    /**
     * 
     * @type {PlaylistObjectFollowers}
     * @memberof PlaylistObject
     */
    'followers'?: PlaylistObjectFollowers;
    /**
     * A link to the Web API endpoint providing full details of the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'id'?: string;
    /**
     * Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
     * @type {Array<ImageObject>}
     * @memberof PlaylistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'name'?: string;
    /**
     * 
     * @type {PlaylistObjectOwner}
     * @memberof PlaylistObject
     */
    'owner'?: PlaylistObjectOwner;
    /**
     * The playlist\'s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
     * @type {boolean}
     * @memberof PlaylistObject
     */
    'public'?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
     * @type {string}
     * @memberof PlaylistObject
     */
    'snapshot_id'?: string;
    /**
     * 
     * @type {PlaylistObjectTracks}
     * @memberof PlaylistObject
     */
    'tracks'?: PlaylistObjectTracks;
    /**
     * The object type: \"playlist\" 
     * @type {string}
     * @memberof PlaylistObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'uri'?: string;
}
/**
 * Known external URLs for this playlist. 
 * @export
 * @interface PlaylistObjectExternalUrls
 */
export interface PlaylistObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof PlaylistObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * Information about the followers of the playlist.
 * @export
 * @interface PlaylistObjectFollowers
 */
export interface PlaylistObjectFollowers {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof PlaylistObjectFollowers
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof PlaylistObjectFollowers
     */
    'total'?: number;
}
/**
 * The user who owns the playlist 
 * @export
 * @interface PlaylistObjectOwner
 */
export interface PlaylistObjectOwner {
    /**
     * 
     * @type {PlaylistUserObjectExternalUrls}
     * @memberof PlaylistObjectOwner
     */
    'external_urls'?: PlaylistUserObjectExternalUrls;
    /**
     * 
     * @type {PlaylistUserObjectFollowers}
     * @memberof PlaylistObjectOwner
     */
    'followers'?: PlaylistUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistObjectOwner
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistObjectOwner
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistObjectOwner
     */
    'type'?: PlaylistObjectOwnerTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistObjectOwner
     */
    'uri'?: string;
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PlaylistObjectOwner
     */
    'display_name'?: string | null;
}

export const PlaylistObjectOwnerTypeEnum = {
    User: 'user'
} as const;

export type PlaylistObjectOwnerTypeEnum = typeof PlaylistObjectOwnerTypeEnum[keyof typeof PlaylistObjectOwnerTypeEnum];

/**
 * The tracks of the playlist. 
 * @export
 * @interface PlaylistObjectTracks
 */
export interface PlaylistObjectTracks {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PlaylistObjectTracks
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PlaylistObjectTracks
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PlaylistObjectTracks
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PlaylistObjectTracks
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PlaylistObjectTracks
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PlaylistObjectTracks
     */
    'total': number;
    /**
     * 
     * @type {Array<PlaylistTrackObject>}
     * @memberof PlaylistObjectTracks
     */
    'items': Array<PlaylistTrackObject>;
}
/**
 * 
 * @export
 * @interface PlaylistOwnerObject
 */
export interface PlaylistOwnerObject {
    /**
     * 
     * @type {PlaylistUserObjectExternalUrls}
     * @memberof PlaylistOwnerObject
     */
    'external_urls'?: PlaylistUserObjectExternalUrls;
    /**
     * 
     * @type {PlaylistUserObjectFollowers}
     * @memberof PlaylistOwnerObject
     */
    'followers'?: PlaylistUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'type'?: PlaylistOwnerObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'uri'?: string;
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'display_name'?: string | null;
}

export const PlaylistOwnerObjectTypeEnum = {
    User: 'user'
} as const;

export type PlaylistOwnerObjectTypeEnum = typeof PlaylistOwnerObjectTypeEnum[keyof typeof PlaylistOwnerObjectTypeEnum];

/**
 * 
 * @export
 * @interface PlaylistOwnerObjectAllOf
 */
export interface PlaylistOwnerObjectAllOf {
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PlaylistOwnerObjectAllOf
     */
    'display_name'?: string | null;
}
/**
 * 
 * @export
 * @interface PlaylistTrackObject
 */
export interface PlaylistTrackObject {
    /**
     * The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._ 
     * @type {string}
     * @memberof PlaylistTrackObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {PlaylistTrackObjectAddedBy}
     * @memberof PlaylistTrackObject
     */
    'added_by'?: PlaylistTrackObjectAddedBy;
    /**
     * Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not. 
     * @type {boolean}
     * @memberof PlaylistTrackObject
     */
    'is_local'?: boolean;
    /**
     * 
     * @type {PlaylistTrackObjectTrack}
     * @memberof PlaylistTrackObject
     */
    'track'?: PlaylistTrackObjectTrack;
}
/**
 * The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._ 
 * @export
 * @interface PlaylistTrackObjectAddedBy
 */
export interface PlaylistTrackObjectAddedBy {
    /**
     * 
     * @type {PlaylistUserObjectExternalUrls}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'external_urls'?: PlaylistUserObjectExternalUrls;
    /**
     * 
     * @type {PlaylistUserObjectFollowers}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'followers'?: PlaylistUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'type'?: PlaylistTrackObjectAddedByTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistTrackObjectAddedBy
     */
    'uri'?: string;
}

export const PlaylistTrackObjectAddedByTypeEnum = {
    User: 'user'
} as const;

export type PlaylistTrackObjectAddedByTypeEnum = typeof PlaylistTrackObjectAddedByTypeEnum[keyof typeof PlaylistTrackObjectAddedByTypeEnum];

/**
 * @type PlaylistTrackObjectTrack
 * Information about the track or episode.
 * @export
 */
export type PlaylistTrackObjectTrack = EpisodeObject | TrackObject;

/**
 * 
 * @export
 * @interface PlaylistTracksRefObject
 */
export interface PlaylistTracksRefObject {
    /**
     * A link to the Web API endpoint where full details of the playlist\'s tracks can be retrieved. 
     * @type {string}
     * @memberof PlaylistTracksRefObject
     */
    'href'?: string;
    /**
     * Number of tracks in the playlist. 
     * @type {number}
     * @memberof PlaylistTracksRefObject
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PlaylistUserObject
 */
export interface PlaylistUserObject {
    /**
     * 
     * @type {PlaylistUserObjectExternalUrls}
     * @memberof PlaylistUserObject
     */
    'external_urls'?: PlaylistUserObjectExternalUrls;
    /**
     * 
     * @type {PlaylistUserObjectFollowers}
     * @memberof PlaylistUserObject
     */
    'followers'?: PlaylistUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'type'?: PlaylistUserObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'uri'?: string;
}

export const PlaylistUserObjectTypeEnum = {
    User: 'user'
} as const;

export type PlaylistUserObjectTypeEnum = typeof PlaylistUserObjectTypeEnum[keyof typeof PlaylistUserObjectTypeEnum];

/**
 * Known public external URLs for this user. 
 * @export
 * @interface PlaylistUserObjectExternalUrls
 */
export interface PlaylistUserObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof PlaylistUserObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * Information about the followers of this user. 
 * @export
 * @interface PlaylistUserObjectFollowers
 */
export interface PlaylistUserObjectFollowers {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof PlaylistUserObjectFollowers
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof PlaylistUserObjectFollowers
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PrivateUserObject
 */
export interface PrivateUserObject {
    /**
     * The country of the user, as set in the user\'s account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'country'?: string;
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'display_name'?: string;
    /**
     * The user\'s email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'email'?: string;
    /**
     * 
     * @type {PrivateUserObjectExplicitContent}
     * @memberof PrivateUserObject
     */
    'explicit_content'?: PrivateUserObjectExplicitContent;
    /**
     * 
     * @type {PrivateUserObjectExternalUrls}
     * @memberof PrivateUserObject
     */
    'external_urls'?: PrivateUserObjectExternalUrls;
    /**
     * 
     * @type {PrivateUserObjectFollowers}
     * @memberof PrivateUserObject
     */
    'followers'?: PrivateUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'id'?: string;
    /**
     * The user\'s profile image.
     * @type {Array<ImageObject>}
     * @memberof PrivateUserObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The user\'s Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'product'?: string;
    /**
     * The object type: \"user\" 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'uri'?: string;
}
/**
 * The user\'s explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
 * @export
 * @interface PrivateUserObjectExplicitContent
 */
export interface PrivateUserObjectExplicitContent {
    /**
     * When `true`, indicates that explicit content should not be played. 
     * @type {boolean}
     * @memberof PrivateUserObjectExplicitContent
     */
    'filter_enabled'?: boolean;
    /**
     * When `true`, indicates that the explicit content setting is locked and can\'t be changed by the user. 
     * @type {boolean}
     * @memberof PrivateUserObjectExplicitContent
     */
    'filter_locked'?: boolean;
}
/**
 * Known external URLs for this user.
 * @export
 * @interface PrivateUserObjectExternalUrls
 */
export interface PrivateUserObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof PrivateUserObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * Information about the followers of the user.
 * @export
 * @interface PrivateUserObjectFollowers
 */
export interface PrivateUserObjectFollowers {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof PrivateUserObjectFollowers
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof PrivateUserObjectFollowers
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PublicUserObject
 */
export interface PublicUserObject {
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {PlaylistUserObjectExternalUrls}
     * @memberof PublicUserObject
     */
    'external_urls'?: PlaylistUserObjectExternalUrls;
    /**
     * 
     * @type {PlaylistUserObjectFollowers}
     * @memberof PublicUserObject
     */
    'followers'?: PlaylistUserObjectFollowers;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'id'?: string;
    /**
     * The user\'s profile image. 
     * @type {Array<ImageObject>}
     * @memberof PublicUserObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The object type. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'type'?: PublicUserObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'uri'?: string;
}

export const PublicUserObjectTypeEnum = {
    User: 'user'
} as const;

export type PublicUserObjectTypeEnum = typeof PublicUserObjectTypeEnum[keyof typeof PublicUserObjectTypeEnum];

/**
 * 
 * @export
 * @interface QueueObject
 */
export interface QueueObject {
    /**
     * 
     * @type {CurrentlyPlayingContextObjectItem}
     * @memberof QueueObject
     */
    'currently_playing'?: CurrentlyPlayingContextObjectItem;
    /**
     * The tracks or episodes in the queue. Can be empty.
     * @type {Array<QueueObjectQueueInner>}
     * @memberof QueueObject
     */
    'queue'?: Array<QueueObjectQueueInner>;
}
/**
 * @type QueueObjectQueueInner
 * @export
 */
export type QueueObjectQueueInner = EpisodeObject | TrackObject;

/**
 * 
 * @export
 * @interface RecommendationSeedObject
 */
export interface RecommendationSeedObject {
    /**
     * The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'afterFilteringSize'?: number;
    /**
     * The number of tracks available after relinking for regional availability. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'afterRelinkingSize'?: number;
    /**
     * A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'href'?: string;
    /**
     * The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'id'?: string;
    /**
     * The number of recommended tracks available for this seed. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'initialPoolSize'?: number;
    /**
     * The entity type of this seed. One of `artist`, `track` or `genre`. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface RecommendationsObject
 */
export interface RecommendationsObject {
    /**
     * An array of recommendation seed objects. 
     * @type {Array<RecommendationSeedObject>}
     * @memberof RecommendationsObject
     */
    'seeds': Array<RecommendationSeedObject>;
    /**
     * An array of track objects ordered according to the parameters supplied. 
     * @type {Array<TrackObject>}
     * @memberof RecommendationsObject
     */
    'tracks': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface RemoveEpisodesUserRequest
 */
export interface RemoveEpisodesUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof RemoveEpisodesUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RemoveTracksPlaylistRequest
 */
export interface RemoveTracksPlaylistRequest {
    /**
     * The playlist\'s snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist. 
     * @type {string}
     * @memberof RemoveTracksPlaylistRequest
     */
    'snapshot_id'?: string;
    /**
     * An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once. 
     * @type {Array<RemoveTracksPlaylistRequestTracksInner>}
     * @memberof RemoveTracksPlaylistRequest
     */
    'tracks': Array<RemoveTracksPlaylistRequestTracksInner>;
}
/**
 * 
 * @export
 * @interface RemoveTracksPlaylistRequestTracksInner
 */
export interface RemoveTracksPlaylistRequestTracksInner {
    /**
     * Spotify URI
     * @type {string}
     * @memberof RemoveTracksPlaylistRequestTracksInner
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface ReorderOrReplacePlaylistsTracks200Response
 */
export interface ReorderOrReplacePlaylistsTracks200Response {
    /**
     * 
     * @type {string}
     * @memberof ReorderOrReplacePlaylistsTracks200Response
     */
    'snapshot_id'?: string;
}
/**
 * 
 * @export
 * @interface ReorderOrReplacePlaylistsTracksRequest
 */
export interface ReorderOrReplacePlaylistsTracksRequest {
    [key: string]: any;

    /**
     * The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'insert_before'?: number;
    /**
     * The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'range_length'?: number;
    /**
     * The position of the first item to be reordered. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'range_start'?: number;
    /**
     * The playlist\'s snapshot ID against which you want to make the changes. 
     * @type {string}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'snapshot_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'uris'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ResumePointObject
 */
export interface ResumePointObject {
    /**
     * Whether or not the episode has been fully played by the user. 
     * @type {boolean}
     * @memberof ResumePointObject
     */
    'fully_played'?: boolean;
    /**
     * The user\'s most recent position in the episode in milliseconds. 
     * @type {number}
     * @memberof ResumePointObject
     */
    'resume_position_ms'?: number;
}
/**
 * 
 * @export
 * @interface SaveAlbumsUserRequest
 */
export interface SaveAlbumsUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveAlbumsUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SaveEpisodesUserRequest
 */
export interface SaveEpisodesUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveEpisodesUserRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface SaveShowsUserRequest
 */
export interface SaveShowsUserRequest {
    /**
     * A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).   A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
     * @type {Array<string>}
     * @memberof SaveShowsUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SaveTracksUserRequest
 */
export interface SaveTracksUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveTracksUserRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface SavedAlbumObject
 */
export interface SavedAlbumObject {
    /**
     * The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {string}
     * @memberof SavedAlbumObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {SavedAlbumObjectAlbum}
     * @memberof SavedAlbumObject
     */
    'album'?: SavedAlbumObjectAlbum;
}
/**
 * Information about the album.
 * @export
 * @interface SavedAlbumObjectAlbum
 */
export interface SavedAlbumObjectAlbum {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'album_type': SavedAlbumObjectAlbumAlbumTypeEnum;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof SavedAlbumObjectAlbum
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {AlbumBaseExternalUrls}
     * @memberof SavedAlbumObjectAlbum
     */
    'external_urls': AlbumBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SavedAlbumObjectAlbum
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'release_date_precision': SavedAlbumObjectAlbumReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumBaseRestrictions}
     * @memberof SavedAlbumObjectAlbum
     */
    'restrictions'?: AlbumBaseRestrictions;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof SavedAlbumObjectAlbum
     */
    'total_tracks': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'type': SavedAlbumObjectAlbumTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'uri': string;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SavedAlbumObjectAlbum
     */
    'artists'?: Array<SimplifiedArtistObject>;
    /**
     * The copyright statements of the album.
     * @type {Array<CopyrightObject>}
     * @memberof SavedAlbumObjectAlbum
     */
    'copyrights'?: Array<CopyrightObject>;
    /**
     * 
     * @type {AlbumObjectAllOfExternalIds}
     * @memberof SavedAlbumObjectAlbum
     */
    'external_ids'?: AlbumObjectAllOfExternalIds;
    /**
     * A list of the genres used to classify the album. (If not yet classified, the array is empty.)
     * @type {Array<string>}
     * @memberof SavedAlbumObjectAlbum
     */
    'genres'?: Array<string>;
    /**
     * The label for the album.
     * @type {string}
     * @memberof SavedAlbumObjectAlbum
     */
    'label'?: string;
    /**
     * The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album\'s individual tracks.
     * @type {number}
     * @memberof SavedAlbumObjectAlbum
     */
    'popularity'?: number;
    /**
     * 
     * @type {AlbumObjectAllOfTracks}
     * @memberof SavedAlbumObjectAlbum
     */
    'tracks'?: AlbumObjectAllOfTracks;
}

export const SavedAlbumObjectAlbumAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type SavedAlbumObjectAlbumAlbumTypeEnum = typeof SavedAlbumObjectAlbumAlbumTypeEnum[keyof typeof SavedAlbumObjectAlbumAlbumTypeEnum];
export const SavedAlbumObjectAlbumReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SavedAlbumObjectAlbumReleaseDatePrecisionEnum = typeof SavedAlbumObjectAlbumReleaseDatePrecisionEnum[keyof typeof SavedAlbumObjectAlbumReleaseDatePrecisionEnum];
export const SavedAlbumObjectAlbumTypeEnum = {
    Album: 'album'
} as const;

export type SavedAlbumObjectAlbumTypeEnum = typeof SavedAlbumObjectAlbumTypeEnum[keyof typeof SavedAlbumObjectAlbumTypeEnum];

/**
 * 
 * @export
 * @interface SavedAudiobookObject
 */
export interface SavedAudiobookObject {
    /**
     * The date and time the audiobook was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {string}
     * @memberof SavedAudiobookObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {SavedAudiobookObjectAudiobook}
     * @memberof SavedAudiobookObject
     */
    'audiobook'?: SavedAudiobookObjectAudiobook;
}
/**
 * Information about the audiobook.
 * @export
 * @interface SavedAudiobookObjectAudiobook
 */
export interface SavedAudiobookObjectAudiobook {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'explicit': boolean;
    /**
     * 
     * @type {AudiobookBaseExternalUrls}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'external_urls': AudiobookBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'href': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'publisher': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'total_chapters': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'type': SavedAudiobookObjectAudiobookTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'uri': string;
    /**
     * 
     * @type {AudiobookObjectAllOfChapters}
     * @memberof SavedAudiobookObjectAudiobook
     */
    'chapters': AudiobookObjectAllOfChapters;
}

export const SavedAudiobookObjectAudiobookTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type SavedAudiobookObjectAudiobookTypeEnum = typeof SavedAudiobookObjectAudiobookTypeEnum[keyof typeof SavedAudiobookObjectAudiobookTypeEnum];

/**
 * 
 * @export
 * @interface SavedEpisodeObject
 */
export interface SavedEpisodeObject {
    /**
     * The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. 
     * @type {string}
     * @memberof SavedEpisodeObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {SavedEpisodeObjectEpisode}
     * @memberof SavedEpisodeObject
     */
    'episode'?: SavedEpisodeObjectEpisode;
}
/**
 * Information about the episode.
 * @export
 * @interface SavedEpisodeObjectEpisode
 */
export interface SavedEpisodeObjectEpisode {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'audio_preview_url': string;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof SavedEpisodeObjectEpisode
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SavedEpisodeObjectEpisode
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof SavedEpisodeObjectEpisode
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SavedEpisodeObjectEpisode
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof SavedEpisodeObjectEpisode
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof SavedEpisodeObjectEpisode
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SavedEpisodeObjectEpisode
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'release_date_precision': SavedEpisodeObjectEpisodeReleaseDatePrecisionEnum;
    /**
     * 
     * @type {EpisodeBaseRestrictions}
     * @memberof SavedEpisodeObjectEpisode
     */
    'restrictions'?: EpisodeBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof SavedEpisodeObjectEpisode
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'type': SavedEpisodeObjectEpisodeTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SavedEpisodeObjectEpisode
     */
    'uri': string;
    /**
     * 
     * @type {EpisodeObjectAllOfShow}
     * @memberof SavedEpisodeObjectEpisode
     */
    'show': EpisodeObjectAllOfShow;
}

export const SavedEpisodeObjectEpisodeReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SavedEpisodeObjectEpisodeReleaseDatePrecisionEnum = typeof SavedEpisodeObjectEpisodeReleaseDatePrecisionEnum[keyof typeof SavedEpisodeObjectEpisodeReleaseDatePrecisionEnum];
export const SavedEpisodeObjectEpisodeTypeEnum = {
    Episode: 'episode'
} as const;

export type SavedEpisodeObjectEpisodeTypeEnum = typeof SavedEpisodeObjectEpisodeTypeEnum[keyof typeof SavedEpisodeObjectEpisodeTypeEnum];

/**
 * 
 * @export
 * @interface SavedShowObject
 */
export interface SavedShowObject {
    /**
     * The date and time the show was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {string}
     * @memberof SavedShowObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {SavedShowObjectShow}
     * @memberof SavedShowObject
     */
    'show'?: SavedShowObjectShow;
}
/**
 * Information about the show.
 * @export
 * @interface SavedShowObjectShow
 */
export interface SavedShowObjectShow {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SavedShowObjectShow
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof SavedShowObjectShow
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SavedShowObjectShow
     */
    'explicit': boolean;
    /**
     * 
     * @type {ShowBaseExternalUrls}
     * @memberof SavedShowObjectShow
     */
    'external_urls': ShowBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'href': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SavedShowObjectShow
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof SavedShowObjectShow
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SavedShowObjectShow
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'publisher': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof SavedShowObjectShow
     */
    'total_episodes': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'type': SavedShowObjectShowTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SavedShowObjectShow
     */
    'uri': string;
}

export const SavedShowObjectShowTypeEnum = {
    Show: 'show'
} as const;

export type SavedShowObjectShowTypeEnum = typeof SavedShowObjectShowTypeEnum[keyof typeof SavedShowObjectShowTypeEnum];

/**
 * 
 * @export
 * @interface SavedTrackObject
 */
export interface SavedTrackObject {
    /**
     * The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {string}
     * @memberof SavedTrackObject
     */
    'added_at'?: string;
    /**
     * 
     * @type {SavedTrackObjectTrack}
     * @memberof SavedTrackObject
     */
    'track'?: SavedTrackObjectTrack;
}
/**
 * Information about the track.
 * @export
 * @interface SavedTrackObjectTrack
 */
export interface SavedTrackObjectTrack {
    /**
     * 
     * @type {TrackObjectAlbum}
     * @memberof SavedTrackObjectTrack
     */
    'album'?: TrackObjectAlbum;
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<ArtistObject>}
     * @memberof SavedTrackObjectTrack
     */
    'artists'?: Array<ArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SavedTrackObjectTrack
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc). 
     * @type {number}
     * @memberof SavedTrackObjectTrack
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds. 
     * @type {number}
     * @memberof SavedTrackObjectTrack
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SavedTrackObjectTrack
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {TrackObjectExternalIds}
     * @memberof SavedTrackObjectTrack
     */
    'external_ids'?: TrackObjectExternalIds;
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof SavedTrackObjectTrack
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'id'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof SavedTrackObjectTrack
     */
    'is_local'?: boolean;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof SavedTrackObjectTrack
     */
    'is_playable'?: boolean;
    /**
     * 
     * @type {TrackObjectLinkedFrom}
     * @memberof SavedTrackObjectTrack
     */
    'linked_from'?: TrackObjectLinkedFrom;
    /**
     * The name of the track. 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'name'?: string;
    /**
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
     * @type {number}
     * @memberof SavedTrackObjectTrack
     */
    'popularity'?: number;
    /**
     * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'preview_url'?: string;
    /**
     * 
     * @type {SimplifiedTrackObjectRestrictions}
     * @memberof SavedTrackObjectTrack
     */
    'restrictions'?: SimplifiedTrackObjectRestrictions;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof SavedTrackObjectTrack
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'type'?: SavedTrackObjectTrackTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SavedTrackObjectTrack
     */
    'uri'?: string;
}

export const SavedTrackObjectTrackTypeEnum = {
    Track: 'track'
} as const;

export type SavedTrackObjectTrackTypeEnum = typeof SavedTrackObjectTrackTypeEnum[keyof typeof SavedTrackObjectTrackTypeEnum];

/**
 * 
 * @export
 * @interface Search200Response
 */
export interface Search200Response {
    /**
     * 
     * @type {PagingSimplifiedAlbumObject}
     * @memberof Search200Response
     */
    'albums'?: PagingSimplifiedAlbumObject;
    /**
     * 
     * @type {PagingArtistObject}
     * @memberof Search200Response
     */
    'artists'?: PagingArtistObject;
    /**
     * 
     * @type {PagingSimplifiedAudiobookObject}
     * @memberof Search200Response
     */
    'audiobooks'?: PagingSimplifiedAudiobookObject;
    /**
     * 
     * @type {PagingSimplifiedEpisodeObject}
     * @memberof Search200Response
     */
    'episodes'?: PagingSimplifiedEpisodeObject;
    /**
     * 
     * @type {PagingPlaylistObject}
     * @memberof Search200Response
     */
    'playlists'?: PagingPlaylistObject;
    /**
     * 
     * @type {PagingSimplifiedShowObject}
     * @memberof Search200Response
     */
    'shows'?: PagingSimplifiedShowObject;
    /**
     * 
     * @type {PagingTrackObject}
     * @memberof Search200Response
     */
    'tracks'?: PagingTrackObject;
}
/**
 * 
 * @export
 * @interface SectionObject
 */
export interface SectionObject {
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the section\'s \"designation\".
     * @type {number}
     * @memberof SectionObject
     */
    'confidence'?: number;
    /**
     * The duration (in seconds) of the section.
     * @type {number}
     * @memberof SectionObject
     */
    'duration'?: number;
    /**
     * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
     * @type {number}
     * @memberof SectionObject
     */
    'key'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'key_confidence'?: number;
    /**
     * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
     * @type {number}
     * @memberof SectionObject
     */
    'loudness'?: number;
    /**
     * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
     * @type {number}
     * @memberof SectionObject
     */
    'mode'?: SectionObjectModeEnum;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @type {number}
     * @memberof SectionObject
     */
    'mode_confidence'?: number;
    /**
     * The starting point (in seconds) of the section.
     * @type {number}
     * @memberof SectionObject
     */
    'start'?: number;
    /**
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
     * @type {number}
     * @memberof SectionObject
     */
    'tempo'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don\'t contain tempo (like pure speech) which would correspond to a low value in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'tempo_confidence'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof SectionObject
     */
    'time_signature'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'time_signature_confidence'?: number;
}

export const SectionObjectModeEnum = {
    NUMBER_MINUS_1: -1,
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type SectionObjectModeEnum = typeof SectionObjectModeEnum[keyof typeof SectionObjectModeEnum];

/**
 * 
 * @export
 * @interface SegmentObject
 */
export interface SegmentObject {
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field. 
     * @type {number}
     * @memberof SegmentObject
     */
    'confidence'?: number;
    /**
     * The duration (in seconds) of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'duration'?: number;
    /**
     * The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_end'?: number;
    /**
     * The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_max'?: number;
    /**
     * The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_max_time'?: number;
    /**
     * The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_start'?: number;
    /**
     * Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png) 
     * @type {Array<number>}
     * @memberof SegmentObject
     */
    'pitches'?: Array<number>;
    /**
     * The starting point (in seconds) of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'start'?: number;
    /**
     * Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other. 
     * @type {Array<number>}
     * @memberof SegmentObject
     */
    'timbre'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ShowBase
 */
export interface ShowBase {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ShowBase
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof ShowBase
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ShowBase
     */
    'description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ShowBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ShowBaseExternalUrls}
     * @memberof ShowBase
     */
    'external_urls': ShowBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'href': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof ShowBase
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ShowBase
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof ShowBase
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ShowBase
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ShowBase
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'publisher': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof ShowBase
     */
    'total_episodes': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof ShowBase
     */
    'type': ShowBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'uri': string;
}

export const ShowBaseTypeEnum = {
    Show: 'show'
} as const;

export type ShowBaseTypeEnum = typeof ShowBaseTypeEnum[keyof typeof ShowBaseTypeEnum];

/**
 * External URLs for this show. 
 * @export
 * @interface ShowBaseExternalUrls
 */
export interface ShowBaseExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ShowBaseExternalUrls
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface ShowObject
 */
export interface ShowObject {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ShowObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof ShowObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ShowObject
     */
    'description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ShowObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ShowBaseExternalUrls}
     * @memberof ShowObject
     */
    'external_urls': ShowBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'href': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof ShowObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ShowObject
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof ShowObject
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ShowObject
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ShowObject
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'publisher': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof ShowObject
     */
    'total_episodes': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof ShowObject
     */
    'type': ShowObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'uri': string;
    /**
     * 
     * @type {ShowObjectAllOfEpisodes}
     * @memberof ShowObject
     */
    'episodes': ShowObjectAllOfEpisodes;
}

export const ShowObjectTypeEnum = {
    Show: 'show'
} as const;

export type ShowObjectTypeEnum = typeof ShowObjectTypeEnum[keyof typeof ShowObjectTypeEnum];

/**
 * 
 * @export
 * @interface ShowObjectAllOf
 */
export interface ShowObjectAllOf {
    /**
     * 
     * @type {ShowObjectAllOfEpisodes}
     * @memberof ShowObjectAllOf
     */
    'episodes': ShowObjectAllOfEpisodes;
}
/**
 * The episodes of the show. 
 * @export
 * @interface ShowObjectAllOfEpisodes
 */
export interface ShowObjectAllOfEpisodes {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedEpisodeObject>}
     * @memberof ShowObjectAllOfEpisodes
     */
    'items': Array<SimplifiedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface SimplifiedAlbumObject
 */
export interface SimplifiedAlbumObject {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'album_type': SimplifiedAlbumObjectAlbumTypeEnum;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof SimplifiedAlbumObject
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {AlbumBaseExternalUrls}
     * @memberof SimplifiedAlbumObject
     */
    'external_urls': AlbumBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedAlbumObject
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'release_date_precision': SimplifiedAlbumObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumBaseRestrictions}
     * @memberof SimplifiedAlbumObject
     */
    'restrictions'?: AlbumBaseRestrictions;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof SimplifiedAlbumObject
     */
    'total_tracks': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'type': SimplifiedAlbumObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'uri': string;
    /**
     * The field is present when getting an artist\'s albums. Compare to album_type this field represents relationship between the artist and the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'album_group'?: SimplifiedAlbumObjectAlbumGroupEnum;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SimplifiedAlbumObject
     */
    'artists': Array<SimplifiedArtistObject>;
}

export const SimplifiedAlbumObjectAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type SimplifiedAlbumObjectAlbumTypeEnum = typeof SimplifiedAlbumObjectAlbumTypeEnum[keyof typeof SimplifiedAlbumObjectAlbumTypeEnum];
export const SimplifiedAlbumObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedAlbumObjectReleaseDatePrecisionEnum = typeof SimplifiedAlbumObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedAlbumObjectReleaseDatePrecisionEnum];
export const SimplifiedAlbumObjectTypeEnum = {
    Album: 'album'
} as const;

export type SimplifiedAlbumObjectTypeEnum = typeof SimplifiedAlbumObjectTypeEnum[keyof typeof SimplifiedAlbumObjectTypeEnum];
export const SimplifiedAlbumObjectAlbumGroupEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation',
    AppearsOn: 'appears_on'
} as const;

export type SimplifiedAlbumObjectAlbumGroupEnum = typeof SimplifiedAlbumObjectAlbumGroupEnum[keyof typeof SimplifiedAlbumObjectAlbumGroupEnum];

/**
 * 
 * @export
 * @interface SimplifiedAlbumObjectAllOf
 */
export interface SimplifiedAlbumObjectAllOf {
    /**
     * The field is present when getting an artist\'s albums. Compare to album_type this field represents relationship between the artist and the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObjectAllOf
     */
    'album_group'?: SimplifiedAlbumObjectAllOfAlbumGroupEnum;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SimplifiedAlbumObjectAllOf
     */
    'artists': Array<SimplifiedArtistObject>;
}

export const SimplifiedAlbumObjectAllOfAlbumGroupEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation',
    AppearsOn: 'appears_on'
} as const;

export type SimplifiedAlbumObjectAllOfAlbumGroupEnum = typeof SimplifiedAlbumObjectAllOfAlbumGroupEnum[keyof typeof SimplifiedAlbumObjectAllOfAlbumGroupEnum];

/**
 * 
 * @export
 * @interface SimplifiedArtistObject
 */
export interface SimplifiedArtistObject {
    /**
     * 
     * @type {ArtistObjectExternalUrls}
     * @memberof SimplifiedArtistObject
     */
    'external_urls'?: ArtistObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'id'?: string;
    /**
     * The name of the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'name'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'type'?: SimplifiedArtistObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'uri'?: string;
}

export const SimplifiedArtistObjectTypeEnum = {
    Artist: 'artist'
} as const;

export type SimplifiedArtistObjectTypeEnum = typeof SimplifiedArtistObjectTypeEnum[keyof typeof SimplifiedArtistObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedAudiobookObject
 */
export interface SimplifiedAudiobookObject {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedAudiobookObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedAudiobookObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {AudiobookBaseExternalUrls}
     * @memberof SimplifiedAudiobookObject
     */
    'external_urls': AudiobookBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'href': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedAudiobookObject
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'publisher': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof SimplifiedAudiobookObject
     */
    'total_chapters': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'type': SimplifiedAudiobookObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'uri': string;
}

export const SimplifiedAudiobookObjectTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type SimplifiedAudiobookObjectTypeEnum = typeof SimplifiedAudiobookObjectTypeEnum[keyof typeof SimplifiedAudiobookObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedChapterObject
 */
export interface SimplifiedChapterObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'audio_preview_url': string;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedChapterObject
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof SimplifiedChapterObject
     */
    'chapter_number': number;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof SimplifiedChapterObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedChapterObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof SimplifiedChapterObject
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedChapterObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof SimplifiedChapterObject
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedChapterObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'release_date_precision': SimplifiedChapterObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ChapterBaseRestrictions}
     * @memberof SimplifiedChapterObject
     */
    'restrictions'?: ChapterBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof SimplifiedChapterObject
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'type': SimplifiedChapterObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'uri': string;
}

export const SimplifiedChapterObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedChapterObjectReleaseDatePrecisionEnum = typeof SimplifiedChapterObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedChapterObjectReleaseDatePrecisionEnum];
export const SimplifiedChapterObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type SimplifiedChapterObjectTypeEnum = typeof SimplifiedChapterObjectTypeEnum[keyof typeof SimplifiedChapterObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedEpisodeObject
 */
export interface SimplifiedEpisodeObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'audio_preview_url': string;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof SimplifiedEpisodeObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ChapterBaseExternalUrls}
     * @memberof SimplifiedEpisodeObject
     */
    'external_urls': ChapterBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'href': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedEpisodeObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedEpisodeObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'release_date_precision': SimplifiedEpisodeObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {EpisodeBaseRestrictions}
     * @memberof SimplifiedEpisodeObject
     */
    'restrictions'?: EpisodeBaseRestrictions;
    /**
     * 
     * @type {ChapterBaseResumePoint}
     * @memberof SimplifiedEpisodeObject
     */
    'resume_point': ChapterBaseResumePoint;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'type': SimplifiedEpisodeObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'uri': string;
}

export const SimplifiedEpisodeObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedEpisodeObjectReleaseDatePrecisionEnum = typeof SimplifiedEpisodeObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedEpisodeObjectReleaseDatePrecisionEnum];
export const SimplifiedEpisodeObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type SimplifiedEpisodeObjectTypeEnum = typeof SimplifiedEpisodeObjectTypeEnum[keyof typeof SimplifiedEpisodeObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedPlaylistObject
 */
export interface SimplifiedPlaylistObject {
    /**
     * `true` if the owner allows other users to modify the playlist. 
     * @type {boolean}
     * @memberof SimplifiedPlaylistObject
     */
    'collaborative'?: boolean;
    /**
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'description'?: string;
    /**
     * 
     * @type {PlaylistObjectExternalUrls}
     * @memberof SimplifiedPlaylistObject
     */
    'external_urls'?: PlaylistObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'id'?: string;
    /**
     * Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedPlaylistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'name'?: string;
    /**
     * 
     * @type {PlaylistObjectOwner}
     * @memberof SimplifiedPlaylistObject
     */
    'owner'?: PlaylistObjectOwner;
    /**
     * The playlist\'s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
     * @type {boolean}
     * @memberof SimplifiedPlaylistObject
     */
    'public'?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'snapshot_id'?: string;
    /**
     * 
     * @type {SimplifiedPlaylistObjectTracks}
     * @memberof SimplifiedPlaylistObject
     */
    'tracks'?: SimplifiedPlaylistObjectTracks;
    /**
     * The object type: \"playlist\" 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'uri'?: string;
}
/**
 * A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist\'s tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available. 
 * @export
 * @interface SimplifiedPlaylistObjectTracks
 */
export interface SimplifiedPlaylistObjectTracks {
    /**
     * A link to the Web API endpoint where full details of the playlist\'s tracks can be retrieved. 
     * @type {string}
     * @memberof SimplifiedPlaylistObjectTracks
     */
    'href'?: string;
    /**
     * Number of tracks in the playlist. 
     * @type {number}
     * @memberof SimplifiedPlaylistObjectTracks
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SimplifiedShowObject
 */
export interface SimplifiedShowObject {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedShowObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof SimplifiedShowObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedShowObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ShowBaseExternalUrls}
     * @memberof SimplifiedShowObject
     */
    'external_urls': ShowBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'href': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'html_description': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedShowObject
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof SimplifiedShowObject
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedShowObject
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'publisher': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof SimplifiedShowObject
     */
    'total_episodes': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'type': SimplifiedShowObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'uri': string;
}

export const SimplifiedShowObjectTypeEnum = {
    Show: 'show'
} as const;

export type SimplifiedShowObjectTypeEnum = typeof SimplifiedShowObjectTypeEnum[keyof typeof SimplifiedShowObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedTrackObject
 */
export interface SimplifiedTrackObject {
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SimplifiedTrackObject
     */
    'artists'?: Array<SimplifiedArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedTrackObject
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc).
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds.
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {SimplifiedTrackObjectExternalUrls}
     * @memberof SimplifiedTrackObject
     */
    'external_urls'?: SimplifiedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'id'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'is_local'?: boolean;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'is_playable'?: boolean;
    /**
     * 
     * @type {SimplifiedTrackObjectLinkedFrom}
     * @memberof SimplifiedTrackObject
     */
    'linked_from'?: SimplifiedTrackObjectLinkedFrom;
    /**
     * The name of the track.
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'name'?: string;
    /**
     * A URL to a 30 second preview (MP3 format) of the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'preview_url'?: string;
    /**
     * 
     * @type {SimplifiedTrackObjectRestrictions}
     * @memberof SimplifiedTrackObject
     */
    'restrictions'?: SimplifiedTrackObjectRestrictions;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'uri'?: string;
}
/**
 * External URLs for this track. 
 * @export
 * @interface SimplifiedTrackObjectExternalUrls
 */
export interface SimplifiedTrackObjectExternalUrls {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof SimplifiedTrackObjectExternalUrls
     */
    'spotify'?: string;
}
/**
 * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.
 * @export
 * @interface SimplifiedTrackObjectLinkedFrom
 */
export interface SimplifiedTrackObjectLinkedFrom {
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof SimplifiedTrackObjectLinkedFrom
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof SimplifiedTrackObjectLinkedFrom
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObjectLinkedFrom
     */
    'id'?: string;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof SimplifiedTrackObjectLinkedFrom
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObjectLinkedFrom
     */
    'uri'?: string;
}
/**
 * Included in the response when a content restriction is applied. 
 * @export
 * @interface SimplifiedTrackObjectRestrictions
 */
export interface SimplifiedTrackObjectRestrictions {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof SimplifiedTrackObjectRestrictions
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface StartAUsersPlaybackRequest
 */
export interface StartAUsersPlaybackRequest {
    [key: string]: any;

    /**
     * Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` 
     * @type {string}
     * @memberof StartAUsersPlaybackRequest
     */
    'context_uri'?: string;
    /**
     * Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and can’t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` 
     * @type {{ [key: string]: any; }}
     * @memberof StartAUsersPlaybackRequest
     */
    'offset'?: { [key: string]: any; };
    /**
     * Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. 
     * @type {number}
     * @memberof StartAUsersPlaybackRequest
     */
    'position_ms'?: number;
    /**
     * Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` 
     * @type {Array<string>}
     * @memberof StartAUsersPlaybackRequest
     */
    'uris'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TimeIntervalObject
 */
export interface TimeIntervalObject {
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'confidence'?: number;
    /**
     * The duration (in seconds) of the time interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'duration'?: number;
    /**
     * The starting point (in seconds) of the time interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'start'?: number;
}
/**
 * 
 * @export
 * @interface TrackObject
 */
export interface TrackObject {
    /**
     * 
     * @type {TrackObjectAlbum}
     * @memberof TrackObject
     */
    'album'?: TrackObjectAlbum;
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<ArtistObject>}
     * @memberof TrackObject
     */
    'artists'?: Array<ArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof TrackObject
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc). 
     * @type {number}
     * @memberof TrackObject
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds. 
     * @type {number}
     * @memberof TrackObject
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). 
     * @type {boolean}
     * @memberof TrackObject
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {TrackObjectExternalIds}
     * @memberof TrackObject
     */
    'external_ids'?: TrackObjectExternalIds;
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof TrackObject
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'id'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof TrackObject
     */
    'is_local'?: boolean;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof TrackObject
     */
    'is_playable'?: boolean;
    /**
     * 
     * @type {TrackObjectLinkedFrom}
     * @memberof TrackObject
     */
    'linked_from'?: TrackObjectLinkedFrom;
    /**
     * The name of the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'name'?: string;
    /**
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
     * @type {number}
     * @memberof TrackObject
     */
    'popularity'?: number;
    /**
     * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
     * @type {string}
     * @memberof TrackObject
     */
    'preview_url'?: string;
    /**
     * 
     * @type {SimplifiedTrackObjectRestrictions}
     * @memberof TrackObject
     */
    'restrictions'?: SimplifiedTrackObjectRestrictions;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof TrackObject
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof TrackObject
     */
    'type'?: TrackObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'uri'?: string;
}

export const TrackObjectTypeEnum = {
    Track: 'track'
} as const;

export type TrackObjectTypeEnum = typeof TrackObjectTypeEnum[keyof typeof TrackObjectTypeEnum];

/**
 * The album on which the track appears. The album object includes a link in `href` to full information about the album. 
 * @export
 * @interface TrackObjectAlbum
 */
export interface TrackObjectAlbum {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'album_type': TrackObjectAlbumAlbumTypeEnum;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof TrackObjectAlbum
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {AlbumBaseExternalUrls}
     * @memberof TrackObjectAlbum
     */
    'external_urls': AlbumBaseExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof TrackObjectAlbum
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'release_date_precision': TrackObjectAlbumReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumBaseRestrictions}
     * @memberof TrackObjectAlbum
     */
    'restrictions'?: AlbumBaseRestrictions;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof TrackObjectAlbum
     */
    'total_tracks': number;
    /**
     * The object type. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'type': TrackObjectAlbumTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'uri': string;
    /**
     * The field is present when getting an artist\'s albums. Compare to album_type this field represents relationship between the artist and the album. 
     * @type {string}
     * @memberof TrackObjectAlbum
     */
    'album_group'?: TrackObjectAlbumAlbumGroupEnum;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof TrackObjectAlbum
     */
    'artists': Array<SimplifiedArtistObject>;
}

export const TrackObjectAlbumAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type TrackObjectAlbumAlbumTypeEnum = typeof TrackObjectAlbumAlbumTypeEnum[keyof typeof TrackObjectAlbumAlbumTypeEnum];
export const TrackObjectAlbumReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type TrackObjectAlbumReleaseDatePrecisionEnum = typeof TrackObjectAlbumReleaseDatePrecisionEnum[keyof typeof TrackObjectAlbumReleaseDatePrecisionEnum];
export const TrackObjectAlbumTypeEnum = {
    Album: 'album'
} as const;

export type TrackObjectAlbumTypeEnum = typeof TrackObjectAlbumTypeEnum[keyof typeof TrackObjectAlbumTypeEnum];
export const TrackObjectAlbumAlbumGroupEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation',
    AppearsOn: 'appears_on'
} as const;

export type TrackObjectAlbumAlbumGroupEnum = typeof TrackObjectAlbumAlbumGroupEnum[keyof typeof TrackObjectAlbumAlbumGroupEnum];

/**
 * Known external IDs for the track. 
 * @export
 * @interface TrackObjectExternalIds
 */
export interface TrackObjectExternalIds {
    /**
     * [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29) 
     * @type {string}
     * @memberof TrackObjectExternalIds
     */
    'ean'?: string;
    /**
     * [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code) 
     * @type {string}
     * @memberof TrackObjectExternalIds
     */
    'isrc'?: string;
    /**
     * [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code) 
     * @type {string}
     * @memberof TrackObjectExternalIds
     */
    'upc'?: string;
}
/**
 * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
 * @export
 * @interface TrackObjectLinkedFrom
 */
export interface TrackObjectLinkedFrom {
    /**
     * 
     * @type {LinkedTrackObjectExternalUrls}
     * @memberof TrackObjectLinkedFrom
     */
    'external_urls'?: LinkedTrackObjectExternalUrls;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof TrackObjectLinkedFrom
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObjectLinkedFrom
     */
    'id'?: string;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof TrackObjectLinkedFrom
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObjectLinkedFrom
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface TrackRestrictionObject
 */
export interface TrackRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof TrackRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface TransferAUsersPlaybackRequest
 */
export interface TransferAUsersPlaybackRequest {
    [key: string]: any;

    /**
     * A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_ 
     * @type {Array<string>}
     * @memberof TransferAUsersPlaybackRequest
     */
    'device_ids': Array<string>;
    /**
     * **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state. 
     * @type {boolean}
     * @memberof TransferAUsersPlaybackRequest
     */
    'play'?: boolean;
}
/**
 * 
 * @export
 * @interface TuneableTrackObject
 */
export interface TuneableTrackObject {
    /**
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'acousticness'?: number;
    /**
     * Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'danceability'?: number;
    /**
     * The duration of the track in milliseconds. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'duration_ms'?: number;
    /**
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'energy'?: number;
    /**
     * Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'instrumentalness'?: number;
    /**
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'key'?: number;
    /**
     * Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'liveness'?: number;
    /**
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'loudness'?: number;
    /**
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'mode'?: number;
    /**
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._ 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'popularity'?: number;
    /**
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'speechiness'?: number;
    /**
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'tempo'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'time_signature'?: number;
    /**
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 
     * @type {number}
     * @memberof TuneableTrackObject
     */
    'valence'?: number;
}
/**
 * 
 * @export
 * @interface UnfollowArtistsUsersRequest
 */
export interface UnfollowArtistsUsersRequest {
    [key: string]: any;

    /**
     * A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof UnfollowArtistsUsersRequest
     */
    'ids'?: Array<string>;
}

/**
 * AlbumsApi - axios parameter creator
 * @export
 */
export const AlbumsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAlbums', 'ids', ids)
            const localVarPath = `/me/albums/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbum: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbumsTracks', 'id', id)
            const localVarPath = `/albums/{id}/tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums: async (id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsAlbums', 'id', id)
            const localVarPath = `/artists/{id}/albums`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (includeGroups !== undefined) {
                localVarQueryParameter['include_groups'] = includeGroups;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAlbums: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleAlbums', 'ids', ids)
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleases: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/new-releases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums: async (limit?: number, offset?: number, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumsApi - functional programming interface
 * @export
 */
export const AlbumsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAlbums(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAlbums(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbum(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbum(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbumsTracks(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleAlbums(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleAlbums200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleAlbums(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewReleases(country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNewReleases200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewReleases(country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAlbums(limit, offset, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAlbumsUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAlbumsUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlbumsApi - factory interface
 * @export
 */
export const AlbumsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumsApiFp(configuration)
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAlbums(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbum(id: string, market?: string, options?: any): AxiosPromise<AlbumObject> {
            return localVarFp.getAnAlbum(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedTrackObject> {
            return localVarFp.getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedAlbumObject> {
            return localVarFp.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAlbums(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleAlbums200Response> {
            return localVarFp.getMultipleAlbums(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleases(country?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetNewReleases200Response> {
            return localVarFp.getNewReleases(country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: any): AxiosPromise<PagingSavedAlbumObject> {
            return localVarFp.getUsersSavedAlbums(limit, offset, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeAlbumsUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveAlbumsUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumsApi - object-oriented interface
 * @export
 * @class AlbumsApi
 * @extends {BaseAPI}
 */
export class AlbumsApi extends BaseAPI {
    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public checkUsersSavedAlbums(ids: string, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).checkUsersSavedAlbums(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single album. 
     * @summary Get Album 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnAlbum(id: string, market?: string, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnAlbum(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @summary Get Several Albums 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getMultipleAlbums(ids: string, market?: string, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getMultipleAlbums(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @summary Get New Releases 
     * @param {string} [country] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getNewReleases(country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getNewReleases(country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getUsersSavedAlbums(limit, offset, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).removeAlbumsUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).saveAlbumsUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ArtistsApi - axios parameter creator
 * @export
 */
export const ArtistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: 'artist' | 'user', ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtist: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtist', 'id', id)
            const localVarPath = `/artists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums: async (id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsAlbums', 'id', id)
            const localVarPath = `/artists/{id}/albums`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (includeGroups !== undefined) {
                localVarQueryParameter['include_groups'] = includeGroups;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsRelatedArtists: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsRelatedArtists', 'id', id)
            const localVarPath = `/artists/{id}/related-artists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsTopTracks', 'id', id)
            const localVarPath = `/artists/{id}/top-tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: 'artist', after?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleArtists: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleArtists', 'ids', ids)
            const localVarPath = `/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistsApi - functional programming interface
 * @export
 */
export const ArtistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtist(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtist(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsRelatedArtists(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleArtists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsRelatedArtists(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsTopTracks(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsTopTracks(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleArtists(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleArtists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleArtists(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingArtistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtists(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArtistsApi - factory interface
 * @export
 */
export const ArtistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistsApiFp(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtist(id: string, options?: any): AxiosPromise<ArtistObject> {
            return localVarFp.getAnArtist(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedAlbumObject> {
            return localVarFp.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsRelatedArtists(id: string, options?: any): AxiosPromise<GetMultipleArtists200Response> {
            return localVarFp.getAnArtistsRelatedArtists(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks(id: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getAnArtistsTopTracks(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: 'artist', after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleArtists(ids: string, options?: any): AxiosPromise<GetMultipleArtists200Response> {
            return localVarFp.getMultipleArtists(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingArtistObject> {
            return localVarFp.getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistsApi - object-oriented interface
 * @export
 * @class ArtistsApi
 * @extends {BaseAPI}
 */
export class ArtistsApi extends BaseAPI {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).followArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     * @summary Get Artist 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtist(id: string, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtist(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s [listening history](http://news.spotify.com/se/2010/02/03/related-artists/). 
     * @summary Get Artist\'s Related Artists 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsRelatedArtists(id: string, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsRelatedArtists(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsTopTracks(id: string, market?: string, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsTopTracks(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {'artist'} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     * @summary Get Several Artists 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getMultipleArtists(ids: string, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getMultipleArtists(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists based on calculated affinity. 
     * @summary Get User\'s Top Artists 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AudiobooksApi - axios parameter creator
 * @export
 */
export const AudiobooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAudiobooks', 'ids', ids)
            const localVarPath = `/me/audiobooks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single audiobook.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAudiobook: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAudiobook', 'id', id)
            const localVarPath = `/audiobooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudiobookChapters', 'id', id)
            const localVarPath = `/audiobooks/{id}/chapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAudiobooks: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleAudiobooks', 'ids', ids)
            const localVarPath = `/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudiobooksApi - functional programming interface
 * @export
 */
export const AudiobooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudiobooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAudiobooks(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAudiobooks(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single audiobook.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAudiobook(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAudiobook(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudiobookChapters(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleAudiobooks(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleAudiobooks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleAudiobooks(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAudiobooks(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAudiobooks(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAudiobooksUser(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAudiobooksUser(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAudiobooksUser(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAudiobooksUser(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudiobooksApi - factory interface
 * @export
 */
export const AudiobooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudiobooksApiFp(configuration)
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAudiobooks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single audiobook.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAudiobook(id: string, market?: string, options?: any): AxiosPromise<AudiobookObject> {
            return localVarFp.getAnAudiobook(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedChapterObject> {
            return localVarFp.getAudiobookChapters(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAudiobooks(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleAudiobooks200Response> {
            return localVarFp.getMultipleAudiobooks(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedAudiobookObject> {
            return localVarFp.getUsersSavedAudiobooks(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AudiobooksApi - object-oriented interface
 * @export
 * @class AudiobooksApi
 * @extends {BaseAPI}
 */
export class AudiobooksApi extends BaseAPI {
    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public checkUsersSavedAudiobooks(ids: string, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).checkUsersSavedAudiobooks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single audiobook.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get an Audiobook 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getAnAudiobook(id: string, market?: string, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getAnAudiobook(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getAudiobookChapters(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get Several Audiobooks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getMultipleAudiobooks(ids: string, market?: string, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getMultipleAudiobooks(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getUsersSavedAudiobooks(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getUsersSavedAudiobooks(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public removeAudiobooksUser(ids: string, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).removeAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public saveAudiobooksUser(ids: string, options?: AxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).saveAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists: async (categoryId: string, country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategoriesPlaylists', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}/playlists`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategory: async (categoryId: string, country?: string, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategory', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (country?: string, locale?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategoriesPlaylists(categoryId, country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategory(categoryId: string, country?: string, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategory(categoryId, country, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(country?: string, locale?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategories200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(country, locale, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getACategoriesPlaylists(categoryId, country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategory(categoryId: string, country?: string, locale?: string, options?: any): AxiosPromise<CategoryObject> {
            return localVarFp.getACategory(categoryId, country, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(country?: string, locale?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetCategories200Response> {
            return localVarFp.getCategories(country, locale, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {string} [country] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getACategoriesPlaylists(categoryId, country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Single Browse Category 
     * @param {string} categoryId 
     * @param {string} [country] 
     * @param {string} [locale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getACategory(categoryId: string, country?: string, locale?: string, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getACategory(categoryId, country, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Several Browse Categories 
     * @param {string} [country] 
     * @param {string} [locale] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(country?: string, locale?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategories(country, locale, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChaptersApi - axios parameter creator
 * @export
 */
export const ChaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Spotify catalog information for a single chapter.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAChapter: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAChapter', 'id', id)
            const localVarPath = `/chapters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudiobookChapters', 'id', id)
            const localVarPath = `/audiobooks/{id}/chapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralChapters: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralChapters', 'ids', ids)
            const localVarPath = `/chapters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChaptersApi - functional programming interface
 * @export
 */
export const ChaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Spotify catalog information for a single chapter.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAChapter(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAChapter(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudiobookChapters(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralChapters(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSeveralChapters200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralChapters(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChaptersApi - factory interface
 * @export
 */
export const ChaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChaptersApiFp(configuration)
    return {
        /**
         * Get Spotify catalog information for a single chapter.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAChapter(id: string, market?: string, options?: any): AxiosPromise<ChapterObject> {
            return localVarFp.getAChapter(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedChapterObject> {
            return localVarFp.getAudiobookChapters(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralChapters(ids: string, market?: string, options?: any): AxiosPromise<GetSeveralChapters200Response> {
            return localVarFp.getSeveralChapters(ids, market, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChaptersApi - object-oriented interface
 * @export
 * @class ChaptersApi
 * @extends {BaseAPI}
 */
export class ChaptersApi extends BaseAPI {
    /**
     * Get Spotify catalog information for a single chapter.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get a Chapter 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getAChapter(id: string, market?: string, options?: AxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getAChapter(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an audiobook\'s chapters.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getAudiobookChapters(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br /> **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Get Several Chapters 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getSeveralChapters(ids: string, market?: string, options?: AxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getSeveralChapters(ids, market, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EpisodesApi - axios parameter creator
 * @export
 */
export const EpisodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedEpisodes', 'ids', ids)
            const localVarPath = `/me/episodes/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShowsEpisodes', 'id', id)
            const localVarPath = `/shows/{id}/episodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnEpisode: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnEpisode', 'id', id)
            const localVarPath = `/episodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleEpisodes: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleEpisodes', 'ids', ids)
            const localVarPath = `/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes: async (market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read", "user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EpisodesApi - functional programming interface
 * @export
 */
export const EpisodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EpisodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedEpisodes(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedEpisodes(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShowsEpisodes(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnEpisode(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnEpisode(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleEpisodes(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleEpisodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleEpisodes(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedEpisodes(market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEpisodesUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEpisodesUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EpisodesApi - factory interface
 * @export
 */
export const EpisodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EpisodesApiFp(configuration)
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedEpisodes(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedEpisodeObject> {
            return localVarFp.getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnEpisode(id: string, market?: string, options?: any): AxiosPromise<EpisodeObject> {
            return localVarFp.getAnEpisode(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleEpisodes(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleEpisodes200Response> {
            return localVarFp.getMultipleEpisodes(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedEpisodeObject> {
            return localVarFp.getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeEpisodesUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveEpisodesUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EpisodesApi - object-oriented interface
 * @export
 * @class EpisodesApi
 * @extends {BaseAPI}
 */
export class EpisodesApi extends BaseAPI {
    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public checkUsersSavedEpisodes(ids: string, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).checkUsersSavedEpisodes(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @summary Get Episode 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getAnEpisode(id: string, market?: string, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getAnEpisode(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @summary Get Several Episodes 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getMultipleEpisodes(ids: string, market?: string, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getMultipleEpisodes(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).removeEpisodesUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).saveEpisodesUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GenresApi - axios parameter creator
 * @export
 */
export const GenresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationGenres: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recommendations/available-genre-seeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenresApi - functional programming interface
 * @export
 */
export const GenresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenresApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendationGenres(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRecommendationGenres200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendationGenres(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenresApi - factory interface
 * @export
 */
export const GenresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenresApiFp(configuration)
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationGenres(options?: any): AxiosPromise<GetRecommendationGenres200Response> {
            return localVarFp.getRecommendationGenres(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenresApi - object-oriented interface
 * @export
 * @class GenresApi
 * @extends {BaseAPI}
 */
export class GenresApi extends BaseAPI {
    /**
     * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
     * @summary Get Available Genre Seeds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    public getRecommendationGenres(options?: AxiosRequestConfig) {
        return GenresApiFp(this.configuration).getRecommendationGenres(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LibraryApi - axios parameter creator
 * @export
 */
export const LibraryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails: async (playlistId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('changePlaylistDetails', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: 'artist' | 'user', ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAlbums', 'ids', ids)
            const localVarPath = `/me/albums/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAudiobooks', 'ids', ids)
            const localVarPath = `/me/audiobooks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedEpisodes', 'ids', ids)
            const localVarPath = `/me/episodes/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedShows', 'ids', ids)
            const localVarPath = `/me/shows/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedTracks', 'ids', ids)
            const localVarPath = `/me/tracks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: async (userId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createPlaylist', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: 'artist', after?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums: async (limit?: number, offset?: number, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes: async (market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read", "user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks: async (market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser: async (ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveShowsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser: async (ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveShowsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LibraryApi - functional programming interface
 * @export
 */
export const LibraryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LibraryApiAxiosParamCreator(configuration)
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePlaylistDetails(playlistId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAlbums(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAlbums(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAudiobooks(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAudiobooks(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedEpisodes(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedEpisodes(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedShows(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedShows(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedTracks(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedTracks(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlaylist(userId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAListOfCurrentUsersPlaylists(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAlbums(limit, offset, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAudiobooks(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAudiobooks(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedEpisodes(market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedShows(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedShows(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedTracks(market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingArtistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtists(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopTracks(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAlbumsUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAudiobooksUser(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAudiobooksUser(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEpisodesUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeShowsUser(ids, market, saveShowsUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAlbumsUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAudiobooksUser(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAudiobooksUser(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEpisodesUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveShowsUser(ids, saveShowsUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveTracksUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LibraryApi - factory interface
 * @export
 */
export const LibraryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LibraryApiFp(configuration)
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.changePlaylistDetails(playlistId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAlbums(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAudiobooks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedEpisodes(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedShows(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedTracks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.createPlaylist(userId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: 'artist', after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: any): AxiosPromise<PagingSavedAlbumObject> {
            return localVarFp.getUsersSavedAlbums(limit, offset, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedAudiobookObject> {
            return localVarFp.getUsersSavedAudiobooks(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedEpisodeObject> {
            return localVarFp.getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedShowObject> {
            return localVarFp.getUsersSavedShows(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedTrackObject> {
            return localVarFp.getUsersSavedTracks(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingArtistObject> {
            return localVarFp.getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingTrackObject> {
            return localVarFp.getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeAlbumsUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeEpisodesUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeShowsUser(ids, market, saveShowsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeTracksUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveAlbumsUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveEpisodesUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveShowsUser(ids, saveShowsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveTracksUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LibraryApi - object-oriented interface
 * @export
 * @class LibraryApi
 * @extends {BaseAPI}
 */
export class LibraryApi extends BaseAPI {
    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).changePlaylistDetails(playlistId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedAlbums(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedAlbums(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedAudiobooks(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedAudiobooks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedEpisodes(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedEpisodes(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedShows(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedShows(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedTracks(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedTracks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).createPlaylist(userId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).followArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {'artist'} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedAlbums(limit, offset, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedAudiobooks(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedAudiobooks(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedShows(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedShows(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedTracks(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists based on calculated affinity. 
     * @summary Get User\'s Top Artists 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top tracks based on calculated affinity. 
     * @summary Get User\'s Top Tracks 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeAlbumsUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeAudiobooksUser(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeEpisodesUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeShowsUser(ids, market, saveShowsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeTracksUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveAlbumsUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveAlbumsUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveAudiobooksUser(ids: string, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveEpisodesUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveEpisodesUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveShowsUser(ids, saveShowsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveTracksUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return LibraryApiFp(this.configuration).unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MarketsApi - axios parameter creator
 * @export
 */
export const MarketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableMarkets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/markets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketsApi - functional programming interface
 * @export
 */
export const MarketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableMarkets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailableMarkets200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableMarkets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarketsApi - factory interface
 * @export
 */
export const MarketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketsApiFp(configuration)
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableMarkets(options?: any): AxiosPromise<GetAvailableMarkets200Response> {
            return localVarFp.getAvailableMarkets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketsApi - object-oriented interface
 * @export
 * @class MarketsApi
 * @extends {BaseAPI}
 */
export class MarketsApi extends BaseAPI {
    /**
     * Get the list of markets where Spotify is available. 
     * @summary Get Available Markets 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketsApi
     */
    public getAvailableMarkets(options?: AxiosRequestConfig) {
        return MarketsApiFp(this.configuration).getAvailableMarkets(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToQueue: async (uri: string, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uri' is not null or undefined
            assertParamExists('addToQueue', 'uri', uri)
            const localVarPath = `/me/player/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a user’s available devices. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAUsersAvailableDevices: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-state"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationAboutTheUsersCurrentPlayback: async (market?: string, additionalTypes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-state"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-state"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyPlayed: async (limit?: number, after?: number, before?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/recently-played`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-recently-played"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheUsersCurrentlyPlayingTrack: async (market?: string, additionalTypes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/currently-playing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-currently-playing"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause playback on the user\'s account. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAUsersPlayback: async (deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Seeks to the given position in the user’s currently playing track. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seekToPositionInCurrentlyPlayingTrack: async (positionMs: number, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionMs' is not null or undefined
            assertParamExists('seekToPositionInCurrentlyPlayingTrack', 'positionMs', positionMs)
            const localVarPath = `/me/player/seek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (positionMs !== undefined) {
                localVarQueryParameter['position_ms'] = positionMs;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the repeat mode for the user\'s playback. Options are repeat-track, repeat-context, and off. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepeatModeOnUsersPlayback: async (state: string, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('setRepeatModeOnUsersPlayback', 'state', state)
            const localVarPath = `/me/player/repeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the volume for the user’s current playback device. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVolumeForUsersPlayback: async (volumePercent: number, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'volumePercent' is not null or undefined
            assertParamExists('setVolumeForUsersPlayback', 'volumePercent', volumePercent)
            const localVarPath = `/me/player/volume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (volumePercent !== undefined) {
                localVarQueryParameter['volume_percent'] = volumePercent;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Skips to next track in the user’s queue. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToNextTrack: async (deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/next`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Skips to previous track in the user’s queue. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToPreviousTrack: async (deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/previous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAUsersPlayback: async (deviceId?: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/play`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle shuffle on or off for user’s playback. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleShuffleForUsersPlayback: async (state: boolean, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('toggleShuffleForUsersPlayback', 'state', state)
            const localVarPath = `/me/player/shuffle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer playback to a new device and determine if it should start playing. 
         * @summary Transfer Playback 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAUsersPlayback: async (requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToQueue(uri: string, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToQueue(uri, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a user’s available devices. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAUsersAvailableDevices(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAUsersAvailableDevices(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentlyPlayingContextObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueue(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueueObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueue(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CursorPagingPlayHistoryObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentlyPlayed(limit, after, before, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentlyPlayingObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pause playback on the user\'s account. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseAUsersPlayback(deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseAUsersPlayback(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Seeks to the given position in the user’s currently playing track. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the repeat mode for the user\'s playback. Options are repeat-track, repeat-context, and off. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRepeatModeOnUsersPlayback(state, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the volume for the user’s current playback device. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setVolumeForUsersPlayback(volumePercent, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Skips to next track in the user’s queue. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipUsersPlaybackToNextTrack(deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipUsersPlaybackToNextTrack(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Skips to previous track in the user’s queue. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipUsersPlaybackToPreviousTrack(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAUsersPlayback(deviceId?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAUsersPlayback(deviceId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle shuffle on or off for user’s playback. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleShuffleForUsersPlayback(state, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transfer playback to a new device and determine if it should start playing. 
         * @summary Transfer Playback 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferAUsersPlayback(requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferAUsersPlayback(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerApiFp(configuration)
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToQueue(uri: string, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addToQueue(uri, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a user’s available devices. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAUsersAvailableDevices(options?: any): AxiosPromise<DevicesObject> {
            return localVarFp.getAUsersAvailableDevices(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: any): AxiosPromise<CurrentlyPlayingContextObject> {
            return localVarFp.getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue(options?: any): AxiosPromise<QueueObject> {
            return localVarFp.getQueue(options).then((request) => request(axios, basePath));
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: any): AxiosPromise<CursorPagingPlayHistoryObject> {
            return localVarFp.getRecentlyPlayed(limit, after, before, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: any): AxiosPromise<CurrentlyPlayingObject> {
            return localVarFp.getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause playback on the user\'s account. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAUsersPlayback(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.pauseAUsersPlayback(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Seeks to the given position in the user’s currently playing track. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the repeat mode for the user\'s playback. Options are repeat-track, repeat-context, and off. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setRepeatModeOnUsersPlayback(state, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the volume for the user’s current playback device. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setVolumeForUsersPlayback(volumePercent, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Skips to next track in the user’s queue. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToNextTrack(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.skipUsersPlaybackToNextTrack(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Skips to previous track in the user’s queue. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.skipUsersPlaybackToPreviousTrack(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAUsersPlayback(deviceId?: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.startAUsersPlayback(deviceId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle shuffle on or off for user’s playback. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.toggleShuffleForUsersPlayback(state, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer playback to a new device and determine if it should start playing. 
         * @summary Transfer Playback 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAUsersPlayback(requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.transferAUsersPlayback(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * Add an item to the end of the user\'s current playback queue. 
     * @summary Add Item to Playback Queue 
     * @param {string} uri 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public addToQueue(uri: string, deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).addToQueue(uri, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a user’s available devices. 
     * @summary Get Available Devices 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getAUsersAvailableDevices(options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getAUsersAvailableDevices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     * @summary Get Playback State 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of objects that make up the user\'s queue. 
     * @summary Get the User\'s Queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getQueue(options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getQueue(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
     * @summary Get Recently Played Tracks 
     * @param {number} [limit] 
     * @param {number} [after] 
     * @param {number} [before] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getRecentlyPlayed(limit, after, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the object currently being played on the user\'s Spotify account. 
     * @summary Get Currently Playing Track 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause playback on the user\'s account. 
     * @summary Pause Playback 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public pauseAUsersPlayback(deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).pauseAUsersPlayback(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Seeks to the given position in the user’s currently playing track. 
     * @summary Seek To Position 
     * @param {number} positionMs 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the repeat mode for the user\'s playback. Options are repeat-track, repeat-context, and off. 
     * @summary Set Repeat Mode 
     * @param {string} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).setRepeatModeOnUsersPlayback(state, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the volume for the user’s current playback device. 
     * @summary Set Playback Volume 
     * @param {number} volumePercent 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).setVolumeForUsersPlayback(volumePercent, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Skips to next track in the user’s queue. 
     * @summary Skip To Next 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public skipUsersPlaybackToNextTrack(deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).skipUsersPlaybackToNextTrack(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Skips to previous track in the user’s queue. 
     * @summary Skip To Previous 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).skipUsersPlaybackToPreviousTrack(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new context or resume current playback on the user\'s active device. 
     * @summary Start/Resume Playback 
     * @param {string} [deviceId] 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public startAUsersPlayback(deviceId?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).startAUsersPlayback(deviceId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle shuffle on or off for user’s playback. 
     * @summary Toggle Playback Shuffle 
     * @param {boolean} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).toggleShuffleForUsersPlayback(state, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer playback to a new device and determine if it should start playing. 
     * @summary Transfer Playback 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public transferAUsersPlayback(requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlayerApiFp(this.configuration).transferAUsersPlayback(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export const PlaylistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist: async (playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('addTracksToPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails: async (playlistId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('changePlaylistDetails', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist: async (playlistId: string, ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'playlistId', playlistId)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'ids', ids)
            const localVarPath = `/playlists/{playlist_id}/followers/contains`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: async (userId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createPlaylist', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist: async (playlistId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('followPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists: async (categoryId: string, country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategoriesPlaylists', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}/playlists`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {string} [timestamp] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedPlaylists: async (country?: string, locale?: string, timestamp?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/featured-playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists: async (userId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getListUsersPlaylists', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private", "playlist-read-collaborative"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylist: async (playlistId: string, market?: string, fields?: string, additionalTypes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistCover: async (playlistId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistCover', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/images`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks: async (playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist: async (playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('removeTracksPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeTracksPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks: async (playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('reorderOrReplacePlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist: async (playlistId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('unfollowPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomPlaylistCover: async (playlistId: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('uploadCustomPlaylistCover', 'playlistId', playlistId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('uploadCustomPlaylistCover', 'body', body)
            const localVarPath = `/playlists/{playlist_id}/images`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["ugc-image-upload", "playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/jpeg';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export const PlaylistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaylistsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTracksToPlaylist(playlistId, position, uris, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePlaylistDetails(playlistId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfUserFollowsPlaylist(playlistId, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlaylist(userId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPlaylist(playlistId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategoriesPlaylists(categoryId, country, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAListOfCurrentUsersPlaylists(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {string} [timestamp] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedPlaylists(country?: string, locale?: string, timestamp?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeaturedPlaylists(country, locale, timestamp, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListUsersPlaylists(userId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylist(playlistId, market, fields, additionalTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistCover(playlistId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageObject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistCover(playlistId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowPlaylist(playlistId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowPlaylist(playlistId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCustomPlaylistCover(playlistId: string, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCustomPlaylistCover(playlistId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlaylistsApi - factory interface
 * @export
 */
export const PlaylistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaylistsApiFp(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.addTracksToPlaylist(playlistId, position, uris, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.changePlaylistDetails(playlistId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.createPlaylist(userId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.followPlaylist(playlistId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {string} [country] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getACategoriesPlaylists(categoryId, country, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [country] 
         * @param {string} [locale] 
         * @param {string} [timestamp] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedPlaylists(country?: string, locale?: string, timestamp?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getFeaturedPlaylists(country, locale, timestamp, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getListUsersPlaylists(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.getPlaylist(playlistId, market, fields, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistCover(playlistId: string, options?: any): AxiosPromise<Array<ImageObject>> {
            return localVarFp.getPlaylistCover(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: any): AxiosPromise<PagingPlaylistTrackObject> {
            return localVarFp.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist(playlistId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowPlaylist(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomPlaylistCover(playlistId: string, body: string, options?: any): AxiosPromise<void> {
            return localVarFp.uploadCustomPlaylistCover(playlistId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export class PlaylistsApi extends BaseAPI {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).addTracksToPlaylist(playlistId, position, uris, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public changePlaylistDetails(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).changePlaylistDetails(playlistId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public createPlaylist(userId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).createPlaylist(userId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).followPlaylist(playlistId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {string} [country] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getACategoriesPlaylists(categoryId: string, country?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getACategoriesPlaylists(categoryId, country, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
     * @summary Get Featured Playlists 
     * @param {string} [country] 
     * @param {string} [locale] 
     * @param {string} [timestamp] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getFeaturedPlaylists(country?: string, locale?: string, timestamp?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getFeaturedPlaylists(country, locale, timestamp, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getListUsersPlaylists(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a playlist owned by a Spotify user. 
     * @summary Get Playlist 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylist(playlistId, market, fields, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current image associated with a specific playlist. 
     * @summary Get Playlist Cover Image 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylistCover(playlistId: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylistCover(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public unfollowPlaylist(playlistId: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).unfollowPlaylist(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace the image used to represent a specific playlist. 
     * @summary Add Custom Playlist Cover Image 
     * @param {string} playlistId 
     * @param {string} body The new cover image of the playlist as a Base64 encoded JPEG image. Maximum payload size is 256KB.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public uploadCustomPlaylistCover(playlistId: string, body: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).uploadCustomPlaylistCover(playlistId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'audio'} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (q: string, type: Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>, market?: string, limit?: number, offset?: number, includeExternal?: 'audio', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('search', 'q', q)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('search', 'type', type)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type) {
                localVarQueryParameter['type'] = type.join(COLLECTION_FORMATS.csv);
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (includeExternal !== undefined) {
                localVarQueryParameter['include_external'] = includeExternal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'audio'} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(q: string, type: Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>, market?: string, limit?: number, offset?: number, includeExternal?: 'audio', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(q, type, market, limit, offset, includeExternal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'audio'} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(q: string, type: Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>, market?: string, limit?: number, offset?: number, includeExternal?: 'audio', options?: any): AxiosPromise<Search200Response> {
            return localVarFp.search(q, type, market, limit, offset, includeExternal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string.<br /> **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.** 
     * @summary Search for Item 
     * @param {string} q 
     * @param {Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>} type 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {'audio'} [includeExternal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public search(q: string, type: Array<'album' | 'artist' | 'playlist' | 'track' | 'show' | 'episode' | 'audiobook'>, market?: string, limit?: number, offset?: number, includeExternal?: 'audio', options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).search(q, type, market, limit, offset, includeExternal, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShowsApi - axios parameter creator
 * @export
 */
export const ShowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedShows', 'ids', ids)
            const localVarPath = `/me/shows/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShow: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShow', 'id', id)
            const localVarPath = `/shows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShowsEpisodes', 'id', id)
            const localVarPath = `/shows/{id}/episodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleShows: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleShows', 'ids', ids)
            const localVarPath = `/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser: async (ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveShowsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser: async (ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveShowsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowsApi - functional programming interface
 * @export
 */
export const ShowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedShows(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedShows(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShow(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShow(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShowsEpisodes(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleShows(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleShows200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleShows(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedShows(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedShows(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeShowsUser(ids, market, saveShowsUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveShowsUser(ids, saveShowsUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowsApi - factory interface
 * @export
 */
export const ShowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowsApiFp(configuration)
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedShows(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShow(id: string, market?: string, options?: any): AxiosPromise<ShowObject> {
            return localVarFp.getAShow(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedEpisodeObject> {
            return localVarFp.getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleShows(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleShows200Response> {
            return localVarFp.getMultipleShows(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedShowObject> {
            return localVarFp.getUsersSavedShows(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeShowsUser(ids, market, saveShowsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveShowsUser(ids, saveShowsUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowsApi - object-oriented interface
 * @export
 * @class ShowsApi
 * @extends {BaseAPI}
 */
export class ShowsApi extends BaseAPI {
    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public checkUsersSavedShows(ids: string, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).checkUsersSavedShows(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
     * @summary Get Show 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getAShow(id: string, market?: string, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getAShow(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several shows based on their Spotify IDs. 
     * @summary Get Several Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getMultipleShows(ids: string, market?: string, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getMultipleShows(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getUsersSavedShows(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getUsersSavedShows(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public removeShowsUser(ids: string, market?: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).removeShowsUser(ids, market, saveShowsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {SaveShowsUserRequest} [saveShowsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public saveShowsUser(ids: string, saveShowsUserRequest?: SaveShowsUserRequest, options?: AxiosRequestConfig) {
        return ShowsApiFp(this.configuration).saveShowsUser(ids, saveShowsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TracksApi - axios parameter creator
 * @export
 */
export const TracksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist: async (playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('addTracksToPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedTracks', 'ids', ids)
            const localVarPath = `/me/tracks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks: async (id: string, market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbumsTracks', 'id', id)
            const localVarPath = `/albums/{id}/tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsTopTracks', 'id', id)
            const localVarPath = `/artists/{id}/top-tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioAnalysis: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudioAnalysis', 'id', id)
            const localVarPath = `/audio-analysis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFeatures: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudioFeatures', 'id', id)
            const localVarPath = `/audio-features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks: async (playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {string} [seedArtists] 
         * @param {string} [seedGenres] 
         * @param {string} [seedTracks] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations: async (limit?: number, market?: string, seedArtists?: string, seedGenres?: string, seedTracks?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (seedArtists !== undefined) {
                localVarQueryParameter['seed_artists'] = seedArtists;
            }

            if (seedGenres !== undefined) {
                localVarQueryParameter['seed_genres'] = seedGenres;
            }

            if (seedTracks !== undefined) {
                localVarQueryParameter['seed_tracks'] = seedTracks;
            }

            if (minAcousticness !== undefined) {
                localVarQueryParameter['min_acousticness'] = minAcousticness;
            }

            if (maxAcousticness !== undefined) {
                localVarQueryParameter['max_acousticness'] = maxAcousticness;
            }

            if (targetAcousticness !== undefined) {
                localVarQueryParameter['target_acousticness'] = targetAcousticness;
            }

            if (minDanceability !== undefined) {
                localVarQueryParameter['min_danceability'] = minDanceability;
            }

            if (maxDanceability !== undefined) {
                localVarQueryParameter['max_danceability'] = maxDanceability;
            }

            if (targetDanceability !== undefined) {
                localVarQueryParameter['target_danceability'] = targetDanceability;
            }

            if (minDurationMs !== undefined) {
                localVarQueryParameter['min_duration_ms'] = minDurationMs;
            }

            if (maxDurationMs !== undefined) {
                localVarQueryParameter['max_duration_ms'] = maxDurationMs;
            }

            if (targetDurationMs !== undefined) {
                localVarQueryParameter['target_duration_ms'] = targetDurationMs;
            }

            if (minEnergy !== undefined) {
                localVarQueryParameter['min_energy'] = minEnergy;
            }

            if (maxEnergy !== undefined) {
                localVarQueryParameter['max_energy'] = maxEnergy;
            }

            if (targetEnergy !== undefined) {
                localVarQueryParameter['target_energy'] = targetEnergy;
            }

            if (minInstrumentalness !== undefined) {
                localVarQueryParameter['min_instrumentalness'] = minInstrumentalness;
            }

            if (maxInstrumentalness !== undefined) {
                localVarQueryParameter['max_instrumentalness'] = maxInstrumentalness;
            }

            if (targetInstrumentalness !== undefined) {
                localVarQueryParameter['target_instrumentalness'] = targetInstrumentalness;
            }

            if (minKey !== undefined) {
                localVarQueryParameter['min_key'] = minKey;
            }

            if (maxKey !== undefined) {
                localVarQueryParameter['max_key'] = maxKey;
            }

            if (targetKey !== undefined) {
                localVarQueryParameter['target_key'] = targetKey;
            }

            if (minLiveness !== undefined) {
                localVarQueryParameter['min_liveness'] = minLiveness;
            }

            if (maxLiveness !== undefined) {
                localVarQueryParameter['max_liveness'] = maxLiveness;
            }

            if (targetLiveness !== undefined) {
                localVarQueryParameter['target_liveness'] = targetLiveness;
            }

            if (minLoudness !== undefined) {
                localVarQueryParameter['min_loudness'] = minLoudness;
            }

            if (maxLoudness !== undefined) {
                localVarQueryParameter['max_loudness'] = maxLoudness;
            }

            if (targetLoudness !== undefined) {
                localVarQueryParameter['target_loudness'] = targetLoudness;
            }

            if (minMode !== undefined) {
                localVarQueryParameter['min_mode'] = minMode;
            }

            if (maxMode !== undefined) {
                localVarQueryParameter['max_mode'] = maxMode;
            }

            if (targetMode !== undefined) {
                localVarQueryParameter['target_mode'] = targetMode;
            }

            if (minPopularity !== undefined) {
                localVarQueryParameter['min_popularity'] = minPopularity;
            }

            if (maxPopularity !== undefined) {
                localVarQueryParameter['max_popularity'] = maxPopularity;
            }

            if (targetPopularity !== undefined) {
                localVarQueryParameter['target_popularity'] = targetPopularity;
            }

            if (minSpeechiness !== undefined) {
                localVarQueryParameter['min_speechiness'] = minSpeechiness;
            }

            if (maxSpeechiness !== undefined) {
                localVarQueryParameter['max_speechiness'] = maxSpeechiness;
            }

            if (targetSpeechiness !== undefined) {
                localVarQueryParameter['target_speechiness'] = targetSpeechiness;
            }

            if (minTempo !== undefined) {
                localVarQueryParameter['min_tempo'] = minTempo;
            }

            if (maxTempo !== undefined) {
                localVarQueryParameter['max_tempo'] = maxTempo;
            }

            if (targetTempo !== undefined) {
                localVarQueryParameter['target_tempo'] = targetTempo;
            }

            if (minTimeSignature !== undefined) {
                localVarQueryParameter['min_time_signature'] = minTimeSignature;
            }

            if (maxTimeSignature !== undefined) {
                localVarQueryParameter['max_time_signature'] = maxTimeSignature;
            }

            if (targetTimeSignature !== undefined) {
                localVarQueryParameter['target_time_signature'] = targetTimeSignature;
            }

            if (minValence !== undefined) {
                localVarQueryParameter['min_valence'] = minValence;
            }

            if (maxValence !== undefined) {
                localVarQueryParameter['max_valence'] = maxValence;
            }

            if (targetValence !== undefined) {
                localVarQueryParameter['target_valence'] = targetValence;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralAudioFeatures: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralAudioFeatures', 'ids', ids)
            const localVarPath = `/audio-features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralTracks: async (ids: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralTracks', 'ids', ids)
            const localVarPath = `/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrack: async (id: string, market?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrack', 'id', id)
            const localVarPath = `/tracks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks: async (market?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist: async (playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('removeTracksPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeTracksPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks: async (playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('reorderOrReplacePlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser: async (ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TracksApi - functional programming interface
 * @export
 */
export const TracksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TracksApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTracksToPlaylist(playlistId, position, uris, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedTracks(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedTracks(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbumsTracks(id, market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsTopTracks(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsTopTracks(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioAnalysis(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioAnalysisObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioAnalysis(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFeatures(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioFeaturesObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFeatures(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {string} [seedArtists] 
         * @param {string} [seedGenres] 
         * @param {string} [seedTracks] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendations(limit?: number, market?: string, seedArtists?: string, seedGenres?: string, seedTracks?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationsObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendations(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralAudioFeatures(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSeveralAudioFeatures200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralAudioFeatures(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralTracks(ids: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralTracks(ids, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrack(id: string, market?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrack(id, market, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedTracks(market, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopTracks(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveTracksUser(ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TracksApi - factory interface
 * @export
 */
export const TracksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TracksApiFp(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.addTracksToPlaylist(playlistId, position, uris, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedTracks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedTrackObject> {
            return localVarFp.getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks(id: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getAnArtistsTopTracks(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioAnalysis(id: string, options?: any): AxiosPromise<AudioAnalysisObject> {
            return localVarFp.getAudioAnalysis(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFeatures(id: string, options?: any): AxiosPromise<AudioFeaturesObject> {
            return localVarFp.getAudioFeatures(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: any): AxiosPromise<PagingPlaylistTrackObject> {
            return localVarFp.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {string} [seedArtists] 
         * @param {string} [seedGenres] 
         * @param {string} [seedTracks] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations(limit?: number, market?: string, seedArtists?: string, seedGenres?: string, seedTracks?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: any): AxiosPromise<RecommendationsObject> {
            return localVarFp.getRecommendations(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralAudioFeatures(ids: string, options?: any): AxiosPromise<GetSeveralAudioFeatures200Response> {
            return localVarFp.getSeveralAudioFeatures(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralTracks(ids: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getSeveralTracks(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrack(id: string, market?: string, options?: any): AxiosPromise<TrackObject> {
            return localVarFp.getTrack(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedTrackObject> {
            return localVarFp.getUsersSavedTracks(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingTrackObject> {
            return localVarFp.getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.removeTracksUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.saveTracksUser(ids, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TracksApi - object-oriented interface
 * @export
 * @class TracksApi
 * @extends {BaseAPI}
 */
export class TracksApi extends BaseAPI {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public addTracksToPlaylist(playlistId: string, position?: number, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).addTracksToPlaylist(playlistId, position, uris, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public checkUsersSavedTracks(ids: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).checkUsersSavedTracks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAnArtistsTopTracks(id: string, market?: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAnArtistsTopTracks(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @summary Get Track\'s Audio Analysis 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAudioAnalysis(id: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAudioAnalysis(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @summary Get Track\'s Audio Features 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAudioFeatures(id: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAudioFeatures(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @summary Get Recommendations 
     * @param {number} [limit] 
     * @param {string} [market] 
     * @param {string} [seedArtists] 
     * @param {string} [seedGenres] 
     * @param {string} [seedTracks] 
     * @param {number} [minAcousticness] 
     * @param {number} [maxAcousticness] 
     * @param {number} [targetAcousticness] 
     * @param {number} [minDanceability] 
     * @param {number} [maxDanceability] 
     * @param {number} [targetDanceability] 
     * @param {number} [minDurationMs] 
     * @param {number} [maxDurationMs] 
     * @param {number} [targetDurationMs] 
     * @param {number} [minEnergy] 
     * @param {number} [maxEnergy] 
     * @param {number} [targetEnergy] 
     * @param {number} [minInstrumentalness] 
     * @param {number} [maxInstrumentalness] 
     * @param {number} [targetInstrumentalness] 
     * @param {number} [minKey] 
     * @param {number} [maxKey] 
     * @param {number} [targetKey] 
     * @param {number} [minLiveness] 
     * @param {number} [maxLiveness] 
     * @param {number} [targetLiveness] 
     * @param {number} [minLoudness] 
     * @param {number} [maxLoudness] 
     * @param {number} [targetLoudness] 
     * @param {number} [minMode] 
     * @param {number} [maxMode] 
     * @param {number} [targetMode] 
     * @param {number} [minPopularity] 
     * @param {number} [maxPopularity] 
     * @param {number} [targetPopularity] 
     * @param {number} [minSpeechiness] 
     * @param {number} [maxSpeechiness] 
     * @param {number} [targetSpeechiness] 
     * @param {number} [minTempo] 
     * @param {number} [maxTempo] 
     * @param {number} [targetTempo] 
     * @param {number} [minTimeSignature] 
     * @param {number} [maxTimeSignature] 
     * @param {number} [targetTimeSignature] 
     * @param {number} [minValence] 
     * @param {number} [maxValence] 
     * @param {number} [targetValence] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getRecommendations(limit?: number, market?: string, seedArtists?: string, seedGenres?: string, seedTracks?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getRecommendations(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @summary Get Tracks\' Audio Features 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getSeveralAudioFeatures(ids: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getSeveralAudioFeatures(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @summary Get Several Tracks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getSeveralTracks(ids: string, market?: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getSeveralTracks(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @summary Get Track 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getTrack(id: string, market?: string, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getTrack(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getUsersSavedTracks(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top tracks based on calculated affinity. 
     * @summary Get User\'s Top Tracks 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public removeTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).removeTracksUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public saveTracksUser(ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return TracksApiFp(this.configuration).saveTracksUser(ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: 'artist' | 'user', ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist: async (playlistId: string, ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'playlistId', playlistId)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'ids', ids)
            const localVarPath = `/playlists/{playlist_id}/followers/contains`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist: async (playlistId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('followPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUsersProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-private", "user-read-email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: 'artist', after?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists: async (userId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getListUsersPlaylists', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private", "playlist-read-collaborative"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUsersProfile', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks: async (timeRange?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/top/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist: async (playlistId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('unfollowPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfUserFollowsPlaylist(playlistId, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPlaylist(playlistId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUsersProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUserObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUsersProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListUsersPlaylists(userId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersProfile(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUserObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersProfile(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingArtistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtists(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopTracks(timeRange, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowPlaylist(playlistId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowPlaylist(playlistId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.followPlaylist(playlistId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUsersProfile(options?: any): AxiosPromise<PrivateUserObject> {
            return localVarFp.getCurrentUsersProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {'artist'} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: 'artist', after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getListUsersPlaylists(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersProfile(userId: string, options?: any): AxiosPromise<PublicUserObject> {
            return localVarFp.getUsersProfile(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists based on calculated affinity. 
         * @summary Get User\'s Top Artists 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingArtistObject> {
            return localVarFp.getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top tracks based on calculated affinity. 
         * @summary Get User\'s Top Tracks 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingTrackObject> {
            return localVarFp.getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {'artist' | 'user'} type 
         * @param {string} ids 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist(playlistId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowPlaylist(playlistId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public checkCurrentUserFollows(type: 'artist' | 'user', ids: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public followArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).followArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public followPlaylist(playlistId: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).followPlaylist(playlistId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed profile information about the current user (including the current user\'s username). 
     * @summary Get Current User\'s Profile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUsersProfile(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUsersProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {'artist'} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getFollowed(type: 'artist', after?: string, limit?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getListUsersPlaylists(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get public profile information about a Spotify user. 
     * @summary Get User\'s Profile 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersProfile(userId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersProfile(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists based on calculated affinity. 
     * @summary Get User\'s Top Artists 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersTopArtists(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersTopArtists(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top tracks based on calculated affinity. 
     * @summary Get User\'s Top Tracks 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersTopTracks(timeRange?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersTopTracks(timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {'artist' | 'user'} type 
     * @param {string} ids 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public unfollowArtistsUsers(type: 'artist' | 'user', ids: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).unfollowArtistsUsers(type, ids, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public unfollowPlaylist(playlistId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).unfollowPlaylist(playlistId, options).then((request) => request(this.axios, this.basePath));
    }
}


