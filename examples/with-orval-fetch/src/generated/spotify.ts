/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.2.27
 */
import { customInstance } from '../custom-instance';
import type { BodyType } from '../custom-instance';
export type CreatePlaylistBody = {
  /** Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
 */
  collaborative?: boolean;
  /** value for playlist description as displayed in Spotify Clients and in the Web API.
 */
  description?: string;
  /** The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
 */
  name: string;
  /** Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)
 */
  public?: boolean;
  [key: string]: any;
 };

export type GetListUsersPlaylistsParams = {
limit?: QueryLimitParameter;
offset?: number;
};

export type GetTrackParams = {
market?: QueryMarketParameter;
};

export type GetSeveralTracksParams = {
market?: QueryMarketParameter;
ids: QueryTrackIdsParameter;
};

export type GetAShowsEpisodesParams = {
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetAShowParams = {
market?: QueryMarketParameter;
};

export type GetMultipleShowsParams = {
market?: QueryMarketParameter;
ids: QueryShowIdsParameter;
};

export type SearchIncludeExternal = typeof SearchIncludeExternal[keyof typeof SearchIncludeExternal];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchIncludeExternal = {
  audio: 'audio',
} as const;

export type SearchTypeItem = typeof SearchTypeItem[keyof typeof SearchTypeItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchTypeItem = {
  album: 'album',
  artist: 'artist',
  playlist: 'playlist',
  track: 'track',
  show: 'show',
  episode: 'episode',
  audiobook: 'audiobook',
} as const;

export type SearchParams = {
q: string;
type: SearchTypeItem[];
market?: QueryMarketParameter;
limit?: number;
offset?: number;
include_external?: SearchIncludeExternal;
};

export type GetRecommendationsParams = {
limit?: number;
market?: QueryMarketParameter;
seed_artists?: string;
seed_genres?: string;
seed_tracks?: string;
min_acousticness?: number;
max_acousticness?: number;
target_acousticness?: number;
min_danceability?: number;
max_danceability?: number;
target_danceability?: number;
min_duration_ms?: number;
max_duration_ms?: number;
target_duration_ms?: number;
min_energy?: number;
max_energy?: number;
target_energy?: number;
min_instrumentalness?: number;
max_instrumentalness?: number;
target_instrumentalness?: number;
min_key?: number;
max_key?: number;
target_key?: number;
min_liveness?: number;
max_liveness?: number;
target_liveness?: number;
min_loudness?: number;
max_loudness?: number;
target_loudness?: number;
min_mode?: number;
max_mode?: number;
target_mode?: number;
min_popularity?: number;
max_popularity?: number;
target_popularity?: number;
min_speechiness?: number;
max_speechiness?: number;
target_speechiness?: number;
min_tempo?: number;
max_tempo?: number;
target_tempo?: number;
min_time_signature?: number;
max_time_signature?: number;
target_time_signature?: number;
min_valence?: number;
max_valence?: number;
target_valence?: number;
};

export type ReorderOrReplacePlaylistsTracksBody = {
  /** The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.
 */
  insert_before?: number;
  /** The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.
 */
  range_length?: number;
  /** The position of the first item to be reordered.
 */
  range_start?: number;
  /** The playlist's snapshot ID against which you want to make the changes.
 */
  snapshot_id?: string;
  uris?: string[];
  [key: string]: any;
 };

export type ReorderOrReplacePlaylistsTracksParams = {
uris?: string;
};

export type AddTracksToPlaylistBody = {
  /** The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
 */
  position?: number;
  /** A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._
 */
  uris?: string[];
  [key: string]: any;
 };

export type AddTracksToPlaylistParams = {
position?: number;
uris?: string;
};

export type GetPlaylistsTracksParams = {
market?: QueryMarketParameter;
fields?: string;
limit?: number;
offset?: QueryOffsetParameter;
additional_types?: QueryAdditionalTypesParameter;
};

export type RemoveTracksPlaylistBodyTracksItem = {
  /** Spotify URI */
  uri?: string;
};

export type RemoveTracksPlaylistBody = {
  /** The playlist's snapshot ID against which you want to make the changes.
The API will validate that the specified items exist and in the specified positions and make the changes,
even if more recent changes have been made to the playlist.
 */
  snapshot_id?: string;
  /** An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
 */
  tracks: RemoveTracksPlaylistBodyTracksItem[];
};

export type CheckIfUserFollowsPlaylistParams = {
ids: string;
};

export type FollowPlaylistBody = {
  /** Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.
 */
  public?: boolean;
  [key: string]: any;
 };

export type ChangePlaylistDetailsBody = {
  /** If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
_**Note**: You can only set `collaborative` to `true` on non-public playlists._
 */
  collaborative?: boolean;
  /** Value for playlist description as displayed in Spotify Clients and in the Web API.
 */
  description?: string;
  /** The new name for the playlist, for example `"My New Playlist Title"`
 */
  name?: string;
  /** If `true` the playlist will be public, if `false` it will be private.
 */
  public?: boolean;
  [key: string]: any;
 };

export type GetPlaylistParams = {
market?: QueryMarketParameter;
fields?: string;
additional_types?: QueryAdditionalTypesParameter;
};

export type CheckUsersSavedTracksParams = {
ids: QueryTrackIdsParameter;
};

export type SaveTracksUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids: string[];
  [key: string]: any;
 };

export type SaveTracksUserParams = {
ids: QueryTrackIdsParameter;
};

export type GetUsersSavedTracksParams = {
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type RemoveTracksUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids?: string[];
  [key: string]: any;
 };

export type RemoveTracksUserParams = {
ids: QueryTrackIdsParameter;
};

export type GetUsersTopTracksParams = {
time_range?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetUsersTopArtistsParams = {
time_range?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type CheckUsersSavedShowsParams = {
ids: QueryShowIdsParameter;
};

export type SaveShowsUserBody = {
  /** A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).  
A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.* */
  ids?: string[];
};

export type SaveShowsUserParams = {
ids: QueryShowIdsParameter;
};

export type GetUsersSavedShowsParams = {
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type RemoveShowsUserBody = {
  /** A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).  
A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.* */
  ids?: string[];
};

export type RemoveShowsUserParams = {
ids: QueryShowIdsParameter;
market?: QueryMarketParameter;
};

export type GetAListOfCurrentUsersPlaylistsParams = {
limit?: QueryLimitParameter;
offset?: number;
};

export type SetVolumeForUsersPlaybackParams = {
volume_percent: number;
device_id?: string;
};

export type ToggleShuffleForUsersPlaybackParams = {
state: boolean;
device_id?: string;
};

export type SeekToPositionInCurrentlyPlayingTrackParams = {
position_ms: number;
device_id?: string;
};

export type SetRepeatModeOnUsersPlaybackParams = {
state: string;
device_id?: string;
};

export type GetRecentlyPlayedParams = {
limit?: QueryLimitParameter;
after?: number;
before?: number;
};

export type AddToQueueParams = {
uri: string;
device_id?: string;
};

export type SkipUsersPlaybackToPreviousTrackParams = {
device_id?: string;
};

/**
 * Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
"position" is zero based and can‚Äôt be negative. Example: `"offset": {"position": 5}`
"uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`

 */
export type StartAUsersPlaybackBodyOffset = { [key: string]: any };

export type StartAUsersPlaybackBody = {
  /** Optional. Spotify URI of the context to play.
Valid contexts are albums, artists & playlists.
`{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
 */
  context_uri?: string;
  /** Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
"position" is zero based and can‚Äôt be negative. Example: `"offset": {"position": 5}`
"uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
 */
  offset?: StartAUsersPlaybackBodyOffset;
  /** Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.
 */
  position_ms?: number;
  /** Optional. A JSON array of the Spotify track URIs to play.
For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
 */
  uris?: string[];
  [key: string]: any;
 };

export type StartAUsersPlaybackParams = {
device_id?: string;
};

export type PauseAUsersPlaybackParams = {
device_id?: string;
};

export type SkipUsersPlaybackToNextTrackParams = {
device_id?: string;
};

export type GetTheUsersCurrentlyPlayingTrackParams = {
market?: QueryMarketParameter;
additional_types?: QueryAdditionalTypesParameter;
};

export type TransferAUsersPlaybackBody = {
  /** A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
 */
  device_ids: string[];
  /** **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
 */
  play?: boolean;
  [key: string]: any;
 };

export type GetInformationAboutTheUsersCurrentPlaybackParams = {
market?: QueryMarketParameter;
additional_types?: QueryAdditionalTypesParameter;
};

export type CheckCurrentUserFollowsType = typeof CheckCurrentUserFollowsType[keyof typeof CheckCurrentUserFollowsType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckCurrentUserFollowsType = {
  artist: 'artist',
  user: 'user',
} as const;

export type CheckCurrentUserFollowsParams = {
type: CheckCurrentUserFollowsType;
ids: string;
};

export type FollowArtistsUsersBody = {
  /** A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids: string[];
  [key: string]: any;
 };

export type FollowArtistsUsersType = typeof FollowArtistsUsersType[keyof typeof FollowArtistsUsersType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FollowArtistsUsersType = {
  artist: 'artist',
  user: 'user',
} as const;

export type FollowArtistsUsersParams = {
type: FollowArtistsUsersType;
ids: string;
};

export type GetFollowedType = typeof GetFollowedType[keyof typeof GetFollowedType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFollowedType = {
  artist: 'artist',
} as const;

export type GetFollowedParams = {
type: GetFollowedType;
after?: string;
limit?: QueryLimitParameter;
};

export type UnfollowArtistsUsersBody = {
  /** A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids?: string[];
  [key: string]: any;
 };

export type UnfollowArtistsUsersType = typeof UnfollowArtistsUsersType[keyof typeof UnfollowArtistsUsersType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnfollowArtistsUsersType = {
  artist: 'artist',
  user: 'user',
} as const;

export type UnfollowArtistsUsersParams = {
type: UnfollowArtistsUsersType;
ids: string;
};

export type CheckUsersSavedEpisodesParams = {
ids: string;
};

export type SaveEpisodesUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids: string[];
  [key: string]: any;
 };

export type SaveEpisodesUserParams = {
ids: string;
};

export type GetUsersSavedEpisodesParams = {
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type RemoveEpisodesUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids?: string[];
  [key: string]: any;
 };

export type RemoveEpisodesUserParams = {
ids: QueryTrackIdsParameter;
};

export type CheckUsersSavedAudiobooksParams = {
ids: QueryAudiobookIdsParameter;
};

export type SaveAudiobooksUserParams = {
ids: QueryAudiobookIdsParameter;
};

export type GetUsersSavedAudiobooksParams = {
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type RemoveAudiobooksUserParams = {
ids: QueryAudiobookIdsParameter;
};

export type CheckUsersSavedAlbumsParams = {
ids: QueryAlbumIdsParameter;
};

export type SaveAlbumsUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids?: string[];
  [key: string]: any;
 };

export type SaveAlbumsUserParams = {
ids: QueryAlbumIdsParameter;
};

export type GetUsersSavedAlbumsParams = {
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
market?: QueryMarketParameter;
};

export type RemoveAlbumsUserBody = {
  /** A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
 */
  ids?: string[];
  [key: string]: any;
 };

export type RemoveAlbumsUserParams = {
ids: QueryAlbumIdsParameter;
};

export type GetAnEpisodeParams = {
market?: QueryMarketParameter;
};

export type GetMultipleEpisodesParams = {
ids: string;
market?: QueryMarketParameter;
};

export type GetAChapterParams = {
market?: QueryMarketParameter;
};

export type GetSeveralChaptersParams = {
ids: QueryChapterIdsParameter;
market?: QueryMarketParameter;
};

export type GetNewReleasesParams = {
country?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetFeaturedPlaylistsParams = {
country?: string;
locale?: string;
timestamp?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetACategoriesPlaylistsParams = {
country?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetACategoryParams = {
country?: string;
locale?: string;
};

export type GetCategoriesParams = {
country?: string;
locale?: string;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetAudiobookChaptersParams = {
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetAnAudiobookParams = {
market?: QueryMarketParameter;
};

export type GetMultipleAudiobooksParams = {
ids: QueryAudiobookIdsParameter;
market?: QueryMarketParameter;
};

export type GetSeveralAudioFeaturesParams = {
ids: string;
};

export type GetAnArtistsTopTracksParams = {
market?: QueryMarketParameter;
};

export type GetAnArtistsAlbumsParams = {
include_groups?: QueryIncludeGroupsParameter;
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetMultipleArtistsParams = {
ids: string;
};

export type GetAnAlbumsTracksParams = {
market?: QueryMarketParameter;
limit?: QueryLimitParameter;
offset?: QueryOffsetParameter;
};

export type GetAnAlbumParams = {
market?: QueryMarketParameter;
};

export type GetMultipleAlbumsParams = {
ids: QueryAlbumIdsParameter;
market?: QueryMarketParameter;
};

export type QueryTrackIdsParameter = string;

export type QueryShowIdsParameter = string;

export type QueryOffsetParameter = number;

export type QueryMarketParameter = string;

export type QueryLimitParameter = number;

export type QueryIncludeGroupsParameter = string;

export type QueryChapterIdsParameter = string;

export type QueryAudiobookIdsParameter = string;

export type QueryAlbumIdsParameter = string;

export type QueryAdditionalTypesParameter = string;

export type UnauthorizedResponse = {
  error: ErrorObject;
};

export type TooManyRequestsResponse = {
  error: ErrorObject;
};

export type SearchItemsResponse = {
  albums?: PagingSimplifiedAlbumObject;
  artists?: PagingArtistObject;
  audiobooks?: PagingSimplifiedAudiobookObject;
  episodes?: PagingSimplifiedEpisodeObject;
  playlists?: PagingPlaylistObject;
  shows?: PagingSimplifiedShowObject;
  tracks?: PagingTrackObject;
};

/**
 * Information about the queue
 */
export type QueueResponse = QueueObject;

export type PlaylistSnapshotIdResponse = {
  snapshot_id?: string;
};

/**
 * Pages of tracks
 */
export type PagingTrackObjectResponse = PagingTrackObject;

/**
 * Pages of tracks
 */
export type PagingSimplifiedTrackObjectResponse = PagingSimplifiedTrackObject;

/**
 * Pages of shows
 */
export type PagingSimplifiedShowObjectResponse = PagingSimplifiedShowObject;

/**
 * Pages of episodes
 */
export type PagingSimplifiedEpisodeObjectResponse = PagingSimplifiedEpisodeObject;

/**
 * Pages of chapters
 */
export type PagingSimplifiedChapterObjectResponse = PagingSimplifiedChapterObject;

/**
 * Pages of audiobooks
 */
export type PagingSimplifiedAudiobookObjectResponse = PagingSimplifiedAudiobookObject;

/**
 * Pages of artists
 */
export type PagingSimplifiedArtistObjectResponse = PagingSimplifiedArtistObject;

/**
 * Pages of albums
 */
export type PagingSimplifiedAlbumObjectResponse = PagingSimplifiedAlbumObject;

/**
 * Pages of tracks
 */
export type PagingSavedTrackObjectResponse = PagingSavedTrackObject;

/**
 * Pages of shows
 */
export type PagingSavedShowObjectResponse = PagingSavedShowObject;

/**
 * Pages of episodes
 */
export type PagingSavedEpisodeObjectResponse = PagingSavedEpisodeObject;

/**
 * Pages of saved audiobooks
 */
export type PagingSavedAudiobookObjectResponse = PagingSavedAudiobookObject;

/**
 * Pages of albums
 */
export type PagingSavedAlbumObjectResponse = PagingSavedAlbumObject;

/**
 * Pages of tracks
 */
export type PagingPlaylistTrackObjectResponse = PagingPlaylistTrackObject;

/**
 * Pages of artists
 */
export type PagingArtistObjectResponse = PagingArtistObject;

/**
 * A paged set of playlists
 */
export type PagedPlaylistsResponse = PagingPlaylistObject;

/**
 * A paged set of playlists
 */
export type PagedFeaturedPlaylistsResponse = PagingFeaturedPlaylistObject;

export type PagedCategoriesResponseCategoriesAllOf = {
  items?: CategoryObject[];
};

export type PagedCategoriesResponseCategories = PagingObject & PagedCategoriesResponseCategoriesAllOf;

export type PagedCategoriesResponse = {
  categories: PagedCategoriesResponseCategories;
};

export type PagedAlbumsResponse = {
  albums: PagingSimplifiedAlbumObject;
};

/**
 * A track
 */
export type OneTrackResponse = TrackObject;

/**
 * A show
 */
export type OneShowResponse = ShowObject;

/**
 * A set of recommendations
 */
export type OneRecommendationsResponse = RecommendationsObject;

/**
 * A user
 */
export type OnePublicUserResponse = PublicUserObject;

/**
 * A user
 */
export type OnePrivateUserResponse = PrivateUserObject;

/**
 * A playlist
 */
export type OnePlaylistResponse = PlaylistObject;

/**
 * An episode
 */
export type OneEpisodeResponse = EpisodeObject;

/**
 * Information about the currently playing track
 */
export type OneCurrentlyPlayingTrackResponse = CurrentlyPlayingObject;

/**
 * Information about playback
 */
export type OneCurrentlyPlayingResponse = CurrentlyPlayingContextObject;

/**
 * A Chapter
 */
export type OneChapterResponse = ChapterObject;

/**
 * A category
 */
export type OneCategoryResponse = CategoryObject;

/**
 * An Audiobook
 */
export type OneAudiobookResponse = AudiobookObject;

/**
 * Audio features for one track
 */
export type OneAudioFeaturesResponse = AudioFeaturesObject;

/**
 * Audio analysis for one track
 */
export type OneAudioAnalysisResponse = AudioAnalysisObject;

/**
 * An artist
 */
export type OneArtistResponse = ArtistObject;

/**
 * An album
 */
export type OneAlbumResponse = AlbumObject;

export type NotFoundResponse = {
  error: ErrorObject;
};

export type MarketsResponse = {
  markets?: string[];
};

export type ManyTracksResponse = {
  tracks: TrackObject[];
};

export type ManySimplifiedShowsResponse = {
  shows: SimplifiedShowObject[];
};

export type ManyGenresResponse = {
  genres: string[];
};

export type ManyEpisodesResponse = {
  episodes: EpisodeObject[];
};

/**
 * A set of devices
 */
export type ManyDevicesResponse = DevicesObject;

export type ManyChaptersResponse = {
  chapters: ChapterObject[];
};

export type ManyAudiobooksResponse = {
  audiobooks: AudiobookObject[];
};

export type ManyAudioFeaturesResponse = {
  audio_features: AudioFeaturesObject[];
};

export type ManyArtistsResponse = {
  artists: ArtistObject[];
};

export type ManyAlbumsResponse = {
  albums: AlbumObject[];
};

export type ForbiddenResponse = {
  error: ErrorObject;
};

/**
 * A paged set of tracks
 */
export type CursorPagedPlayHistoryResponse = CursorPagingPlayHistoryObject;

export type CursorPagedArtistsResponse = {
  artists: CursorPagingSimplifiedArtistObject;
};

export type BadRequestResponse = {
  error: ErrorObject;
};

/**
 * A set of images
 */
export type ArrayOfImagesResponse = ImageObject[];

/**
 * Array of booleans
 */
export type ArrayOfBooleansResponse = boolean[];

export interface TrackRestrictionObject {
  /** The reason for the restriction. Supported values:
- `market` - The content item is not available in the given market.
- `product` - The content item is not available for the user's subscription type.
- `explicit` - The content item is explicit and the user's account is set to not play explicit content.

Additional reasons may be added in the future.
**Note**: If you use this field, make sure that your application safely handles unknown values.
 */
  reason?: string;
}

/**
 * The object type: "track".

 */
export type TrackObjectType = typeof TrackObjectType[keyof typeof TrackObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrackObjectType = {
  track: 'track',
} as const;

export interface TrackObject {
  /** The album on which the track appears. The album object includes a link in `href` to full information about the album.
 */
  album?: SimplifiedAlbumObject;
  /** The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
 */
  artists?: ArtistObject[];
  /** A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
  available_markets?: string[];
  /** The disc number (usually `1` unless the album consists of more than one disc).
 */
  disc_number?: number;
  /** The track length in milliseconds.
 */
  duration_ms?: number;
  /** Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
 */
  explicit?: boolean;
  /** Known external IDs for the track.
 */
  external_ids?: ExternalIdObject;
  /** Known external URLs for this track.
 */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the track.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  id?: string;
  /** Whether or not the track is from a local file.
 */
  is_local?: boolean;
  /** Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
 */
  is_playable?: boolean;
  /** Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. */
  linked_from?: LinkedTrackObject;
  /** The name of the track.
 */
  name?: string;
  /** The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._
 */
  popularity?: number;
  /** A link to a 30 second preview (MP3 format) of the track. Can be `null`
 */
  preview_url?: string;
  /** Included in the response when a content restriction is applied.
 */
  restrictions?: TrackRestrictionObject;
  /** The number of the track. If an album has several discs, the track number is the number on the specified disc.
 */
  track_number?: number;
  /** The object type: "track".
 */
  type?: TrackObjectType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  uri?: string;
}

/**
 * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
 */
export type TimeSignature = number;

export interface TimeIntervalObject {
  /** The confidence, from 0.0 to 1.0, of the reliability of the interval. */
  confidence?: number;
  /** The duration (in seconds) of the time interval. */
  duration?: number;
  /** The starting point (in seconds) of the time interval. */
  start?: number;
}

/**
 * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.

 */
export type Tempo = number;

export interface TuneableTrackObject {
  /** A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
 */
  acousticness?: number;
  /** Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
 */
  danceability?: number;
  /** The duration of the track in milliseconds.
 */
  duration_ms?: number;
  /** Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
 */
  energy?: number;
  /** Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
 */
  instrumentalness?: number;
  key?: Key;
  /** Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
 */
  liveness?: number;
  loudness?: Loudness;
  mode?: Mode;
  /** The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._
 */
  popularity?: number;
  /** Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
 */
  speechiness?: number;
  tempo?: Tempo;
  time_signature?: TimeSignature;
  /** A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
 */
  valence?: number;
}

export interface SimplifiedTrackObject {
  /** The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. */
  artists?: SimplifiedArtistObject[];
  /** A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
  available_markets?: string[];
  /** The disc number (usually `1` unless the album consists of more than one disc). */
  disc_number?: number;
  /** The track length in milliseconds. */
  duration_ms?: number;
  /** Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). */
  explicit?: boolean;
  /** External URLs for this track.
 */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the track. */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  id?: string;
  /** Whether or not the track is from a local file.
 */
  is_local?: boolean;
  /** Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
 */
  is_playable?: boolean;
  /** Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track. */
  linked_from?: LinkedTrackObject;
  /** The name of the track. */
  name?: string;
  /** A URL to a 30 second preview (MP3 format) of the track.
 */
  preview_url?: string;
  /** Included in the response when a content restriction is applied.
 */
  restrictions?: TrackRestrictionObject;
  /** The number of the track. If an album has several discs, the track number is the number on the specified disc.
 */
  track_number?: number;
  /** The object type: "track".
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  uri?: string;
}

export type SimplifiedShowObject = ShowBase;

export interface SimplifiedPlaylistObject {
  /** `true` if the owner allows other users to modify the playlist.
 */
  collaborative?: boolean;
  /** The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
 */
  description?: string;
  /** Known external URLs for this playlist.
 */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the playlist.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
 */
  id?: string;
  /** Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
 */
  images?: ImageObject[];
  /** The name of the playlist.
 */
  name?: string;
  /** The user who owns the playlist
 */
  owner?: PlaylistOwnerObject;
  /** The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
 */
  public?: boolean;
  /** The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
 */
  snapshot_id?: string;
  /** A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
 */
  tracks?: PlaylistTracksRefObject;
  /** The object type: "playlist"
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
 */
  uri?: string;
}

export type SimplifiedEpisodeObject = EpisodeBase;

export type SimplifiedChapterObject = ChapterBase;

export type SimplifiedAudiobookObject = AudiobookBase;

/**
 * The object type.

 */
export type SimplifiedArtistObjectType = typeof SimplifiedArtistObjectType[keyof typeof SimplifiedArtistObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SimplifiedArtistObjectType = {
  artist: 'artist',
} as const;

export interface SimplifiedArtistObject {
  /** Known external URLs for this artist.
 */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the artist.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
 */
  id?: string;
  /** The name of the artist.
 */
  name?: string;
  /** The object type.
 */
  type?: SimplifiedArtistObjectType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
 */
  uri?: string;
}

/**
 * The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.

 */
export type SimplifiedAlbumObjectAllOfAlbumGroup = typeof SimplifiedAlbumObjectAllOfAlbumGroup[keyof typeof SimplifiedAlbumObjectAllOfAlbumGroup];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SimplifiedAlbumObjectAllOfAlbumGroup = {
  album: 'album',
  single: 'single',
  compilation: 'compilation',
  appears_on: 'appears_on',
} as const;

export type SimplifiedAlbumObjectAllOf = {
  /** The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.
 */
  album_group?: SimplifiedAlbumObjectAllOfAlbumGroup;
  /** The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
 */
  artists: SimplifiedArtistObject[];
};

export type SimplifiedAlbumObject = AlbumBase & SimplifiedAlbumObjectAllOf;

export type ShowObjectAllOf = {
  /** The episodes of the show.
 */
  episodes: PagingSimplifiedEpisodeObject;
};

export type ShowObject = ShowBase & ShowObjectAllOf;

/**
 * The object type.

 */
export type ShowBaseType = typeof ShowBaseType[keyof typeof ShowBaseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShowBaseType = {
  show: 'show',
} as const;

export interface ShowBase {
  /** A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
  available_markets: string[];
  /** The copyright statements of the show.
 */
  copyrights: CopyrightObject[];
  /** A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
 */
  description: string;
  /** Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
 */
  explicit: boolean;
  /** External URLs for this show.
 */
  external_urls: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the show.
 */
  href: string;
  /** A description of the show. This field may contain HTML tags.
 */
  html_description: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
 */
  id: string;
  /** The cover art for the show in various sizes, widest first.
 */
  images: ImageObject[];
  /** True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
 */
  is_externally_hosted: boolean;
  /** A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
 */
  languages: string[];
  /** The media type of the show.
 */
  media_type: string;
  /** The name of the episode.
 */
  name: string;
  /** The publisher of the show.
 */
  publisher: string;
  /** The total number of episodes in the show.
 */
  total_episodes: number;
  /** The object type.
 */
  type: ShowBaseType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
 */
  uri: string;
}

export interface SegmentObject {
  /** The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
 */
  confidence?: number;
  /** The duration (in seconds) of the segment. */
  duration?: number;
  /** The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment. */
  loudness_end?: number;
  /** The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the "attack" of the segment. */
  loudness_max?: number;
  /** The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the "attack" of the segment. */
  loudness_max_time?: number;
  /** The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the "attack" of the segment. */
  loudness_start?: number;
  /** Pitch content is given by a ‚Äúchroma‚Äù vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).

Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.
As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.
![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
 */
  pitches?: number[];
  /** The starting point (in seconds) of the segment. */
  start?: number;
  /** Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment‚Äôs spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.

For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)

The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.
 */
  timbre?: number[];
}

/**
 * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
 */
export type SectionObjectMode = typeof SectionObjectMode[keyof typeof SectionObjectMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SectionObjectMode = {
  NUMBER_MINUS_1: -1,
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SectionObject {
  /** The confidence, from 0.0 to 1.0, of the reliability of the section's "designation". */
  confidence?: number;
  /** The duration (in seconds) of the section. */
  duration?: number;
  /** The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C‚ôØ/D‚ô≠, 2 = D, and so on). If no key was detected, the value is -1. */
  key?: number;
  /** The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field. */
  key_confidence?: number;
  /** The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks. */
  loudness?: number;
  /** Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches. */
  mode?: SectionObjectMode;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `mode`. */
  mode_confidence?: number;
  /** The starting point (in seconds) of the section. */
  start?: number;
  /** The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. */
  tempo?: number;
  /** The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field. */
  tempo_confidence?: number;
  time_signature?: TimeSignature;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field. */
  time_signature_confidence?: number;
}

export interface SavedTrackObject {
  /** The date and time the track was saved.
Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
 */
  added_at?: string;
  /** Information about the track. */
  track?: TrackObject;
}

export interface SavedShowObject {
  /** The date and time the show was saved.
Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
 */
  added_at?: string;
  /** Information about the show. */
  show?: SimplifiedShowObject;
}

export interface SavedEpisodeObject {
  /** The date and time the episode was saved.
Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
 */
  added_at?: string;
  /** Information about the episode. */
  episode?: EpisodeObject;
}

export interface SavedAudiobookObject {
  /** The date and time the audiobook was saved
Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
 */
  added_at?: string;
  /** Information about the audiobook. */
  audiobook?: AudiobookObject;
}

export interface SavedAlbumObject {
  /** The date and time the album was saved
Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
 */
  added_at?: string;
  /** Information about the album. */
  album?: AlbumObject;
}

export interface ResumePointObject {
  /** Whether or not the episode has been fully played by the user.
 */
  fully_played?: boolean;
  /** The user's most recent position in the episode in milliseconds.
 */
  resume_position_ms?: number;
}

export interface RecommendationSeedObject {
  /** The number of tracks available after min\_\* and max\_\* filters have been applied.
 */
  afterFilteringSize?: number;
  /** The number of tracks available after relinking for regional availability.
 */
  afterRelinkingSize?: number;
  /** A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.
 */
  href?: string;
  /** The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
 */
  id?: string;
  /** The number of recommended tracks available for this seed.
 */
  initialPoolSize?: number;
  /** The entity type of this seed. One of `artist`, `track` or `genre`.
 */
  type?: string;
}

export interface RecommendationsObject {
  /** An array of recommendation seed objects.
 */
  seeds: RecommendationSeedObject[];
  /** An array of track objects ordered according to the parameters supplied.
 */
  tracks: TrackObject[];
}

export type QueueObjectQueueItem = TrackObject | EpisodeObject;

/**
 * The currently playing track or episode. Can be `null`.
 */
export type QueueObjectCurrentlyPlaying = TrackObject | EpisodeObject;

export interface QueueObject {
  /** The currently playing track or episode. Can be `null`. */
  currently_playing?: QueueObjectCurrentlyPlaying;
  /** The tracks or episodes in the queue. Can be empty. */
  queue?: QueueObjectQueueItem[];
}

/**
 * The object type.

 */
export type PublicUserObjectType = typeof PublicUserObjectType[keyof typeof PublicUserObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PublicUserObjectType = {
  user: 'user',
} as const;

export interface PublicUserObject {
  /** The name displayed on the user's profile. `null` if not available.
 */
  display_name?: string | null;
  /** Known public external URLs for this user.
 */
  external_urls?: ExternalUrlObject;
  /** Information about the followers of this user.
 */
  followers?: FollowersObject;
  /** A link to the Web API endpoint for this user.
 */
  href?: string;
  /** The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
 */
  id?: string;
  /** The user's profile image.
 */
  images?: ImageObject[];
  /** The object type.
 */
  type?: PublicUserObjectType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
 */
  uri?: string;
}

export interface PrivateUserObject {
  /** The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
 */
  country?: string;
  /** The name displayed on the user's profile. `null` if not available.
 */
  display_name?: string;
  /** The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
 */
  email?: string;
  /** The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
 */
  explicit_content?: ExplicitContentSettingsObject;
  /** Known external URLs for this user. */
  external_urls?: ExternalUrlObject;
  /** Information about the followers of the user. */
  followers?: FollowersObject;
  /** A link to the Web API endpoint for this user.
 */
  href?: string;
  /** The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
 */
  id?: string;
  /** The user's profile image. */
  images?: ImageObject[];
  /** The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
 */
  product?: string;
  /** The object type: "user"
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
 */
  uri?: string;
}

/**
 * The object type.

 */
export type PlaylistUserObjectType = typeof PlaylistUserObjectType[keyof typeof PlaylistUserObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PlaylistUserObjectType = {
  user: 'user',
} as const;

export interface PlaylistUserObject {
  /** Known public external URLs for this user.
 */
  external_urls?: ExternalUrlObject;
  /** Information about the followers of this user.
 */
  followers?: FollowersObject;
  /** A link to the Web API endpoint for this user.
 */
  href?: string;
  /** The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
 */
  id?: string;
  /** The object type.
 */
  type?: PlaylistUserObjectType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
 */
  uri?: string;
}

export interface PlaylistTracksRefObject {
  /** A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
 */
  href?: string;
  /** Number of tracks in the playlist.
 */
  total?: number;
}

/**
 * Information about the track or episode.
 */
export type PlaylistTrackObjectTrack = TrackObject | EpisodeObject;

export interface PlaylistTrackObject {
  /** The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._
 */
  added_at?: string;
  /** The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._
 */
  added_by?: PlaylistUserObject;
  /** Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.
 */
  is_local?: boolean;
  /** Information about the track or episode. */
  track?: PlaylistTrackObjectTrack;
}

export type PlaylistOwnerObjectAllOf = {
  /** The name displayed on the user's profile. `null` if not available.
 */
  display_name?: string | null;
};

export type PlaylistOwnerObject = PlaylistUserObject & PlaylistOwnerObjectAllOf;

export interface PlaylistObject {
  /** `true` if the owner allows other users to modify the playlist.
 */
  collaborative?: boolean;
  /** The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
 */
  description?: string | null;
  /** Known external URLs for this playlist.
 */
  external_urls?: ExternalUrlObject;
  /** Information about the followers of the playlist. */
  followers?: FollowersObject;
  /** A link to the Web API endpoint providing full details of the playlist.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
 */
  id?: string;
  /** Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
 */
  images?: ImageObject[];
  /** The name of the playlist.
 */
  name?: string;
  /** The user who owns the playlist
 */
  owner?: PlaylistOwnerObject;
  /** The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
 */
  public?: boolean;
  /** The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
 */
  snapshot_id?: string;
  /** The tracks of the playlist.
 */
  tracks?: PagingPlaylistTrackObject;
  /** The object type: "playlist"
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
 */
  uri?: string;
}

/**
 * * `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
* `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
* `NO_SPECIFIC_TRACK` - The requested track does not exist.
* `ALREADY_PAUSED` - The command requires playback to not be paused.
* `NOT_PAUSED` - The command requires playback to be paused.
* `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
* `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
* `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
* `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
* `CONTEXT_DISALLOW` - The command could not be performed on the context.
* `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
* `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
* `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
* `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
* `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
* `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
* `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
* `UNKNOWN` - Certain actions are restricted because of unknown reasons.

 */
export type PlayerErrorReasons = typeof PlayerErrorReasons[keyof typeof PlayerErrorReasons];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PlayerErrorReasons = {
  NO_PREV_TRACK: 'NO_PREV_TRACK',
  NO_NEXT_TRACK: 'NO_NEXT_TRACK',
  NO_SPECIFIC_TRACK: 'NO_SPECIFIC_TRACK',
  ALREADY_PAUSED: 'ALREADY_PAUSED',
  NOT_PAUSED: 'NOT_PAUSED',
  NOT_PLAYING_LOCALLY: 'NOT_PLAYING_LOCALLY',
  NOT_PLAYING_TRACK: 'NOT_PLAYING_TRACK',
  NOT_PLAYING_CONTEXT: 'NOT_PLAYING_CONTEXT',
  ENDLESS_CONTEXT: 'ENDLESS_CONTEXT',
  CONTEXT_DISALLOW: 'CONTEXT_DISALLOW',
  ALREADY_PLAYING: 'ALREADY_PLAYING',
  RATE_LIMITED: 'RATE_LIMITED',
  REMOTE_CONTROL_DISALLOW: 'REMOTE_CONTROL_DISALLOW',
  DEVICE_NOT_CONTROLLABLE: 'DEVICE_NOT_CONTROLLABLE',
  VOLUME_CONTROL_DISALLOW: 'VOLUME_CONTROL_DISALLOW',
  NO_ACTIVE_DEVICE: 'NO_ACTIVE_DEVICE',
  PREMIUM_REQUIRED: 'PREMIUM_REQUIRED',
  UNKNOWN: 'UNKNOWN',
} as const;

export interface PlayerErrorObject {
  /** A short description of the cause of the error.
 */
  message?: string;
  reason?: PlayerErrorReasons;
  /** The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header.
 */
  status?: number;
}

export interface PlayHistoryObject {
  /** The context the track was played from. */
  context?: ContextObject;
  /** The date and time the track was played. */
  played_at?: string;
  /** The track the user listened to. */
  track?: TrackObject;
}

export type PagingTrackObjectAllOf = {
  items?: TrackObject[];
};

export type PagingTrackObject = PagingObject & PagingTrackObjectAllOf;

export type PagingSimplifiedTrackObjectAllOf = {
  items?: SimplifiedTrackObject[];
};

export type PagingSimplifiedTrackObject = PagingObject & PagingSimplifiedTrackObjectAllOf;

export type PagingSimplifiedShowObjectAllOf = {
  items?: SimplifiedShowObject[];
};

export type PagingSimplifiedShowObject = PagingObject & PagingSimplifiedShowObjectAllOf;

export type PagingSimplifiedEpisodeObjectAllOf = {
  items?: SimplifiedEpisodeObject[];
};

export type PagingSimplifiedEpisodeObject = PagingObject & PagingSimplifiedEpisodeObjectAllOf;

export type PagingSimplifiedChapterObjectAllOf = {
  items?: SimplifiedChapterObject[];
};

export type PagingSimplifiedChapterObject = PagingObject & PagingSimplifiedChapterObjectAllOf;

export type PagingSimplifiedAudiobookObjectAllOf = {
  items?: SimplifiedAudiobookObject[];
};

export type PagingSimplifiedAudiobookObject = PagingObject & PagingSimplifiedAudiobookObjectAllOf;

export type PagingSimplifiedArtistObjectAllOf = {
  items?: SimplifiedArtistObject[];
};

export type PagingSimplifiedArtistObject = PagingObject & PagingSimplifiedArtistObjectAllOf;

export type PagingSimplifiedAlbumObjectAllOf = {
  items?: SimplifiedAlbumObject[];
};

export type PagingSimplifiedAlbumObject = PagingObject & PagingSimplifiedAlbumObjectAllOf;

export type PagingSavedTrackObjectAllOf = {
  items?: SavedTrackObject[];
};

export type PagingSavedTrackObject = PagingObject & PagingSavedTrackObjectAllOf;

export type PagingSavedShowObjectAllOf = {
  items?: SavedShowObject[];
};

export type PagingSavedShowObject = PagingObject & PagingSavedShowObjectAllOf;

export type PagingSavedEpisodeObjectAllOf = {
  items?: SavedEpisodeObject[];
};

export type PagingSavedAudiobookObjectAllOf = {
  items?: SavedAudiobookObject[];
};

export type PagingSavedAudiobookObject = PagingObject & PagingSavedAudiobookObjectAllOf;

export type PagingSavedAlbumObjectAllOf = {
  items?: SavedAlbumObject[];
};

export type PagingSavedAlbumObject = PagingObject & PagingSavedAlbumObjectAllOf;

export type PagingPlaylistTrackObjectAllOf = {
  items?: PlaylistTrackObject[];
};

export type PagingPlaylistTrackObject = PagingObject & PagingPlaylistTrackObjectAllOf;

export type PagingPlaylistObjectAllOf = {
  items?: SimplifiedPlaylistObject[];
};

export interface PagingObject {
  /** A link to the Web API endpoint returning the full result of the request
 */
  href: string;
  /** The maximum number of items in the response (as set in the query or by default).
 */
  limit: number;
  /** URL to the next page of items. ( `null` if none)
 */
  next: string | null;
  /** The offset of the items returned (as set in the query or by default)
 */
  offset: number;
  /** URL to the previous page of items. ( `null` if none)
 */
  previous: string | null;
  /** The total number of items available to return.
 */
  total: number;
}

export type PagingSavedEpisodeObject = PagingObject & PagingSavedEpisodeObjectAllOf;

export type PagingPlaylistObject = PagingObject & PagingPlaylistObjectAllOf;

export interface PagingFeaturedPlaylistObject {
  message?: string;
  playlists?: PagingPlaylistObject;
}

export type PagingArtistObjectAllOf = {
  items?: ArtistObject[];
};

export type PagingArtistObject = PagingObject & PagingArtistObjectAllOf;

export interface NarratorObject {
  /** The name of the Narrator.
 */
  name?: string;
}

/**
 * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.

 */
export type Mode = number;

/**
 * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.

 */
export type Loudness = number;

export interface LinkedTrackObject {
  /** Known external URLs for this track.
 */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the track.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  id?: string;
  /** The object type: "track".
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
 */
  uri?: string;
}

/**
 * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C‚ôØ/D‚ô≠, 2 = D, and so on. If no key was detected, the value is -1.

 */
export type Key = number;

export interface ImageObject {
  /** The image height in pixels.
 */
  height: number | null;
  /** The source URL of the image.
 */
  url: string;
  /** The image width in pixels.
 */
  width: number | null;
}

export interface FollowersObject {
  /** This will always be set to null, as the Web API does not support it at the moment.
 */
  href?: string | null;
  /** The total number of followers.
 */
  total?: number;
}

export interface ExternalUrlObject {
  /** The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.
 */
  spotify?: string;
}

export interface ExternalIdObject {
  /** [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
 */
  ean?: string;
  /** [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
 */
  isrc?: string;
  /** [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
 */
  upc?: string;
}

export interface ExplicitContentSettingsObject {
  /** When `true`, indicates that explicit content should not be played.
 */
  filter_enabled?: boolean;
  /** When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
 */
  filter_locked?: boolean;
}

export interface ErrorObject {
  /** A short description of the cause of the error.
 */
  message: string;
  /** The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
 */
  status: number;
}

export interface EpisodeRestrictionObject {
  /** The reason for the restriction. Supported values:
- `market` - The content item is not available in the given market.
- `product` - The content item is not available for the user's subscription type.
- `explicit` - The content item is explicit and the user's account is set to not play explicit content.

Additional reasons may be added in the future.
**Note**: If you use this field, make sure that your application safely handles unknown values.
 */
  reason?: string;
}

export type EpisodeObjectAllOf = {
  /** The show on which the episode belongs.
 */
  show: SimplifiedShowObject;
};

/**
 * The object type.

 */
export type EpisodeBaseType = typeof EpisodeBaseType[keyof typeof EpisodeBaseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EpisodeBaseType = {
  episode: 'episode',
} as const;

/**
 * The precision with which `release_date` value is known.

 */
export type EpisodeBaseReleaseDatePrecision = typeof EpisodeBaseReleaseDatePrecision[keyof typeof EpisodeBaseReleaseDatePrecision];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EpisodeBaseReleaseDatePrecision = {
  year: 'year',
  month: 'month',
  day: 'day',
} as const;

export interface EpisodeBase {
  /** A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
 */
  audio_preview_url: string;
  /** A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
 */
  description: string;
  /** The episode length in milliseconds.
 */
  duration_ms: number;
  /** Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
 */
  explicit: boolean;
  /** External URLs for this episode.
 */
  external_urls: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the episode.
 */
  href: string;
  /** A description of the episode. This field may contain HTML tags.
 */
  html_description: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
 */
  id: string;
  /** The cover art for the episode in various sizes, widest first.
 */
  images: ImageObject[];
  /** True if the episode is hosted outside of Spotify's CDN.
 */
  is_externally_hosted: boolean;
  /** True if the episode is playable in the given market. Otherwise false.
 */
  is_playable: boolean;
  /**
   * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.

   * @deprecated
   */
  language?: string;
  /** A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
 */
  languages: string[];
  /** The name of the episode.
 */
  name: string;
  /** The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
 */
  release_date: string;
  /** The precision with which `release_date` value is known.
 */
  release_date_precision: EpisodeBaseReleaseDatePrecision;
  /** Included in the response when a content restriction is applied.
 */
  restrictions?: EpisodeRestrictionObject;
  /** The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
 */
  resume_point: ResumePointObject;
  /** The object type.
 */
  type: EpisodeBaseType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
 */
  uri: string;
}

export type EpisodeObject = EpisodeBase & EpisodeObjectAllOf;

export interface DisallowsObject {
  /** Interrupting playback. Optional field. */
  interrupting_playback?: boolean;
  /** Pausing. Optional field. */
  pausing?: boolean;
  /** Resuming. Optional field. */
  resuming?: boolean;
  /** Seeking playback location. Optional field. */
  seeking?: boolean;
  /** Skipping to the next context. Optional field. */
  skipping_next?: boolean;
  /** Skipping to the previous context. Optional field. */
  skipping_prev?: boolean;
  /** Toggling repeat context flag. Optional field. */
  toggling_repeat_context?: boolean;
  /** Toggling repeat track flag. Optional field. */
  toggling_repeat_track?: boolean;
  /** Toggling shuffle flag. Optional field. */
  toggling_shuffle?: boolean;
  /** Transfering playback between devices. Optional field. */
  transferring_playback?: boolean;
}

export interface DeviceObject {
  /** The device ID. */
  id?: string | null;
  /** If this device is the currently active device. */
  is_active?: boolean;
  /** If this device is currently in a private session. */
  is_private_session?: boolean;
  /** Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device. */
  is_restricted?: boolean;
  /** A human-readable name for the device. Some devices have a name that the user can configure (e.g. \"Loudest speaker\") and some devices have a generic name associated with the manufacturer or device model. */
  name?: string;
  /** Device type, such as "computer", "smartphone" or "speaker". */
  type?: string;
  /** The current volume in percent. */
  volume_percent?: number | null;
}

export interface DevicesObject {
  /** A list of 0..n Device objects */
  devices?: DeviceObject[];
}

export type CursorPagingSimplifiedArtistObjectAllOf = {
  items?: ArtistObject[];
};

export type CursorPagingSimplifiedArtistObject = CursorPagingObject & CursorPagingSimplifiedArtistObjectAllOf;

export type CursorPagingPlayHistoryObjectAllOf = {
  items?: PlayHistoryObject[];
};

export interface CursorObject {
  /** The cursor to use as key to find the next page of items. */
  after?: string;
  /** The cursor to use as key to find the previous page of items. */
  before?: string;
}

export interface CursorPagingObject {
  /** The cursors used to find the next set of items. */
  cursors?: CursorObject;
  /** A link to the Web API endpoint returning the full result of the request. */
  href?: string;
  /** The maximum number of items in the response (as set in the query or by default). */
  limit?: number;
  /** URL to the next page of items. ( `null` if none) */
  next?: string;
  /** The total number of items available to return. */
  total?: number;
}

export type CursorPagingPlayHistoryObject = CursorPagingObject & CursorPagingPlayHistoryObjectAllOf;

/**
 * The currently playing track or episode. Can be `null`.
 */
export type CurrentlyPlayingObjectItem = TrackObject | EpisodeObject;

/**
 * The currently playing track or episode. Can be `null`.
 */
export type CurrentlyPlayingContextObjectItem = TrackObject | EpisodeObject;

export interface CurrentlyPlayingContextObject {
  /** Allows to update the user interface based on which playback actions are available within the current context.
 */
  actions?: DisallowsObject;
  /** A Context Object. Can be `null`. */
  context?: ContextObject;
  /** The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
 */
  currently_playing_type?: string;
  /** The device that is currently active.
 */
  device?: DeviceObject;
  /** If something is currently playing, return `true`. */
  is_playing?: boolean;
  /** The currently playing track or episode. Can be `null`. */
  item?: CurrentlyPlayingContextObjectItem;
  /** Progress into the currently playing track or episode. Can be `null`. */
  progress_ms?: number;
  /** off, track, context */
  repeat_state?: string;
  /** If shuffle is on or off. */
  shuffle_state?: boolean;
  /** Unix Millisecond Timestamp when data was fetched. */
  timestamp?: number;
}

export interface CopyrightObject {
  /** The copyright text for this content.
 */
  text?: string;
  /** The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
 */
  type?: string;
}

export interface ContextObject {
  /** External URLs for this context. */
  external_urls?: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the track. */
  href?: string;
  /** The object type, e.g. "artist", "playlist", "album", "show".
 */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.
 */
  uri?: string;
}

export interface CurrentlyPlayingObject {
  /** A Context Object. Can be `null`. */
  context?: ContextObject;
  /** The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
 */
  currently_playing_type?: string;
  /** If something is currently playing, return `true`. */
  is_playing?: boolean;
  /** The currently playing track or episode. Can be `null`. */
  item?: CurrentlyPlayingObjectItem;
  /** Progress into the currently playing track or episode. Can be `null`. */
  progress_ms?: number;
  /** Unix Millisecond Timestamp when data was fetched */
  timestamp?: number;
}

export interface ChapterRestrictionObject {
  /** The reason for the restriction. Supported values:
- `market` - The content item is not available in the given market.
- `product` - The content item is not available for the user's subscription type.
- `explicit` - The content item is explicit and the user's account is set to not play explicit content.
- `payment_required` - Payment is required to play the content item.

Additional reasons may be added in the future.
**Note**: If you use this field, make sure that your application safely handles unknown values.
 */
  reason?: string;
}

export type ChapterObjectAllOf = {
  /** The audiobook for which the chapter belongs.
 */
  audiobook: SimplifiedAudiobookObject;
};

/**
 * The object type.

 */
export type ChapterBaseType = typeof ChapterBaseType[keyof typeof ChapterBaseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChapterBaseType = {
  episode: 'episode',
} as const;

/**
 * The precision with which `release_date` value is known.

 */
export type ChapterBaseReleaseDatePrecision = typeof ChapterBaseReleaseDatePrecision[keyof typeof ChapterBaseReleaseDatePrecision];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChapterBaseReleaseDatePrecision = {
  year: 'year',
  month: 'month',
  day: 'day',
} as const;

export interface ChapterBase {
  /** A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
 */
  audio_preview_url: string;
  /** A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
  available_markets?: string[];
  /** The number of the chapter
 */
  chapter_number: number;
  /** A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
 */
  description: string;
  /** The episode length in milliseconds.
 */
  duration_ms: number;
  /** Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
 */
  explicit: boolean;
  /** External URLs for this episode.
 */
  external_urls: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the episode.
 */
  href: string;
  /** A description of the episode. This field may contain HTML tags.
 */
  html_description: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
 */
  id: string;
  /** The cover art for the episode in various sizes, widest first.
 */
  images: ImageObject[];
  /** True if the episode is playable in the given market. Otherwise false.
 */
  is_playable: boolean;
  /** A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
 */
  languages: string[];
  /** The name of the episode.
 */
  name: string;
  /** The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
 */
  release_date: string;
  /** The precision with which `release_date` value is known.
 */
  release_date_precision: ChapterBaseReleaseDatePrecision;
  /** Included in the response when a content restriction is applied.
 */
  restrictions?: ChapterRestrictionObject;
  /** The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
 */
  resume_point: ResumePointObject;
  /** The object type.
 */
  type: ChapterBaseType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
 */
  uri: string;
}

export type ChapterObject = ChapterBase & ChapterObjectAllOf;

export interface CategoryObject {
  /** A link to the Web API endpoint returning full details of the category.
 */
  href: string;
  /** The category icon, in various sizes.
 */
  icons: ImageObject[];
  /** The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.
 */
  id: string;
  /** The name of the category.
 */
  name: string;
}

export interface AuthorObject {
  /** The name of the author.
 */
  name?: string;
}

export type AudiobookObjectAllOf = {
  /** The chapters of the audiobook.
 */
  chapters: PagingSimplifiedChapterObject;
};

/**
 * The object type.

 */
export type AudiobookBaseType = typeof AudiobookBaseType[keyof typeof AudiobookBaseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AudiobookBaseType = {
  audiobook: 'audiobook',
} as const;

export interface AudiobookBase {
  /** The author(s) for the audiobook.
 */
  authors: AuthorObject[];
  /** A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
  available_markets: string[];
  /** The copyright statements of the audiobook.
 */
  copyrights: CopyrightObject[];
  /** A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
 */
  description: string;
  /** The edition of the audiobook.
 */
  edition?: string;
  /** Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).
 */
  explicit: boolean;
  /** External URLs for this audiobook.
 */
  external_urls: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the audiobook.
 */
  href: string;
  /** A description of the audiobook. This field may contain HTML tags.
 */
  html_description: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
 */
  id: string;
  /** The cover art for the audiobook in various sizes, widest first.
 */
  images: ImageObject[];
  /** A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
 */
  languages: string[];
  /** The media type of the audiobook.
 */
  media_type: string;
  /** The name of the audiobook.
 */
  name: string;
  /** The narrator(s) for the audiobook.
 */
  narrators: NarratorObject[];
  /** The publisher of the audiobook.
 */
  publisher: string;
  /** The number of chapters in this audiobook.
 */
  total_chapters: number;
  /** The object type.
 */
  type: AudiobookBaseType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
 */
  uri: string;
}

export type AudiobookObject = AudiobookBase & AudiobookObjectAllOf;

/**
 * The object type.

 */
export type AudioFeaturesObjectType = typeof AudioFeaturesObjectType[keyof typeof AudioFeaturesObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AudioFeaturesObjectType = {
  audio_features: 'audio_features',
} as const;

export interface AudioFeaturesObject {
  /** A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
 */
  acousticness?: number;
  /** A URL to access the full audio analysis of this track. An access token is required to access this data.
 */
  analysis_url?: string;
  /** Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
 */
  danceability?: number;
  /** The duration of the track in milliseconds.
 */
  duration_ms?: number;
  /** Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
 */
  energy?: number;
  /** The Spotify ID for the track.
 */
  id?: string;
  /** Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
 */
  instrumentalness?: number;
  key?: Key;
  /** Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
 */
  liveness?: number;
  loudness?: Loudness;
  mode?: Mode;
  /** Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
 */
  speechiness?: number;
  tempo?: Tempo;
  time_signature?: TimeSignature;
  /** A link to the Web API endpoint providing full details of the track.
 */
  track_href?: string;
  /** The object type.
 */
  type?: AudioFeaturesObjectType;
  /** The Spotify URI for the track.
 */
  uri?: string;
  /** A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
 */
  valence?: number;
}

export type AudioAnalysisObjectTrack = {
  /** The number of channels used for analysis. If 1, all channels are summed together to mono before analysis. */
  analysis_channels?: number;
  /** The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify. */
  analysis_sample_rate?: number;
  /** A version number for the Echo Nest Musical Fingerprint format used in the codestring field. */
  code_version?: number;
  /** An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track. */
  codestring?: string;
  /** Length of the track in seconds. */
  duration?: number;
  /** A version number for the EchoPrint format used in the echoprintstring field. */
  echoprint_version?: number;
  /** An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track. */
  echoprintstring?: string;
  /** The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0. */
  end_of_fade_in?: number;
  key?: Key;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `key`. */
  key_confidence?: number;
  loudness?: Loudness;
  mode?: Mode;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `mode`. */
  mode_confidence?: number;
  /** The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`. */
  num_samples?: number;
  /** An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.) */
  offset_seconds?: number;
  /** A version number for the Rhythmstring used in the rhythmstring field. */
  rhythm_version?: number;
  /** A Rhythmstring for this track. The format of this string is similar to the Synchstring. */
  rhythmstring?: string;
  /** This field will always contain the empty string. */
  sample_md5?: string;
  /** The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length. */
  start_of_fade_out?: number;
  /** A version number for the Synchstring used in the synchstring field. */
  synch_version?: number;
  /** A [Synchstring](https://github.com/echonest/synchdata) for this track. */
  synchstring?: string;
  tempo?: Tempo;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `tempo`. */
  tempo_confidence?: number;
  time_signature?: TimeSignature;
  /** The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. */
  time_signature_confidence?: number;
  /** The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.) */
  window_seconds?: number;
};

export type AudioAnalysisObjectMeta = {
  /** The amount of time taken to analyze this track. */
  analysis_time?: number;
  /** The version of the Analyzer used to analyze this track. */
  analyzer_version?: string;
  /** A detailed status code for this track. If analysis data is missing, this code may explain why. */
  detailed_status?: string;
  /** The method used to read the track's audio data. */
  input_process?: string;
  /** The platform used to read the track's audio data. */
  platform?: string;
  /** The return code of the analyzer process. 0 if successful, 1 if any errors occurred. */
  status_code?: number;
  /** The Unix timestamp (in seconds) at which this track was analyzed. */
  timestamp?: number;
};

export interface AudioAnalysisObject {
  /** The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats. */
  bars?: TimeIntervalObject[];
  /** The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums. */
  beats?: TimeIntervalObject[];
  meta?: AudioAnalysisObjectMeta;
  /** Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness. */
  sections?: SectionObject[];
  /** Each segment contains a roughly conisistent sound throughout its duration. */
  segments?: SegmentObject[];
  /** A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments). */
  tatums?: TimeIntervalObject[];
  track?: AudioAnalysisObjectTrack;
}

/**
 * The object type.

 */
export type ArtistObjectType = typeof ArtistObjectType[keyof typeof ArtistObjectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtistObjectType = {
  artist: 'artist',
} as const;

export interface ArtistObject {
  /** Known external URLs for this artist.
 */
  external_urls?: ExternalUrlObject;
  /** Information about the followers of the artist.
 */
  followers?: FollowersObject;
  /** A list of the genres the artist is associated with. If not yet classified, the array is empty.
 */
  genres?: string[];
  /** A link to the Web API endpoint providing full details of the artist.
 */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
 */
  id?: string;
  /** Images of the artist in various sizes, widest first.
 */
  images?: ImageObject[];
  /** The name of the artist.
 */
  name?: string;
  /** The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
 */
  popularity?: number;
  /** The object type.
 */
  type?: ArtistObjectType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
 */
  uri?: string;
}

/**
 * The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
Additional reasons may be added in the future.

 */
export type AlbumRestrictionObjectReason = typeof AlbumRestrictionObjectReason[keyof typeof AlbumRestrictionObjectReason];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumRestrictionObjectReason = {
  market: 'market',
  product: 'product',
  explicit: 'explicit',
} as const;

export interface AlbumRestrictionObject {
  /** The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
Additional reasons may be added in the future.
 */
  reason?: AlbumRestrictionObjectReason;
}

export type AlbumObjectAllOf = {
  /** The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
 */
  artists?: SimplifiedArtistObject[];
  /** The copyright statements of the album. */
  copyrights?: CopyrightObject[];
  /** Known external IDs for the album.
 */
  external_ids?: ExternalIdObject;
  /** A list of the genres used to classify the album. (If not yet classified, the array is empty.) */
  genres?: string[];
  /** The label for the album. */
  label?: string;
  /** The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks. */
  popularity?: number;
  /** The tracks of the album.
 */
  tracks?: PagingSimplifiedTrackObject;
};

export type AlbumObject = AlbumBase & AlbumObjectAllOf;

/**
 * The object type.

 */
export type AlbumBaseType = typeof AlbumBaseType[keyof typeof AlbumBaseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumBaseType = {
  album: 'album',
} as const;

/**
 * The precision with which `release_date` value is known.

 */
export type AlbumBaseReleaseDatePrecision = typeof AlbumBaseReleaseDatePrecision[keyof typeof AlbumBaseReleaseDatePrecision];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumBaseReleaseDatePrecision = {
  year: 'year',
  month: 'month',
  day: 'day',
} as const;

/**
 * The type of the album.

 */
export type AlbumBaseAlbumType = typeof AlbumBaseAlbumType[keyof typeof AlbumBaseAlbumType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumBaseAlbumType = {
  album: 'album',
  single: 'single',
  compilation: 'compilation',
} as const;

export interface AlbumBase {
  /** The type of the album.
 */
  album_type: AlbumBaseAlbumType;
  /** The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._
 */
  available_markets: string[];
  /** Known external URLs for this album.
 */
  external_urls: ExternalUrlObject;
  /** A link to the Web API endpoint providing full details of the album.
 */
  href: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
 */
  id: string;
  /** The cover art for the album in various sizes, widest first.
 */
  images: ImageObject[];
  /** The name of the album. In case of an album takedown, the value may be an empty string.
 */
  name: string;
  /** The date the album was first released.
 */
  release_date: string;
  /** The precision with which `release_date` value is known.
 */
  release_date_precision: AlbumBaseReleaseDatePrecision;
  /** Included in the response when a content restriction is applied.
 */
  restrictions?: AlbumRestrictionObject;
  /** The number of tracks in the album. */
  total_tracks: number;
  /** The object type.
 */
  type: AlbumBaseType;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
 */
  uri: string;
}





  /**
 * Get Spotify catalog information for multiple albums identified by their Spotify IDs.

 * @summary Get Several Albums

 */
export const getMultipleAlbums = (
    params: GetMultipleAlbumsParams,
 ) => {
      return customInstance<ManyAlbumsResponse>(
      {url: `/albums`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single album.

 * @summary Get Album

 */
export const getAnAlbum = (
    id: string,
    params?: GetAnAlbumParams,
 ) => {
      return customInstance<OneAlbumResponse>(
      {url: `/albums/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information about an album‚Äôs tracks.
Optional parameters can be used to limit the number of tracks returned.

 * @summary Get Album Tracks

 */
export const getAnAlbumsTracks = (
    id: string,
    params?: GetAnAlbumsTracksParams,
 ) => {
      return customInstance<PagingSimplifiedTrackObjectResponse>(
      {url: `/albums/${id}/tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for several artists based on their Spotify IDs.

 * @summary Get Several Artists

 */
export const getMultipleArtists = (
    params: GetMultipleArtistsParams,
 ) => {
      return customInstance<ManyArtistsResponse>(
      {url: `/artists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single artist identified by their unique Spotify ID.

 * @summary Get Artist

 */
export const getAnArtist = (
    id: string,
 ) => {
      return customInstance<OneArtistResponse>(
      {url: `/artists/${id}`, method: 'get'
    },
      );
    }
  
/**
 * Get Spotify catalog information about an artist's albums.

 * @summary Get Artist's Albums

 */
export const getAnArtistsAlbums = (
    id: string,
    params?: GetAnArtistsAlbumsParams,
 ) => {
      return customInstance<PagingSimplifiedAlbumObjectResponse>(
      {url: `/artists/${id}/albums`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).

 * @summary Get Artist's Related Artists

 */
export const getAnArtistsRelatedArtists = (
    id: string,
 ) => {
      return customInstance<ManyArtistsResponse>(
      {url: `/artists/${id}/related-artists`, method: 'get'
    },
      );
    }
  
/**
 * Get Spotify catalog information about an artist's top tracks by country.

 * @summary Get Artist's Top Tracks

 */
export const getAnArtistsTopTracks = (
    id: string,
    params?: GetAnArtistsTopTracksParams,
 ) => {
      return customInstance<ManyTracksResponse>(
      {url: `/artists/${id}/top-tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track‚Äôs structure and musical content, including rhythm, pitch, and timbre.

 * @summary Get Track's Audio Analysis

 */
export const getAudioAnalysis = (
    id: string,
 ) => {
      return customInstance<OneAudioAnalysisResponse>(
      {url: `/audio-analysis/${id}`, method: 'get'
    },
      );
    }
  
/**
 * Get audio features for multiple tracks based on their Spotify IDs.

 * @summary Get Tracks' Audio Features

 */
export const getSeveralAudioFeatures = (
    params: GetSeveralAudioFeaturesParams,
 ) => {
      return customInstance<ManyAudioFeaturesResponse>(
      {url: `/audio-features`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get audio feature information for a single track identified by its unique
Spotify ID.

 * @summary Get Track's Audio Features

 */
export const getAudioFeatures = (
    id: string,
 ) => {
      return customInstance<OneAudioFeaturesResponse>(
      {url: `/audio-features/${id}`, method: 'get'
    },
      );
    }
  
/**
 * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Several Audiobooks

 */
export const getMultipleAudiobooks = (
    params: GetMultipleAudiobooksParams,
 ) => {
      return customInstance<ManyAudiobooksResponse>(
      {url: `/audiobooks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single audiobook.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get an Audiobook

 */
export const getAnAudiobook = (
    id: string,
    params?: GetAnAudiobookParams,
 ) => {
      return customInstance<OneAudiobookResponse>(
      {url: `/audiobooks/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information about an audiobook's chapters.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Audiobook Chapters

 */
export const getAudiobookChapters = (
    id: string,
    params?: GetAudiobookChaptersParams,
 ) => {
      return customInstance<PagingSimplifiedChapterObjectResponse>(
      {url: `/audiobooks/${id}/chapters`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get Several Browse Categories

 */
export const getCategories = (
    params?: GetCategoriesParams,
 ) => {
      return customInstance<PagedCategoriesResponse>(
      {url: `/browse/categories`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a single category used to tag items in Spotify (on, for example, the Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get Single Browse Category

 */
export const getACategory = (
    categoryId: string,
    params?: GetACategoryParams,
 ) => {
      return customInstance<OneCategoryResponse>(
      {url: `/browse/categories/${categoryId}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a list of Spotify playlists tagged with a particular category.

 * @summary Get Category's Playlists

 */
export const getACategoriesPlaylists = (
    categoryId: string,
    params?: GetACategoriesPlaylistsParams,
 ) => {
      return customInstance<PagedFeaturedPlaylistsResponse>(
      {url: `/browse/categories/${categoryId}/playlists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).

 * @summary Get Featured Playlists

 */
export const getFeaturedPlaylists = (
    params?: GetFeaturedPlaylistsParams,
 ) => {
      return customInstance<PagedFeaturedPlaylistsResponse>(
      {url: `/browse/featured-playlists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get New Releases

 */
export const getNewReleases = (
    params?: GetNewReleasesParams,
 ) => {
      return customInstance<PagedAlbumsResponse>(
      {url: `/browse/new-releases`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br />
**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Several Chapters

 */
export const getSeveralChapters = (
    params: GetSeveralChaptersParams,
 ) => {
      return customInstance<ManyChaptersResponse>(
      {url: `/chapters`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single chapter.<br />
**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get a Chapter

 */
export const getAChapter = (
    id: string,
    params?: GetAChapterParams,
 ) => {
      return customInstance<OneChapterResponse>(
      {url: `/chapters/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for several episodes based on their Spotify IDs.

 * @summary Get Several Episodes

 */
export const getMultipleEpisodes = (
    params: GetMultipleEpisodesParams,
 ) => {
      return customInstance<ManyEpisodesResponse>(
      {url: `/episodes`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single episode identified by its
unique Spotify ID.

 * @summary Get Episode

 */
export const getAnEpisode = (
    id: string,
    params?: GetAnEpisodeParams,
 ) => {
      return customInstance<OneEpisodeResponse>(
      {url: `/episodes/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get the list of markets where Spotify is available.

 * @summary Get Available Markets

 */
export const getAvailableMarkets = (
    
 ) => {
      return customInstance<MarketsResponse>(
      {url: `/markets`, method: 'get'
    },
      );
    }
  
/**
 * Get detailed profile information about the current user (including the
current user's username).

 * @summary Get Current User's Profile

 */
export const getCurrentUsersProfile = (
    
 ) => {
      return customInstance<OnePrivateUserResponse>(
      {url: `/me`, method: 'get'
    },
      );
    }
  
/**
 * Remove one or more albums from the current user's 'Your Music' library.

 * @summary Remove Users' Saved Albums

 */
export const removeAlbumsUser = (
    removeAlbumsUserBody: BodyType<RemoveAlbumsUserBody>,
    params: RemoveAlbumsUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/albums`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: removeAlbumsUserBody,
        params
    },
      );
    }
  
/**
 * Get a list of the albums saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Albums

 */
export const getUsersSavedAlbums = (
    params?: GetUsersSavedAlbumsParams,
 ) => {
      return customInstance<PagingSavedAlbumObjectResponse>(
      {url: `/me/albums`, method: 'get',
        params
    },
      );
    }
  
/**
 * Save one or more albums to the current user's 'Your Music' library.

 * @summary Save Albums for Current User

 */
export const saveAlbumsUser = (
    saveAlbumsUserBody: BodyType<SaveAlbumsUserBody>,
    params: SaveAlbumsUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/albums`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: saveAlbumsUserBody,
        params
    },
      );
    }
  
/**
 * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Albums

 */
export const checkUsersSavedAlbums = (
    params: CheckUsersSavedAlbumsParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/albums/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Remove one or more audiobooks from the Spotify user's library.

 * @summary Remove User's Saved Audiobooks

 */
export const removeAudiobooksUser = (
    params: RemoveAudiobooksUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/audiobooks`, method: 'delete',
        params
    },
      );
    }
  
/**
 * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Audiobooks

 */
export const getUsersSavedAudiobooks = (
    params?: GetUsersSavedAudiobooksParams,
 ) => {
      return customInstance<PagingSavedAudiobookObjectResponse>(
      {url: `/me/audiobooks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Save one or more audiobooks to the current Spotify user's library.

 * @summary Save Audiobooks for Current User

 */
export const saveAudiobooksUser = (
    params: SaveAudiobooksUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/audiobooks`, method: 'put',
        params
    },
      );
    }
  
/**
 * Check if one or more audiobooks are already saved in the current Spotify user's library.

 * @summary Check User's Saved Audiobooks

 */
export const checkUsersSavedAudiobooks = (
    params: CheckUsersSavedAudiobooksParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/audiobooks/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Remove one or more episodes from the current user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Remove User's Saved Episodes

 */
export const removeEpisodesUser = (
    removeEpisodesUserBody: BodyType<RemoveEpisodesUserBody>,
    params: RemoveEpisodesUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/episodes`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: removeEpisodesUserBody,
        params
    },
      );
    }
  
/**
 * Get a list of the episodes saved in the current Spotify user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Get User's Saved Episodes

 */
export const getUsersSavedEpisodes = (
    params?: GetUsersSavedEpisodesParams,
 ) => {
      return customInstance<PagingSavedEpisodeObjectResponse>(
      {url: `/me/episodes`, method: 'get',
        params
    },
      );
    }
  
/**
 * Save one or more episodes to the current user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Save Episodes for Current User

 */
export const saveEpisodesUser = (
    saveEpisodesUserBody: BodyType<SaveEpisodesUserBody>,
    params: SaveEpisodesUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/episodes`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: saveEpisodesUserBody,
        params
    },
      );
    }
  
/**
 * Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..

 * @summary Check User's Saved Episodes

 */
export const checkUsersSavedEpisodes = (
    params: CheckUsersSavedEpisodesParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/episodes/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Remove the current user as a follower of one or more artists or other Spotify users.

 * @summary Unfollow Artists or Users

 */
export const unfollowArtistsUsers = (
    unfollowArtistsUsersBody: BodyType<UnfollowArtistsUsersBody>,
    params: UnfollowArtistsUsersParams,
 ) => {
      return customInstance<void>(
      {url: `/me/following`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: unfollowArtistsUsersBody,
        params
    },
      );
    }
  
/**
 * Get the current user's followed artists.

 * @summary Get Followed Artists

 */
export const getFollowed = (
    params: GetFollowedParams,
 ) => {
      return customInstance<CursorPagedArtistsResponse>(
      {url: `/me/following`, method: 'get',
        params
    },
      );
    }
  
/**
 * Add the current user as a follower of one or more artists or other Spotify users.

 * @summary Follow Artists or Users

 */
export const followArtistsUsers = (
    followArtistsUsersBody: BodyType<FollowArtistsUsersBody>,
    params: FollowArtistsUsersParams,
 ) => {
      return customInstance<void>(
      {url: `/me/following`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: followArtistsUsersBody,
        params
    },
      );
    }
  
/**
 * Check to see if the current user is following one or more artists or other Spotify users.

 * @summary Check If User Follows Artists or Users

 */
export const checkCurrentUserFollows = (
    params: CheckCurrentUserFollowsParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/following/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get information about the user‚Äôs current playback state, including track or episode, progress, and active device.

 * @summary Get Playback State

 */
export const getInformationAboutTheUsersCurrentPlayback = (
    params?: GetInformationAboutTheUsersCurrentPlaybackParams,
 ) => {
      return customInstance<OneCurrentlyPlayingResponse | void>(
      {url: `/me/player`, method: 'get',
        params
    },
      );
    }
  
/**
 * Transfer playback to a new device and determine if it should start playing.

 * @summary Transfer Playback

 */
export const transferAUsersPlayback = (
    transferAUsersPlaybackBody: BodyType<TransferAUsersPlaybackBody>,
 ) => {
      return customInstance<void>(
      {url: `/me/player`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: transferAUsersPlaybackBody
    },
      );
    }
  
/**
 * Get the object currently being played on the user's Spotify account.

 * @summary Get Currently Playing Track

 */
export const getTheUsersCurrentlyPlayingTrack = (
    params?: GetTheUsersCurrentlyPlayingTrackParams,
 ) => {
      return customInstance<OneCurrentlyPlayingTrackResponse>(
      {url: `/me/player/currently-playing`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get information about a user‚Äôs available devices.

 * @summary Get Available Devices

 */
export const getAUsersAvailableDevices = (
    
 ) => {
      return customInstance<ManyDevicesResponse>(
      {url: `/me/player/devices`, method: 'get'
    },
      );
    }
  
/**
 * Skips to next track in the user‚Äôs queue.

 * @summary Skip To Next

 */
export const skipUsersPlaybackToNextTrack = (
    params?: SkipUsersPlaybackToNextTrackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/next`, method: 'post',
        params
    },
      );
    }
  
/**
 * Pause playback on the user's account.

 * @summary Pause Playback

 */
export const pauseAUsersPlayback = (
    params?: PauseAUsersPlaybackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/pause`, method: 'put',
        params
    },
      );
    }
  
/**
 * Start a new context or resume current playback on the user's active device.

 * @summary Start/Resume Playback

 */
export const startAUsersPlayback = (
    startAUsersPlaybackBody: BodyType<StartAUsersPlaybackBody>,
    params?: StartAUsersPlaybackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/play`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: startAUsersPlaybackBody,
        params
    },
      );
    }
  
/**
 * Skips to previous track in the user‚Äôs queue.

 * @summary Skip To Previous

 */
export const skipUsersPlaybackToPreviousTrack = (
    params?: SkipUsersPlaybackToPreviousTrackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/previous`, method: 'post',
        params
    },
      );
    }
  
/**
 * Get the list of objects that make up the user's queue.

 * @summary Get the User's Queue

 */
export const getQueue = (
    
 ) => {
      return customInstance<QueueResponse>(
      {url: `/me/player/queue`, method: 'get'
    },
      );
    }
  
/**
 * Add an item to the end of the user's current playback queue.

 * @summary Add Item to Playback Queue

 */
export const addToQueue = (
    params: AddToQueueParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/queue`, method: 'post',
        params
    },
      );
    }
  
/**
 * Get tracks from the current user's recently played tracks.
_**Note**: Currently doesn't support podcast episodes._

 * @summary Get Recently Played Tracks

 */
export const getRecentlyPlayed = (
    params?: GetRecentlyPlayedParams,
 ) => {
      return customInstance<CursorPagedPlayHistoryResponse>(
      {url: `/me/player/recently-played`, method: 'get',
        params
    },
      );
    }
  
/**
 * Set the repeat mode for the user's playback. Options are repeat-track,
repeat-context, and off.

 * @summary Set Repeat Mode

 */
export const setRepeatModeOnUsersPlayback = (
    params: SetRepeatModeOnUsersPlaybackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/repeat`, method: 'put',
        params
    },
      );
    }
  
/**
 * Seeks to the given position in the user‚Äôs currently playing track.

 * @summary Seek To Position

 */
export const seekToPositionInCurrentlyPlayingTrack = (
    params: SeekToPositionInCurrentlyPlayingTrackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/seek`, method: 'put',
        params
    },
      );
    }
  
/**
 * Toggle shuffle on or off for user‚Äôs playback.

 * @summary Toggle Playback Shuffle

 */
export const toggleShuffleForUsersPlayback = (
    params: ToggleShuffleForUsersPlaybackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/shuffle`, method: 'put',
        params
    },
      );
    }
  
/**
 * Set the volume for the user‚Äôs current playback device.

 * @summary Set Playback Volume

 */
export const setVolumeForUsersPlayback = (
    params: SetVolumeForUsersPlaybackParams,
 ) => {
      return customInstance<void>(
      {url: `/me/player/volume`, method: 'put',
        params
    },
      );
    }
  
/**
 * Get a list of the playlists owned or followed by the current Spotify
user.

 * @summary Get Current User's Playlists

 */
export const getAListOfCurrentUsersPlaylists = (
    params?: GetAListOfCurrentUsersPlaylistsParams,
 ) => {
      return customInstance<PagedPlaylistsResponse>(
      {url: `/me/playlists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Delete one or more shows from current Spotify user's library.

 * @summary Remove User's Saved Shows

 */
export const removeShowsUser = (
    removeShowsUserBody: BodyType<RemoveShowsUserBody>,
    params: RemoveShowsUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/shows`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: removeShowsUserBody,
        params
    },
      );
    }
  
/**
 * Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.

 * @summary Get User's Saved Shows

 */
export const getUsersSavedShows = (
    params?: GetUsersSavedShowsParams,
 ) => {
      return customInstance<PagingSavedShowObjectResponse>(
      {url: `/me/shows`, method: 'get',
        params
    },
      );
    }
  
/**
 * Save one or more shows to current Spotify user's library.

 * @summary Save Shows for Current User

 */
export const saveShowsUser = (
    saveShowsUserBody: BodyType<SaveShowsUserBody>,
    params: SaveShowsUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/shows`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: saveShowsUserBody,
        params
    },
      );
    }
  
/**
 * Check if one or more shows is already saved in the current Spotify user's library.

 * @summary Check User's Saved Shows

 */
export const checkUsersSavedShows = (
    params: CheckUsersSavedShowsParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/shows/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get the current user's top artists based on calculated affinity.

 * @summary Get User's Top Artists

 */
export const getUsersTopArtists = (
    params?: GetUsersTopArtistsParams,
 ) => {
      return customInstance<PagingArtistObjectResponse>(
      {url: `/me/top/artists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get the current user's top tracks based on calculated affinity.

 * @summary Get User's Top Tracks

 */
export const getUsersTopTracks = (
    params?: GetUsersTopTracksParams,
 ) => {
      return customInstance<PagingTrackObjectResponse>(
      {url: `/me/top/tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Remove one or more tracks from the current user's 'Your Music' library.

 * @summary Remove User's Saved Tracks

 */
export const removeTracksUser = (
    removeTracksUserBody: BodyType<RemoveTracksUserBody>,
    params: RemoveTracksUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/tracks`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: removeTracksUserBody,
        params
    },
      );
    }
  
/**
 * Get a list of the songs saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Tracks

 */
export const getUsersSavedTracks = (
    params?: GetUsersSavedTracksParams,
 ) => {
      return customInstance<PagingSavedTrackObjectResponse>(
      {url: `/me/tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Save one or more tracks to the current user's 'Your Music' library.

 * @summary Save Tracks for Current User

 */
export const saveTracksUser = (
    saveTracksUserBody: BodyType<SaveTracksUserBody>,
    params: SaveTracksUserParams,
 ) => {
      return customInstance<void>(
      {url: `/me/tracks`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: saveTracksUserBody,
        params
    },
      );
    }
  
/**
 * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Tracks

 */
export const checkUsersSavedTracks = (
    params: CheckUsersSavedTracksParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/me/tracks/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get a playlist owned by a Spotify user.

 * @summary Get Playlist

 */
export const getPlaylist = (
    playlistId: string,
    params?: GetPlaylistParams,
 ) => {
      return customInstance<OnePlaylistResponse>(
      {url: `/playlists/${playlistId}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Change a playlist's name and public/private state. (The user must, of
course, own the playlist.)

 * @summary Change Playlist Details

 */
export const changePlaylistDetails = (
    playlistId: string,
    changePlaylistDetailsBody: BodyType<ChangePlaylistDetailsBody>,
 ) => {
      return customInstance<void>(
      {url: `/playlists/${playlistId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: changePlaylistDetailsBody
    },
      );
    }
  
/**
 * Remove the current user as a follower of a playlist.

 * @summary Unfollow Playlist

 */
export const unfollowPlaylist = (
    playlistId: string,
 ) => {
      return customInstance<void>(
      {url: `/playlists/${playlistId}/followers`, method: 'delete'
    },
      );
    }
  
/**
 * Add the current user as a follower of a playlist.

 * @summary Follow Playlist

 */
export const followPlaylist = (
    playlistId: string,
    followPlaylistBody: BodyType<FollowPlaylistBody>,
 ) => {
      return customInstance<void>(
      {url: `/playlists/${playlistId}/followers`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: followPlaylistBody
    },
      );
    }
  
/**
 * Check to see if one or more Spotify users are following a specified playlist.

 * @summary Check if Users Follow Playlist

 */
export const checkIfUserFollowsPlaylist = (
    playlistId: string,
    params: CheckIfUserFollowsPlaylistParams,
 ) => {
      return customInstance<ArrayOfBooleansResponse>(
      {url: `/playlists/${playlistId}/followers/contains`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get the current image associated with a specific playlist.

 * @summary Get Playlist Cover Image

 */
export const getPlaylistCover = (
    playlistId: string,
 ) => {
      return customInstance<ArrayOfImagesResponse>(
      {url: `/playlists/${playlistId}/images`, method: 'get'
    },
      );
    }
  
/**
 * Replace the image used to represent a specific playlist.

 * @summary Add Custom Playlist Cover Image

 */
export const uploadCustomPlaylistCover = (
    playlistId: BodyType<string>,
    uploadCustomPlaylistCoverBody: string,
 ) => {
      return customInstance<void>(
      {url: `/playlists/${playlistId}/images`, method: 'put',
      headers: {'Content-Type': 'image/jpeg', },
      data: uploadCustomPlaylistCoverBody
    },
      );
    }
  
/**
 * Remove one or more items from a user's playlist.

 * @summary Remove Playlist Items

 */
export const removeTracksPlaylist = (
    playlistId: string,
    removeTracksPlaylistBody: BodyType<RemoveTracksPlaylistBody>,
 ) => {
      return customInstance<PlaylistSnapshotIdResponse>(
      {url: `/playlists/${playlistId}/tracks`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: removeTracksPlaylistBody
    },
      );
    }
  
/**
 * Get full details of the items of a playlist owned by a Spotify user.

 * @summary Get Playlist Items

 */
export const getPlaylistsTracks = (
    playlistId: string,
    params?: GetPlaylistsTracksParams,
 ) => {
      return customInstance<PagingPlaylistTrackObjectResponse>(
      {url: `/playlists/${playlistId}/tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Add one or more items to a user's playlist.

 * @summary Add Items to Playlist

 */
export const addTracksToPlaylist = (
    playlistId: string,
    addTracksToPlaylistBody: BodyType<AddTracksToPlaylistBody>,
    params?: AddTracksToPlaylistParams,
 ) => {
      return customInstance<PlaylistSnapshotIdResponse>(
      {url: `/playlists/${playlistId}/tracks`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: addTracksToPlaylistBody,
        params
    },
      );
    }
  
/**
 * Either reorder or replace items in a playlist depending on the request's parameters.
To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
To replace items, include `uris` as either a query parameter or in the request's body.
Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
<br/>
**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
These operations can't be applied together in a single request.

 * @summary Update Playlist Items

 */
export const reorderOrReplacePlaylistsTracks = (
    playlistId: string,
    reorderOrReplacePlaylistsTracksBody: BodyType<ReorderOrReplacePlaylistsTracksBody>,
    params?: ReorderOrReplacePlaylistsTracksParams,
 ) => {
      return customInstance<PlaylistSnapshotIdResponse>(
      {url: `/playlists/${playlistId}/tracks`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: reorderOrReplacePlaylistsTracksBody,
        params
    },
      );
    }
  
/**
 * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.

 * @summary Get Recommendations

 */
export const getRecommendations = (
    params?: GetRecommendationsParams,
 ) => {
      return customInstance<OneRecommendationsResponse>(
      {url: `/recommendations`, method: 'get',
        params
    },
      );
    }
  
/**
 * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).

 * @summary Get Available Genre Seeds

 */
export const getRecommendationGenres = (
    
 ) => {
      return customInstance<ManyGenresResponse>(
      {url: `/recommendations/available-genre-seeds`, method: 'get'
    },
      );
    }
  
/**
 * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks
that match a keyword string.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Search for Item

 */
export const search = (
    params: SearchParams,
 ) => {
      return customInstance<SearchItemsResponse>(
      {url: `/search`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for several shows based on their Spotify IDs.

 * @summary Get Several Shows

 */
export const getMultipleShows = (
    params: GetMultipleShowsParams,
 ) => {
      return customInstance<ManySimplifiedShowsResponse>(
      {url: `/shows`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single show identified by its
unique Spotify ID.

 * @summary Get Show

 */
export const getAShow = (
    id: string,
    params?: GetAShowParams,
 ) => {
      return customInstance<OneShowResponse>(
      {url: `/shows/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information about an show‚Äôs episodes. Optional parameters can be used to limit the number of episodes returned.

 * @summary Get Show Episodes

 */
export const getAShowsEpisodes = (
    id: string,
    params?: GetAShowsEpisodesParams,
 ) => {
      return customInstance<PagingSimplifiedEpisodeObjectResponse>(
      {url: `/shows/${id}/episodes`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for multiple tracks based on their Spotify IDs.

 * @summary Get Several Tracks

 */
export const getSeveralTracks = (
    params: GetSeveralTracksParams,
 ) => {
      return customInstance<ManyTracksResponse>(
      {url: `/tracks`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get Spotify catalog information for a single track identified by its
unique Spotify ID.

 * @summary Get Track

 */
export const getTrack = (
    id: string,
    params?: GetTrackParams,
 ) => {
      return customInstance<OneTrackResponse>(
      {url: `/tracks/${id}`, method: 'get',
        params
    },
      );
    }
  
/**
 * Get public profile information about a Spotify user.

 * @summary Get User's Profile

 */
export const getUsersProfile = (
    userId: string,
 ) => {
      return customInstance<OnePublicUserResponse>(
      {url: `/users/${userId}`, method: 'get'
    },
      );
    }
  
/**
 * Get a list of the playlists owned or followed by a Spotify user.

 * @summary Get User's Playlists

 */
export const getListUsersPlaylists = (
    userId: string,
    params?: GetListUsersPlaylistsParams,
 ) => {
      return customInstance<PagedPlaylistsResponse>(
      {url: `/users/${userId}/playlists`, method: 'get',
        params
    },
      );
    }
  
/**
 * Create a playlist for a Spotify user. (The playlist will be empty until
you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)

 * @summary Create Playlist

 */
export const createPlaylist = (
    userId: string,
    createPlaylistBody: BodyType<CreatePlaylistBody>,
 ) => {
      return customInstance<OnePlaylistResponse>(
      {url: `/users/${userId}/playlists`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPlaylistBody
    },
      );
    }
  
export type GetMultipleAlbumsResult = NonNullable<Awaited<ReturnType<typeof getMultipleAlbums>>>
export type GetAnAlbumResult = NonNullable<Awaited<ReturnType<typeof getAnAlbum>>>
export type GetAnAlbumsTracksResult = NonNullable<Awaited<ReturnType<typeof getAnAlbumsTracks>>>
export type GetMultipleArtistsResult = NonNullable<Awaited<ReturnType<typeof getMultipleArtists>>>
export type GetAnArtistResult = NonNullable<Awaited<ReturnType<typeof getAnArtist>>>
export type GetAnArtistsAlbumsResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsAlbums>>>
export type GetAnArtistsRelatedArtistsResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsRelatedArtists>>>
export type GetAnArtistsTopTracksResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsTopTracks>>>
export type GetAudioAnalysisResult = NonNullable<Awaited<ReturnType<typeof getAudioAnalysis>>>
export type GetSeveralAudioFeaturesResult = NonNullable<Awaited<ReturnType<typeof getSeveralAudioFeatures>>>
export type GetAudioFeaturesResult = NonNullable<Awaited<ReturnType<typeof getAudioFeatures>>>
export type GetMultipleAudiobooksResult = NonNullable<Awaited<ReturnType<typeof getMultipleAudiobooks>>>
export type GetAnAudiobookResult = NonNullable<Awaited<ReturnType<typeof getAnAudiobook>>>
export type GetAudiobookChaptersResult = NonNullable<Awaited<ReturnType<typeof getAudiobookChapters>>>
export type GetCategoriesResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
export type GetACategoryResult = NonNullable<Awaited<ReturnType<typeof getACategory>>>
export type GetACategoriesPlaylistsResult = NonNullable<Awaited<ReturnType<typeof getACategoriesPlaylists>>>
export type GetFeaturedPlaylistsResult = NonNullable<Awaited<ReturnType<typeof getFeaturedPlaylists>>>
export type GetNewReleasesResult = NonNullable<Awaited<ReturnType<typeof getNewReleases>>>
export type GetSeveralChaptersResult = NonNullable<Awaited<ReturnType<typeof getSeveralChapters>>>
export type GetAChapterResult = NonNullable<Awaited<ReturnType<typeof getAChapter>>>
export type GetMultipleEpisodesResult = NonNullable<Awaited<ReturnType<typeof getMultipleEpisodes>>>
export type GetAnEpisodeResult = NonNullable<Awaited<ReturnType<typeof getAnEpisode>>>
export type GetAvailableMarketsResult = NonNullable<Awaited<ReturnType<typeof getAvailableMarkets>>>
export type GetCurrentUsersProfileResult = NonNullable<Awaited<ReturnType<typeof getCurrentUsersProfile>>>
export type RemoveAlbumsUserResult = NonNullable<Awaited<ReturnType<typeof removeAlbumsUser>>>
export type GetUsersSavedAlbumsResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAlbums>>>
export type SaveAlbumsUserResult = NonNullable<Awaited<ReturnType<typeof saveAlbumsUser>>>
export type CheckUsersSavedAlbumsResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAlbums>>>
export type RemoveAudiobooksUserResult = NonNullable<Awaited<ReturnType<typeof removeAudiobooksUser>>>
export type GetUsersSavedAudiobooksResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAudiobooks>>>
export type SaveAudiobooksUserResult = NonNullable<Awaited<ReturnType<typeof saveAudiobooksUser>>>
export type CheckUsersSavedAudiobooksResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAudiobooks>>>
export type RemoveEpisodesUserResult = NonNullable<Awaited<ReturnType<typeof removeEpisodesUser>>>
export type GetUsersSavedEpisodesResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedEpisodes>>>
export type SaveEpisodesUserResult = NonNullable<Awaited<ReturnType<typeof saveEpisodesUser>>>
export type CheckUsersSavedEpisodesResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedEpisodes>>>
export type UnfollowArtistsUsersResult = NonNullable<Awaited<ReturnType<typeof unfollowArtistsUsers>>>
export type GetFollowedResult = NonNullable<Awaited<ReturnType<typeof getFollowed>>>
export type FollowArtistsUsersResult = NonNullable<Awaited<ReturnType<typeof followArtistsUsers>>>
export type CheckCurrentUserFollowsResult = NonNullable<Awaited<ReturnType<typeof checkCurrentUserFollows>>>
export type GetInformationAboutTheUsersCurrentPlaybackResult = NonNullable<Awaited<ReturnType<typeof getInformationAboutTheUsersCurrentPlayback>>>
export type TransferAUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof transferAUsersPlayback>>>
export type GetTheUsersCurrentlyPlayingTrackResult = NonNullable<Awaited<ReturnType<typeof getTheUsersCurrentlyPlayingTrack>>>
export type GetAUsersAvailableDevicesResult = NonNullable<Awaited<ReturnType<typeof getAUsersAvailableDevices>>>
export type SkipUsersPlaybackToNextTrackResult = NonNullable<Awaited<ReturnType<typeof skipUsersPlaybackToNextTrack>>>
export type PauseAUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof pauseAUsersPlayback>>>
export type StartAUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof startAUsersPlayback>>>
export type SkipUsersPlaybackToPreviousTrackResult = NonNullable<Awaited<ReturnType<typeof skipUsersPlaybackToPreviousTrack>>>
export type GetQueueResult = NonNullable<Awaited<ReturnType<typeof getQueue>>>
export type AddToQueueResult = NonNullable<Awaited<ReturnType<typeof addToQueue>>>
export type GetRecentlyPlayedResult = NonNullable<Awaited<ReturnType<typeof getRecentlyPlayed>>>
export type SetRepeatModeOnUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof setRepeatModeOnUsersPlayback>>>
export type SeekToPositionInCurrentlyPlayingTrackResult = NonNullable<Awaited<ReturnType<typeof seekToPositionInCurrentlyPlayingTrack>>>
export type ToggleShuffleForUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof toggleShuffleForUsersPlayback>>>
export type SetVolumeForUsersPlaybackResult = NonNullable<Awaited<ReturnType<typeof setVolumeForUsersPlayback>>>
export type GetAListOfCurrentUsersPlaylistsResult = NonNullable<Awaited<ReturnType<typeof getAListOfCurrentUsersPlaylists>>>
export type RemoveShowsUserResult = NonNullable<Awaited<ReturnType<typeof removeShowsUser>>>
export type GetUsersSavedShowsResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedShows>>>
export type SaveShowsUserResult = NonNullable<Awaited<ReturnType<typeof saveShowsUser>>>
export type CheckUsersSavedShowsResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedShows>>>
export type GetUsersTopArtistsResult = NonNullable<Awaited<ReturnType<typeof getUsersTopArtists>>>
export type GetUsersTopTracksResult = NonNullable<Awaited<ReturnType<typeof getUsersTopTracks>>>
export type RemoveTracksUserResult = NonNullable<Awaited<ReturnType<typeof removeTracksUser>>>
export type GetUsersSavedTracksResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedTracks>>>
export type SaveTracksUserResult = NonNullable<Awaited<ReturnType<typeof saveTracksUser>>>
export type CheckUsersSavedTracksResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedTracks>>>
export type GetPlaylistResult = NonNullable<Awaited<ReturnType<typeof getPlaylist>>>
export type ChangePlaylistDetailsResult = NonNullable<Awaited<ReturnType<typeof changePlaylistDetails>>>
export type UnfollowPlaylistResult = NonNullable<Awaited<ReturnType<typeof unfollowPlaylist>>>
export type FollowPlaylistResult = NonNullable<Awaited<ReturnType<typeof followPlaylist>>>
export type CheckIfUserFollowsPlaylistResult = NonNullable<Awaited<ReturnType<typeof checkIfUserFollowsPlaylist>>>
export type GetPlaylistCoverResult = NonNullable<Awaited<ReturnType<typeof getPlaylistCover>>>
export type UploadCustomPlaylistCoverResult = NonNullable<Awaited<ReturnType<typeof uploadCustomPlaylistCover>>>
export type RemoveTracksPlaylistResult = NonNullable<Awaited<ReturnType<typeof removeTracksPlaylist>>>
export type GetPlaylistsTracksResult = NonNullable<Awaited<ReturnType<typeof getPlaylistsTracks>>>
export type AddTracksToPlaylistResult = NonNullable<Awaited<ReturnType<typeof addTracksToPlaylist>>>
export type ReorderOrReplacePlaylistsTracksResult = NonNullable<Awaited<ReturnType<typeof reorderOrReplacePlaylistsTracks>>>
export type GetRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getRecommendations>>>
export type GetRecommendationGenresResult = NonNullable<Awaited<ReturnType<typeof getRecommendationGenres>>>
export type SearchResult = NonNullable<Awaited<ReturnType<typeof search>>>
export type GetMultipleShowsResult = NonNullable<Awaited<ReturnType<typeof getMultipleShows>>>
export type GetAShowResult = NonNullable<Awaited<ReturnType<typeof getAShow>>>
export type GetAShowsEpisodesResult = NonNullable<Awaited<ReturnType<typeof getAShowsEpisodes>>>
export type GetSeveralTracksResult = NonNullable<Awaited<ReturnType<typeof getSeveralTracks>>>
export type GetTrackResult = NonNullable<Awaited<ReturnType<typeof getTrack>>>
export type GetUsersProfileResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetListUsersPlaylistsResult = NonNullable<Awaited<ReturnType<typeof getListUsersPlaylists>>>
export type CreatePlaylistResult = NonNullable<Awaited<ReturnType<typeof createPlaylist>>>
